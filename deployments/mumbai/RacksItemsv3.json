{
  "address": "0x726731DFC573Dc24a654D3186312C3EdE03f2D41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_racksTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_MockMrCryptoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "casePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "item",
          "type": "uint256"
        }
      ],
      "name": "CaseOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "casePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "itemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemExchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "itemPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTries",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "newTicketOnSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "sellingItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ticketBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "realOwner",
          "type": "address"
        }
      ],
      "name": "ticketClaimedBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTries",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "ticketConditionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "unListTicketOnSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListedItem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "_rarityOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "casePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeItemPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTries",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeTicketConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimTicketBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exchangeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getITicketsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTries",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeWhenSold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAvaliable",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItemsv3.caseTicket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItemsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "itemOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isOnSale",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItemsv3.itemOnSale[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "getMarketItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "itemOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isOnSale",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItemsv3.itemOnSale",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTries",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeWhenSold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAvaliable",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItemsv3.caseTicket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "getTicketDurationLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isVip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemSupply",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItemOnMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numTries",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openCase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "removeListRacksMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeSingleRacksMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_contractState",
      "outputs": [
        {
          "internalType": "enum RacksItemsv3.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_randomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setCasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "setListRacksMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setSingleRacksMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "supplyOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "unListTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "viewItems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "withdrawAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x88aa74b13e65707e7e0125c983c9de47dd395d3f38cd901d528dfd36e1cef3d1",
  "receipt": {
    "to": null,
    "from": "0x105dD7af9cd6AdD2ACa7913e2f61FeBc40814006",
    "contractAddress": "0x726731DFC573Dc24a654D3186312C3EdE03f2D41",
    "transactionIndex": 183,
    "gasUsed": "5001612",
    "logsBloom": "0x
    "blockHash": "0x1e58863cd804e5944535ccb95891efce32c2268c3c0ae018d0f107e127618b1e",
    "transactionHash": "0x88aa74b13e65707e7e0125c983c9de47dd395d3f38cd901d528dfd36e1cef3d1",
    "logs": [
      {
        "transactionIndex": 183,
        "blockNumber": 26474752,
        "transactionHash": "0x88aa74b13e65707e7e0125c983c9de47dd395d3f38cd901d528dfd36e1cef3d1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000105dd7af9cd6add2aca7913e2f61febc40814006",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000458420bcc090080000000000000000000000000000000000000000000000000acd7d2a01d10b64000000000000000000000000000000000000000000001896003218f0bca7314d0000000000000000000000000000000000000000000000000a87f90945107b5c00000000000000000000000000000000000000000000189600779d117967c155",
        "logIndex": 632,
        "blockHash": "0x1e58863cd804e5944535ccb95891efce32c2268c3c0ae018d0f107e127618b1e"
      }
    ],
    "blockNumber": 26474752,
    "cumulativeGasUsed": "16036341",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "286",
    "100000",
    "0xDd37cc99D2B01834C005C0d0329a10873D6C5148",
    "0x8A19Ca233D186a475d4c22F7DD2dD883574D5Cf6"
  ],
  "numDeployments": 14,
  "solcInputHash": "c1d69c72c5ed7a0a967a743959336980",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_racksTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MockMrCryptoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"casePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"CaseOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"casePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"itemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"itemPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"newTicketOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellingItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ticketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realOwner\",\"type\":\"address\"}],\"name\":\"ticketClaimedBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ticketConditionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unListTicketOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListedItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_rarityOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeItemPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTicketConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimTicketBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getITicketsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeWhenSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvaliable\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItemsv3.caseTicket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItemsv3.itemOnSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"getMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItemsv3.itemOnSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getMarketTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeWhenSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvaliable\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItemsv3.caseTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getTicketDurationLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItemOnMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeListRacksMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeSingleRacksMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_contractState\",\"outputs\":[{\"internalType\":\"enum RacksItemsv3.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setListRacksMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setSingleRacksMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"supplyOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"unListTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_randomNumber()\":{\"details\":\"Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened\"},\"_rarityOfItem(uint256)\":{\"details\":\"- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buyItem(uint256)\":{\"details\":\"- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event \"},\"buyTicket(uint256)\":{\"details\":\"- Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket - Should check that user has a listed ticket - Transfer RacksToken from buyer to seller - Update mappings variables - Emit event\"},\"changeItemPrice(uint256,uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event\"},\"changeTicketConditions(uint256,uint256,uint256,uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event\"},\"claimTicketBack(uint256)\":{\"details\":\"- Check that claimer is lending a Ticket - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours  -> transform duration into seconds  - Update mappings - Emit event\"},\"flipContractState()\":{\"details\":\"Only callable by the Owner or an admin\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isVip(address)\":{\"details\":\"- Require users MrCrypro's balance is > ' - Require that RacksMembers user's attribute is true\"},\"listItem(uint256)\":{\"details\":\"Only callable by the Owner\"},\"listItemOnMarket(uint256,uint256)\":{\"details\":\"- Needs to check balanceOf item trying to be sold - Needs to transfer item  - Update marketItems array - Emit event \"},\"listTicket(uint256,uint256,uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Check is user has had a ticket before     - If so: check that is has ticket now     - if not: create ticket (first ticket in live for this user) - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time - Include ticket on array - Increase s_ticketCount - Set mapping to true - Emit event\"},\"openCase()\":{\"details\":\" - Should check that user owns a Ticket -> modifier - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item\"},\"removeListRacksMembers(address[])\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false\"},\"removeSingleRacksMember(address)\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setAdmin(address)\":{\"details\":\"Only callable by the Owner\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setCasePrice(uint256)\":{\"details\":\"Only callable by the Owner\"},\"setListRacksMembers(address[])\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true\"},\"setSingleRacksMember(address)\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true\"},\"setTokenUri(uint256,string)\":{\"details\":\"- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set\"},\"supplyOfItem(uint256)\":{\"details\":\"- Getter of s_maxSupply mapping\"},\"unListItem(uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Needs to transfer item from contract to user address - Update item's sold variable - Emit event\"},\"unListTicket(uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event\"},\"uri(uint256)\":{\"details\":\"- returns information stored in s_uris mapping - Any user can check this information\"},\"viewItems(address)\":{\"details\":\"Copy users inventory in an empty array and returns it\"},\"withdrawAllFunds(address)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to\"},\"withdrawFunds(address,uint256)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer\"}},\"version\":1},\"userdoc\":{\"events\":{\"CaseOpened(address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Standard variables\"},\"_randomNumber()\":{\"notice\":\"Used to get an actually Random Number -> to pick an item when openning a case\"},\"_rarityOfItem(uint256)\":{\"notice\":\"Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item\"},\"buyItem(uint256)\":{\"notice\":\"Function used to buy an item on the marketplace\"},\"buyTicket(uint256)\":{\"notice\":\"This function is used to buy a caseTicket\"},\"changeItemPrice(uint256,uint256)\":{\"notice\":\"Function used to change price from item listed \"},\"changeTicketConditions(uint256,uint256,uint256,uint256)\":{\"notice\":\"This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace\"},\"claimTicketBack(uint256)\":{\"notice\":\"Function used to claim Ticket back when duration is over\"},\"exchangeItem(uint256)\":{\"notice\":\"Function used to exchange a token item for a real physical clothe.\"},\"flipContractState()\":{\"notice\":\"Change contract state from Active to Inactive and viceversa\"},\"getCasePrice()\":{\"notice\":\"View case price\"},\"getITicketsOnSale()\":{\"notice\":\"Function used to return every ticket that are currently on sale\"},\"getItemsOnSale()\":{\"notice\":\"function used to return every item that is on sale on the MarketPlace\"},\"getMarketItem(uint256)\":{\"notice\":\"Function used to return items that are currently on sale\"},\"getMarketTicket(uint256)\":{\"notice\":\"Function used to return ticket that are currently on sale\"},\"getTicketDurationLeft(uint256)\":{\"notice\":\"Function used to view how much time is left for lended Ticket\"},\"i_vrfCoordinator()\":{\"notice\":\"VRF Variables\"},\"isVip(address)\":{\"notice\":\"Check if user is RacksMembers and owns at least 1 MrCrypto\"},\"listItem(uint256)\":{\"notice\":\"List a new item to the avaliable collection\"},\"listItemOnMarket(uint256,uint256)\":{\"notice\":\"Function used to sell an item on the marketplace\"},\"listTicket(uint256,uint256,uint256)\":{\"notice\":\"This function is used for a VIP user to list 'Case Tickets' on the MarketPlace\"},\"openCase()\":{\"notice\":\"Function used to 'open a case' and get an item\"},\"removeListRacksMembers(address[])\":{\"notice\":\"Set RacksMember attribute as false for a list of users that are Members (array)\"},\"removeSingleRacksMember(address)\":{\"notice\":\"Set RacksMember attribute as false for a user that was Racks Member before but it is not now\"},\"setAdmin(address)\":{\"notice\":\"Set new Admin\"},\"setCasePrice(uint256)\":{\"notice\":\"Change price of the box\"},\"setListRacksMembers(address[])\":{\"notice\":\"Set RacksMember attribute as true for a list of users that are Members (array)\"},\"setSingleRacksMember(address)\":{\"notice\":\"Set RacksMember attribute as true for a user that is Member\"},\"setTokenUri(uint256,string)\":{\"notice\":\"Used to set tokenURI to specific item \"},\"supplyOfItem(uint256)\":{\"notice\":\"Returns maxSupply of specific item (by tokenId)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Need to override supportsInterface function because Contract is ERC1155 and AccessControl\"},\"unListItem(uint256)\":{\"notice\":\"Function used to unlist an item from marketplace\"},\"unListTicket(uint256)\":{\"notice\":\"This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace\"},\"uri(uint256)\":{\"notice\":\"Used to return token URI by inserting tokenID\"},\"viewItems(address)\":{\"notice\":\"Returns all the items inside the user's inventory (Could be used by the user to check his inventory or to check someone else inventory by address)\"},\"withdrawAllFunds(address)\":{\"notice\":\"Used to withdraw ALL funds\"},\"withdrawFunds(address,uint256)\":{\"notice\":\"Used to withdraw specific amount of funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RacksItemsv3.sol\":\"RacksItemsv3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RacksItemsv3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\"; // define roles\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\"; // erc1155 tokens\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\"; // contract should be ERC1155 holder to receive ERC1155 tokens\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // to instanciate MrCrypto object\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; // to work with RacksToken\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\"; // to work with COORDINATOR and VRF\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; // to use functionalities for Chainlink VRF\\n\\ncontract RacksItemsv3 is ERC1155, ERC1155Holder, AccessControl, VRFConsumerBaseV2 { // VRFv2SubscriptionManager\\n   \\n  /**\\n  * @notice Enum for Contract state -> to let user enter call some functions or not\\n  */\\n  enum ContractState {   \\n    Active,\\n    Inactive\\n  }\\n\\n  /**\\n  * @notice Struct for Items on the Marketplace\\n  */\\n  struct itemOnSale{\\n    uint256 tokenId;\\n    uint256 marketItemId;\\n    uint256 price;\\n    address itemOwner;\\n    bool isOnSale;\\n  }\\n\\n  /**\\n  * @notice Struct for Tickets on the Marketplace\\n  */\\n  struct caseTicket {\\n    uint256 ticketId;\\n    uint256 numTries;\\n    uint256 duration;\\n    uint256 price;\\n    address owner;\\n    uint256 timeWhenSold;\\n    bool isAvaliable;\\n  }\\n\\n  /// @notice tokens\\n  IERC721 MR_CRYPTO;\\n  IERC20 racksToken;\\n  \\n  /// @notice Standard variables\\n  bytes32 public constant ADMIN_ROLE = 0x00;\\n  address private _owner;\\n  uint256 private s_maxTotalSupply;\\n  uint256 private s_tokenCount;\\n  uint256 private _marketCount;\\n  uint256 private s_ticketCount;\\n  uint256 public casePrice; // Change to RacksToken\\n  bool public contractActive = true;\\n  ContractState public s_contractState;\\n  itemOnSale[] _marketItems;\\n  caseTicket[] _tickets;\\n\\n  /// @notice VRF Variables\\n  VRFCoordinatorV2Interface public immutable i_vrfCoordinator; \\n  bytes32 public immutable i_gasLane;\\n  uint64 public immutable i_subscriptionId;\\n  uint32 public immutable i_callbackGasLimit;\\n  uint16 public constant REQUEST_CONFIRMATIONS = 3; \\n  uint32 public constant NUM_WORDS = 2; \\n  uint256 public s_randomWord; // random Number we get from Chainlink VRF\\n  \\n  /// @notice Mappings\\n  mapping(address => bool) private s_gotRacksMembers;\\n  mapping(uint => uint) private s_maxSupply;\\n  mapping (uint256 => string) private s_uris; \\n  mapping(address => bool) private s_isSellingTicket;\\n  mapping(address => bool) private s_hasTicket; \\n  mapping(address => bool) private s_hadTicket;\\n  mapping(address => bool) private s_ticketIsLended;\\n\\n  /// @notice Events\\n  event CaseOpened(address user, uint256 casePrice, uint256 item);\\n  event casePriceChanged(uint256 newPrice);\\n  event itemExchanged(address user, uint256 tokenId);\\n  event sellingItem(address user, uint256 tokenId, uint256 price);\\n  event itemBought(address buyer, address seller, uint256 marketItemId, uint256 price);\\n  event unListedItem(address owner, uint256 marketItemId);\\n  event itemPriceChanged(address owner, uint256 marketItemId, uint256 oldPrice, uint256 newPrice);\\n  event newTicketOnSale(address seller, uint256 numTries, uint256 _hours, uint256 price);\\n  event unListTicketOnSale(address owner);\\n  event ticketConditionsChanged(address owner, uint256 newTries, uint256 newHours, uint256 newPrice);\\n  event ticketBought(uint256 ticketId, address oldOwner, address newOwner, uint256 price);\\n  event ticketClaimedBack(address borrower, address realOwner);\\n  \\n  /// @notice Modifiers\\n  /// @notice Check that person calling a function is the owner of the Contract\\n  modifier onlyOwner() {\\n    require(msg.sender == _owner, \\\"User is not the owner\\\");\\n      _;\\n  }\\n\\n  /// @notice Check that user is Owner or Admin\\n  modifier onlyOwnerOrAdmin() {\\n    require(_isOwnerOrAdmin(msg.sender), \\\"User is not the Owner or an Admin\\\");\\n    _;\\n  }\\n\\n  /// @notice Check that user is Member and owns at least 1 MrCrypto\\n  modifier onlyVIP() {\\n    require(isVip(msg.sender), \\\"User is not RacksMembers or does not owns a MrCrypto\\\");\\n      _;\\n  }\\n\\n  /**  @notice Check that user is owns at least 1 ticket for opening case (used in case user\\n  * does not own a MrCrypto or RacksMember and buys a ticket from another user)\\n  */\\n  modifier ownsTicket() {\\n    require(s_hasTicket[msg.sender], \\\"User does not owns a Ticket for openning the case.\\\");\\n    _;\\n  }\\n\\n  /// @notice Check if contract state is Active\\n  modifier contractIsActive() {\\n    require(s_contractState == ContractState.Active, \\\"Contract is not active at this moment\\\");\\n    _;\\n  }\\n\\n  constructor(address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit, address _racksTokenAddress, address _MockMrCryptoAddress) \\n  VRFConsumerBaseV2(vrfCoordinatorV2)\\n  ERC1155(\\\"\\\"){\\n    /**\\n    * Initialization of Chainlink VRF variables\\n    */\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); \\n    i_gasLane = gasLane; \\n    i_subscriptionId = subscriptionId;\\n    i_callbackGasLimit = callbackGasLimit; \\n\\n    /**\\n    * Initialization of RacksItem contract variables\\n    */\\n    MR_CRYPTO = IERC721(_MockMrCryptoAddress);\\n    racksToken = IERC20(_racksTokenAddress);\\n    _owner = msg.sender;\\n    s_tokenCount = 0;\\n    s_ticketCount = 0;\\n    casePrice = 1;\\n    s_contractState = ContractState.Active;\\n\\n  }\\n\\n  /** \\n  * @notice Need to override supportsInterface function because Contract is ERC1155 and AccessControl\\n  */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC1155Receiver, AccessControl) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n\\n  // FUNCTIONS RELATED WITH THE CASE\\n\\n  /**\\n  * @notice Change price of the box\\n  * @dev Only callable by the Owner\\n  */\\n  function setCasePrice(uint256 price) public onlyOwnerOrAdmin {\\n    casePrice = price;\\n    emit casePriceChanged(price);\\n  }\\n\\n  /**\\n  * @notice View case price\\n  */\\n  function getCasePrice() public view returns(uint256) {\\n    return casePrice;\\n  }\\n\\n  /**\\n  * @notice Used to get an actually Random Number -> to pick an item when openning a case\\n  * @dev Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object\\n  * set as internal because is going to be called only when a case is opened\\n  */\\n  function _randomNumber() public returns(uint256) {\\n  uint256 s_requestedNumber = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS);\\n  return s_requestedNumber;\\n  }\\n\\n  /**\\n  * @notice Function to actually pick a winner \\n  * @dev \\n  * - randomWords -> array of randomWords\\n  */\\n  function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\n    s_randomWord = randomWords[0]; // just in case random number is very long we apply modular function \\n  }\\n\\n   /**\\n  * @notice Function used to 'open a case' and get an item\\n  * @dev \\n  * - Should check that user owns a Ticket -> modifier\\n  * - Should check that msg.value is bigger than casePrice\\n  * - Should transfer msg.value to the contract\\n  * - Internally calls randomNumber() \\n  * - Apply modular function for the randomNumber to be between 0 and totalSupply of items\\n  * - Should choose an item\\n  */\\n  function openCase() public contractIsActive {  \\n    if(!isVip(msg.sender)){ // Case where user is not VIP -> needs a ticket\\n      require(s_hasTicket[msg.sender], \\\"User is NOT VIP and does not owns a Ticket.\\\");\\n    }\\n\\n    racksToken.transferFrom(msg.sender, address(this), casePrice);\\n    uint256 randomNumber = _randomNumber()  % s_maxTotalSupply;\\n    uint256 totalCount = 0;\\n    uint256 item;\\n\\n    for(uint256 i = 0 ; i < s_tokenCount; i++) {\\n      uint256 _newTotalCount = totalCount + s_maxSupply[i] ;\\n      if(randomNumber > _newTotalCount) {\\n        totalCount = _newTotalCount;\\n      }else {\\n        item = i;\\n        if(balanceOf(address(this),item)==0){\\n          for(uint256 j = item-1; j >= 0; j--){\\n            if (balanceOf(address(this),j)>0){\\n              item = j;\\n              break;\\n            }\\n          }\\n        }\\n        _safeTransferFrom(address(this), msg.sender, item , 1,\\\"\\\");\\n        break;\\n      }\\n    }\\n    if (!isVip(msg.sender)){ // Case opener is someone that bought a ticket\\n    decreaseTicketTries(msg.sender);\\n    }\\n    emit CaseOpened(msg.sender, casePrice, item);\\n  }\\n\\n\\n  // FUNCTIONS RELATED TO ITEMS\\n\\n  /**\\n  * @notice Returns maxSupply of specific item (by tokenId)\\n  * @dev - Getter of s_maxSupply mapping\\n  */\\n  function supplyOfItem(uint256 tokenId) public view returns(uint) {\\n    return s_maxSupply[tokenId];\\n  }\\n\\n  /**\\n  * @notice Check that item exists (by tokenId)\\n  */\\n  function _itemExists(uint256 tokenId) internal view returns (bool) {\\n    require(s_maxSupply[tokenId] > 0);\\n    return true;\\n  }\\n\\n  /**\\n  * @notice Calculate chance of receiving an specific item\\n  * - As higher is result higher is the rarity of the item\\n  * @dev - Requires that tokenId exists (item is listed)\\n  * - chance is calculated as item supply divided by total items supply\\n  */\\n  function _rarityOfItem(uint256 tokenId) public virtual view returns(uint256) {\\n    require(_itemExists(tokenId));\\n    uint256 result = s_maxTotalSupply / s_maxSupply[tokenId];\\n    return result;\\n  }\\n\\n  /**\\n  * @notice Returns all the items inside the user's inventory (Could be used by the\\n  * user to check his inventory or to check someone else inventory by address)\\n  * @dev Copy users inventory in an empty array and returns it\\n  */\\n  function viewItems(address owner) public view returns(uint256[] memory) { \\n    uint256[] memory inventory = new uint [](s_tokenCount);\\n    for(uint256 i=0 ; i<inventory.length; i++) {\\n      inventory[i]=balanceOf(owner,i);\\n    }\\n    return inventory;\\n  }\\n\\n  /**\\n  * @notice List a new item to the avaliable collection\\n  * @dev Only callable by the Owner\\n  */\\n  function listItem(uint256 itemSupply) public onlyOwnerOrAdmin {\\n    _mintSupply(address(this), itemSupply);\\n  }\\n\\n  /**\\n  * @notice Mint supply tokens of each Item\\n  * @dev Declared internal because it is called inside the contructor\\n  * - call _mint function\\n  * - call set maxSupply function\\n  * - updates TotalMaxSupply of Items\\n  * - updates s_tokenCount -> Each items has associated an Id (e.g: Jeans -> Id: 0, Hoddie -> Id: 1,\\n  * we increment s_tokenCount so next time we call _mintSupply a new type of item is going to be minted)\\n  * - The items (tokens are minted by this contract and deposited into this contract address)\\n  */\\n  function _mintSupply(address receiver, uint256 amount) internal {\\n      _mint(receiver, s_tokenCount, amount, \\\"\\\");\\n      _setMaxSupply(s_tokenCount, amount);\\n      s_maxTotalSupply += amount;\\n      s_tokenCount += 1;\\n  }\\n\\n  /**\\n  * @notice Function used to set maxSupply of each item\\n  */\\n  function _setMaxSupply(uint256 tokenId, uint256 amount) internal {\\n      s_maxSupply[tokenId] = amount;\\n  }\\n\\n\\n  // FUNCTIONS RELATED TO THE \\\"MARKETPLACE\\\"\\n\\n  /**\\n  * @notice Function used to sell an item on the marketplace\\n  * @dev\\n  * - Needs to check balanceOf item trying to be sold\\n  * - Needs to transfer item \\n  * - Update marketItems array\\n  * - Emit event \\n  */\\n  function listItemOnMarket(uint256 marketItemId, uint256 price) public {\\n    require(balanceOf(msg.sender, marketItemId) > 0, \\\"Item not found.\\\");\\n    _marketItems.push(\\n      itemOnSale(\\n        marketItemId,\\n        _marketCount,\\n        price,\\n        msg.sender,\\n        true\\n      )\\n    );\\n    _marketCount++;\\n    emit sellingItem(msg.sender, marketItemId, price);\\n  }\\n\\n  /**\\n  * @notice Function used to unlist an item from marketplace\\n  * @dev\\n  * - Needs to check that user is trying to unlist an item he owns\\n  * - Needs to transfer item from contract to user address\\n  * - Update item's sold variable\\n  * - Emit event\\n  */\\n  function unListItem(uint256 marketItemId) public {\\n    require(_marketItems[marketItemId].itemOwner == msg.sender, \\\"You are not the owner of this item.\\\");\\n    _safeTransferFrom(address(this), msg.sender, marketItemId, 1, \\\"\\\");\\n    _marketItems[marketItemId].isOnSale = false;\\n    emit unListedItem(msg.sender, marketItemId);\\n  }\\n\\n  /**\\n  * @notice Function used to change price from item listed \\n  * @dev\\n  * - Needs to check that user is trying to unlist an item he owns\\n  * - Needs to update price status\\n  * - Emit event\\n  */\\n  function changeItemPrice(uint256 marketItemId, uint256 newPrice) public {\\n    require(_marketItems[marketItemId].itemOwner == msg.sender, \\\"You are not the owner of this item.\\\");\\n    uint256 oldPrice = _marketItems[marketItemId].price;\\n    _marketItems[marketItemId].price = newPrice;\\n    emit itemPriceChanged(msg.sender, marketItemId, oldPrice, newPrice);\\n  }\\n\\n  /**\\n  * @notice Function used to exchange a token item for a real physical clothe.\\n  */\\n  function exchangeItem(uint256 tokenId) public {\\n    require(balanceOf(msg.sender, tokenId) > 0);\\n    _burn(msg.sender, tokenId, 1);\\n    s_maxSupply[tokenId] -= 1;\\n    s_maxTotalSupply -=1;\\n    emit itemExchanged(msg.sender, tokenId);\\n  }\\n\\n  /**\\n  * @notice Function used to buy an item on the marketplace\\n  * @dev\\n  * - Needs to check that user is not trying to buy its own item\\n  * - Needs to check that item was not sold before\\n  * - Needs to transfer tokens from buyer to seller\\n  * - Needs to transfer item from seller to buyer\\n  * - Update sold attribute from array\\n  * - Emit event \\n  */\\n  function buyItem(uint256 marketItemId) public {\\n    require(msg.sender != _marketItems[marketItemId].itemOwner, \\\"You can not buy an item to yourself\\\");\\n    require(_marketItems[marketItemId].isOnSale == true, \\\"This item is not on sale anymore.\\\");\\n    racksToken.transferFrom(msg.sender, _marketItems[marketItemId].itemOwner, _marketItems[marketItemId].price);\\n    _safeTransferFrom(_marketItems[marketItemId].itemOwner, msg.sender, _marketItems[marketItemId].tokenId, 1 ,\\\"\\\");\\n    address oldOwner = _marketItems[marketItemId].itemOwner;\\n    _marketItems[marketItemId].itemOwner = msg.sender;\\n    _marketItems[marketItemId].isOnSale = false;\\n    emit itemBought(msg.sender, oldOwner, marketItemId, _marketItems[marketItemId].price);\\n  }\\n\\n  /**\\n  * @notice Function used to return items that are currently on sale\\n  */\\n  function getMarketItem(uint marketItemId) public view returns(itemOnSale memory){\\n    return _marketItems[marketItemId];\\n  }\\n\\n  /**\\n  * @notice function used to return every item that is on sale on the MarketPlace\\n  */\\n  function getItemsOnSale() public view returns(itemOnSale[] memory) {\\n    uint arrayLength;\\n    \\n    for(uint i=0; i<_marketItems.length;i++){\\n      itemOnSale memory item = _marketItems[i];\\n      if(item.isOnSale == true){\\n        arrayLength+=1;\\n      }\\n    }\\n    itemOnSale[] memory items = new itemOnSale[](arrayLength);\\n    uint indexCount;\\n    for(uint256 i = 0; i < _marketItems.length; i++){\\n      itemOnSale memory  item = _marketItems[i];\\n      if(item.isOnSale == true){\\n        items[indexCount]=item;\\n        indexCount++;\\n      }\\n    }\\n    return items;\\n  }\\n\\n  // FUNCTIONS RELATED TO \\\"TICKETS\\\"\\n\\n  /**\\n  * @notice This function is used for a VIP user to list 'Case Tickets' on the MarketPlace\\n  * @dev - Should check that user is Vip (Modifier)\\n  * - Check is user has had a ticket before\\n  *     - If so: check that is has ticket now\\n  *     - if not: create ticket (first ticket in live for this user)\\n  * - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time\\n  * - Include ticket on array\\n  * - Increase s_ticketCount\\n  * - Set mapping to true\\n  * - Emit event\\n  *\\n  */\\n  function listTicket(uint256 numTries, uint256 _hours, uint256 price) public onlyVIP {\\n    require(!s_isSellingTicket[msg.sender], \\\"User is already currently selling a Ticket\\\");\\n    if(s_hadTicket[msg.sender]) {\\n    require(s_hasTicket[msg.sender], \\\"User has not ticket avaliable\\\");\\n    }\\n      _tickets.push(\\n        caseTicket(\\n        s_ticketCount,\\n        numTries,\\n        _hours,\\n        price,\\n        msg.sender,\\n        0,\\n        true\\n      ));\\n      s_ticketCount++;\\n      s_isSellingTicket[msg.sender] = true;\\n      s_hadTicket[msg.sender] = true;\\n      s_hasTicket[msg.sender] = false;\\n      emit newTicketOnSale(msg.sender, numTries, _hours, price);\\n  }\\n\\n  /**\\n  * @notice This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace\\n  * @dev - Should check that user is Vip (Modifier)\\n  * - Should check that user has a listed ticket\\n  * - Emit event\\n  */\\n  function unListTicket(uint256 ticketId) public onlyVIP {\\n    require(s_isSellingTicket[msg.sender], \\\"User is not currently selling a Ticket\\\");\\n    require(_tickets[ticketId].owner == msg.sender, \\\"User is not owner of this ticket\\\");\\n    _tickets[ticketId].isAvaliable = false;\\n    s_isSellingTicket[msg.sender] = false;\\n    s_hasTicket[msg.sender] = true;\\n    emit unListTicketOnSale(msg.sender);\\n  }\\n\\n    /**\\n  * @notice This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace\\n  * @dev - Should check that user is Vip (Modifier)\\n  * - Should check that user has a listed ticket\\n  * - Emit event\\n  */\\n  function changeTicketConditions(uint256 ticketId, uint256 newTries, uint256 newHours, uint256 newPrice) public onlyVIP {\\n    require(s_isSellingTicket[msg.sender], \\\"User is not currently selling a Ticket\\\");\\n    require(_tickets[ticketId].owner == msg.sender, \\\"User is not owner of this ticket\\\");\\n    _tickets[ticketId].price = newPrice;\\n    _tickets[ticketId].duration = newHours;\\n    _tickets[ticketId].numTries = newTries;\\n    emit ticketConditionsChanged(msg.sender, newTries, newHours, newPrice);\\n  }\\n\\n    /**\\n  * @notice This function is used to buy a caseTicket\\n  * @dev - Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket\\n  * - Should check that user has a listed ticket\\n  * - Transfer RacksToken from buyer to seller\\n  * - Update mappings variables\\n  * - Emit event\\n  */\\n  function buyTicket(uint256 ticketId) public {\\n    require(!isVip(msg.sender), \\\"A VIP user can not buy a ticket\\\");\\n    require(_tickets[ticketId].owner != msg.sender, \\\"You can not buy a ticket to your self\\\");\\n    require(_tickets[ticketId].isAvaliable == true, \\\"Ticket is not currently avaliable\\\");\\n    address oldOwner = _tickets[ticketId].owner;\\n    racksToken.transferFrom(msg.sender, _tickets[ticketId].owner, _tickets[ticketId].price);\\n    _tickets[ticketId].timeWhenSold = block.timestamp;\\n    s_hasTicket[_tickets[ticketId].owner] = false;\\n    s_isSellingTicket[_tickets[ticketId].owner] = false;\\n    s_ticketIsLended[_tickets[ticketId].owner] = true;\\n    s_hasTicket[msg.sender] = true;\\n    _tickets[ticketId].owner = msg.sender;\\n    _tickets[ticketId].isAvaliable = false;\\n    emit ticketBought(ticketId, oldOwner, msg.sender, _tickets[ticketId].price);\\n  }\\n\\n  /** @notice Function used to claim Ticket back when duration is over\\n  * @dev - Check that claimer is lending a Ticket\\n  * - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours \\n  * -> transform duration into seconds \\n  * - Update mappings\\n  * - Emit event\\n  */\\n  function claimTicketBack(uint256 ticketId) public onlyVIP {\\n    require(s_ticketIsLended[msg.sender], \\\"User did not sell any Ticket\\\");\\n    require(((block.timestamp - _tickets[ticketId].timeWhenSold) > (_tickets[ticketId].duration) / 3600) || (_tickets[ticketId].numTries == 0), \\\"Duration of the Ticket or numTries is still avaliable\\\");\\n    address oldOwner = _tickets[ticketId].owner;\\n    s_hasTicket[_tickets[ticketId].owner] = false;\\n    s_hasTicket[msg.sender] = true;\\n    s_ticketIsLended[msg.sender] = false;\\n    _tickets[ticketId].owner = msg.sender;\\n    _tickets[ticketId].isAvaliable = true;\\n    s_hasTicket[_tickets[ticketId].owner] = true;\\n    emit ticketClaimedBack(oldOwner, msg.sender);\\n  }\\n  \\n  /** @notice Function used to decrease Ticket tries avaliables\\n  * @dev - Check if used trie was last one\\n  *        - If not: just decrease numTries\\n  *        - If so: decrease numTries, update Avaliability and mappings\\n  */\\n  function decreaseTicketTries(address user) internal {\\n    for (uint256 i = 0; i < _tickets.length; i++) {\\n        if (_tickets[i].owner == user) {\\n            if(_tickets[i].numTries != 1) { // Case it was not the last trie avaliable\\n                _tickets[i].numTries--;\\n            }else { // it was his last trie avaliable\\n                _tickets[i].numTries--;\\n                _tickets[i].isAvaliable = false;\\n                s_hasTicket[user] = false;\\n            }\\n        }       \\n    } \\n  }\\n\\n  /**\\n  * @notice Function used to return ticket that are currently on sale\\n  */\\n  function getMarketTicket(uint256 ticketId) public view returns(caseTicket memory) {\\n    return _tickets[ticketId];\\n  }\\n\\n  /**\\n  * @notice Function used to return every ticket that are currently on sale\\n  */\\n   function getITicketsOnSale() public view returns(caseTicket[] memory) {\\n    uint arrayLength;\\n    \\n    for(uint i=0; i<_tickets.length;i++){\\n      caseTicket memory ticket = _tickets[i];\\n      if(ticket.isAvaliable==true){\\n        arrayLength+=1;\\n      }\\n    }\\n    caseTicket[] memory tickets = new caseTicket[](arrayLength);\\n    uint indexCount;\\n    for(uint256 i = 0; i < _tickets.length; i++){\\n      caseTicket memory ticket = _tickets[i];\\n      if(ticket.isAvaliable==true){\\n        tickets[indexCount]=ticket;\\n        indexCount++;\\n      }\\n    }\\n    return tickets;\\n  }\\n  \\n  /**\\n  * @notice Function used to view how much time is left for lended Ticket\\n  */\\n  function getTicketDurationLeft(uint256 ticketId) public view returns (uint256) {\\n    require(_tickets[ticketId].timeWhenSold > 0, \\\"Ticket is not sold yet.\\\");\\n    require((block.timestamp - _tickets[ticketId].timeWhenSold) > (_tickets[ticketId].duration / 3600), \\\"Ticket has no time left for lending.\\\" );\\n    uint256 timeleft = (block.timestamp - _tickets[ticketId].timeWhenSold)*60 - (_tickets[ticketId].duration / 60);\\n    return timeleft;\\n  }\\n\\n  // FUNCTIONS RELATED TO \\\"USERS\\\"\\n\\n  /**\\n  * @notice Check if user is RacksMembers and owns at least 1 MrCrypto\\n  * @dev - Require users MrCrypro's balance is > '\\n  * - Require that RacksMembers user's attribute is true\\n  */\\n  function isVip(address user) public view returns(bool) {\\n    if((MR_CRYPTO.balanceOf(user) > 0) && (s_gotRacksMembers[user])) {\\n      return true;\\n    } else{\\n      return false;\\n    } \\n  }\\n\\n  /**\\n  * @notice Check if user is owner of the Contract or has admin role\\n  * @dev Only callable by the Owner\\n  */\\n  function _isOwnerOrAdmin(address user) internal view returns (bool) {\\n      require(_owner == user || hasRole(ADMIN_ROLE, user));\\n      return true;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as true for a user that is Member\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as true some address that was already set as true\\n  */\\n  function setSingleRacksMember(address user) public onlyOwnerOrAdmin {\\n    //require(!s_gotRacksMembers[user], \\\"User is already RacksMember\\\");\\n    s_gotRacksMembers[user] = true;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as true for a list of users that are Members (array)\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as true some address that was already set as true\\n  */\\n  function setListRacksMembers(address[] memory users) public onlyOwnerOrAdmin {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      //require(!s_gotRacksMembers[users[i]], \\\"User is already RacksMember\\\");\\n       s_gotRacksMembers[users[i]] = true;\\n    }\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as false for a user that was Racks Member before but it is not now\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as false some address that was already set as false\\n  */\\n  function removeSingleRacksMember(address user) public onlyOwnerOrAdmin {\\n    //require(s_gotRacksMembers[user], \\\"User is already not RacksMember\\\");\\n    s_gotRacksMembers[user] = false;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as false for a list of users that are Members (array)\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as false some address that was already set as false\\n  */\\n  function removeListRacksMembers(address[] memory users) public onlyOwnerOrAdmin {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      //require(s_gotRacksMembers[users[i]], \\\"User is already not RacksMember\\\");\\n      s_gotRacksMembers[users[i]] = false;\\n    }\\n  }\\n\\n  /**\\n  * @notice Set new Admin\\n  * @dev Only callable by the Owner\\n  */\\n  function setAdmin(address _newAdmin) public onlyOwner {\\n    _setupRole(ADMIN_ROLE, _newAdmin);\\n  }\\n\\n  // FUNCTIONS RELATED WITH THE CONTRACT\\n\\n  /**\\n  * @notice Change contract state from Active to Inactive and viceversa\\n  * @dev Only callable by the Owner or an admin\\n  */\\n  function flipContractState() public onlyOwnerOrAdmin {\\n    if (s_contractState == ContractState.Active) {\\n      s_contractState = ContractState.Inactive;\\n    }else {\\n      s_contractState = ContractState.Active;\\n    }\\n  }\\n\\n  // FUNCTIONS RELATED TO ERC1155 TOKENS\\n\\n  /**\\n  * @notice Used to return token URI by inserting tokenID\\n  * @dev - returns information stored in s_uris mapping\\n  * - Any user can check this information\\n  */\\n  function uri(uint256 tokenId) override public view returns (string memory) {\\n    return(s_uris[tokenId]);\\n  }\\n\\n  /**\\n  * @notice Used to set tokenURI to specific item \\n  * @dev - Only Owner or Admins can call this function\\n  * - Need to specify:\\n  *  - tokenId: specific item you want to set its uri\\n  *  - uri: uri wanted to be set\\n  */\\n  function setTokenUri(uint256 tokenId, string memory _uri) public onlyOwnerOrAdmin {\\n      require(bytes(s_uris[tokenId]).length == 0, \\\"Can not set uri twice\\\"); \\n      s_uris[tokenId] = _uri; \\n  }\\n\\n  \\n  // FUNCTIONS RELATED TO FUNDS\\n  \\n  /**\\n  * @notice Used to withdraw specific amount of funds\\n  * @dev \\n  * - Only owner is able to call this function\\n  * - Should check that there are avaliable funds to withdraw\\n  * - Should specify the wallet address you want to transfer the funds to\\n  * - Should specify the amount of funds you want to transfer\\n  */\\n  function withdrawFunds(address wallet, uint256 amount) public onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, amount);\\n  }\\n\\n  /**\\n  * @notice Used to withdraw ALL funds\\n  * @dev \\n  * - Only owner is able to call this function\\n  * - Should check that there are avaliable funds to withdraw\\n  * - Should specify the wallet address you want to transfer the funds to\\n  */\\n  function withdrawAllFunds(address wallet) public onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, racksToken.balanceOf(address(this)));\\n  }\\n\\n  /// @notice Receive function\\n  receive() external payable {\\n  }\\n}\",\"keccak256\":\"0xc170342060190c36a5cef6c38e0e1f3b4d0a5d181ef97a0d9f3142383a9bf5ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052600c805460ff191660011790553480156200001f57600080fd5b5060405162005a4e38038062005a4e8339810160408190526200004291620001de565b60408051602081019091526000815286906200005e8162000102565b506001600160601b0319606091821b811660805296901b90951660a05260c09384526001600160c01b03199290931b9190911660e09081526001600160e01b031991901b1661010052600480546001600160a01b039384166001600160a01b0319918216179091556005805493909216928116929092179055600680549091163317905560006008819055600a556001600b55600c805461ff0019169055620002ac565b8051620001179060029060208401906200011b565b5050565b82805462000129906200026f565b90600052602060002090601f0160209004810192826200014d576000855562000198565b82601f106200016857805160ff191683800117855562000198565b8280016001018555821562000198579182015b82811115620001985782518255916020019190600101906200017b565b50620001a6929150620001aa565b5090565b5b80821115620001a65760008155600101620001ab565b80516001600160a01b0381168114620001d957600080fd5b919050565b60008060008060008060c08789031215620001f857600080fd5b6200020387620001c1565b6020880151604089015191975095506001600160401b03811681146200022857600080fd5b606088015190945063ffffffff811681146200024357600080fd5b92506200025360808801620001c1565b91506200026360a08801620001c1565b90509295509295509295565b600181811c908216806200028457607f821691505b60208210811415620002a657634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c61572e6200032060003960008181610a5e0152611bdd0152600081816105720152611baa0152600081816107dc0152611b7c0152600081816108a50152611c1801526000818161126d01526112af015261572e6000f3fe6080604052600436106103255760003560e01c806389165aa9116101a7578063bc197c81116100ed578063de08f65311610090578063de08f65314610aad578063e289fcb614610ac2578063e7fb74c714610adc578063e985e9c514610afc578063f23a6e6114610b45578063f242432a14610b71578063f48c9d3414610b91578063fd210fd914610bb157600080fd5b8063bc197c8114610964578063c1075329146109a9578063c7be7a49146109c9578063c7e05f8d146109f6578063ca90958f14610a16578063d547741f14610a2c578063d757d02714610a4c578063dd006d3114610a8057600080fd5b8063a22cb46511610155578063a22cb46514610833578063a7b1942414610853578063a7bc77c614610873578063aebc455014610893578063b2ead3c7146108d4578063b63b8612146108f6578063b85e67af14610922578063bbcbc2e71461094257600080fd5b806389165aa91461076a5780638ba8b15a1461078a5780638dc5f45b146107aa5780638e879c8a146107ca57806391d14854146107fe578063976298f31461081e578063a217fddf1461071557600080fd5b8063470cdf971161026c57806361c073d61161021a57806361c073d61461066357806367dd74ca1461068357806367f082b0146106a3578063704b6c02146106cb57806372cf6e34146106eb57806375b238fc146107155780637e420db51461072a57806384203f4b1461074a57600080fd5b8063470cdf97146105605780634a226657146105ac5780634e1273f4146105c15780635408c319146105ee57806354e889f61461060e57806357f7789e1461062e578063616524501461064e57600080fd5b80631fe543e3116102d45780631fe543e31461044357806320ba081414610463578063248a9ca3146104905780632ce38190146104c05780632eb2c2d6146104e05780632f2ff15d1461050057806332dee40b1461052057806336568abe1461054057600080fd5b8062fdd58e1461033157806301ffc9a714610364578063020f1980146103945780630e89341c146103b657806319c08575146103e35780631c7cbe4f146104035780631cb0b2731461042357600080fd5b3661032c57005b600080fd5b34801561033d57600080fd5b5061035161034c366004614b7a565b610bc7565b6040519081526020015b60405180910390f35b34801561037057600080fd5b5061038461037f366004614c9c565b610c61565b604051901515815260200161035b565b3480156103a057600080fd5b506103b46103af366004614d7b565b610c6c565b005b3480156103c257600080fd5b506103d66103d1366004614c60565b610e11565b60405161035b9190615189565b3480156103ef57600080fd5b506103516103fe366004614c60565b610eb3565b34801561040f57600080fd5b506103b461041e366004614dc9565b61105c565b34801561042f57600080fd5b506103b461043e366004614c60565b6111c5565b34801561044f57600080fd5b506103b461045e366004614cef565b611262565b34801561046f57600080fd5b5061035161047e366004614c60565b60009081526011602052604090205490565b34801561049c57600080fd5b506103516104ab366004614c60565b60009081526003602052604090206001015490565b3480156104cc57600080fd5b506103b46104db366004614c60565b6112ea565b3480156104ec57600080fd5b506103b46104fb366004614a36565b61131c565b34801561050c57600080fd5b506103b461051b366004614c79565b6113b3565b34801561052c57600080fd5b506103b461053b3660046149e8565b6113dd565b34801561054c57600080fd5b506103b461055b366004614c79565b61159e565b34801561056c57600080fd5b506105947f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b03909116815260200161035b565b3480156105b857600080fd5b506103b4611618565b3480156105cd57600080fd5b506105e16105dc366004614be0565b6118ca565b60405161035b9190615120565b3480156105fa57600080fd5b506103b4610609366004614ba4565b6119f3565b34801561061a57600080fd5b506103b46106293660046149e8565b611a80565b34801561063a57600080fd5b506103b4610649366004614d2b565b611ac9565b34801561065a57600080fd5b50610351611b6d565b34801561066f57600080fd5b506103b461067e366004614c60565b611c94565b34801561068f57600080fd5b506103b461069e366004614c60565b611fe2565b3480156106af57600080fd5b506106b8600381565b60405161ffff909116815260200161035b565b3480156106d757600080fd5b506103b46106e63660046149e8565b6124ab565b3480156106f757600080fd5b50610700600281565b60405163ffffffff909116815260200161035b565b34801561072157600080fd5b50610351600081565b34801561073657600080fd5b506103b4610745366004614c60565b6124e0565b34801561075657600080fd5b506103846107653660046149e8565b612618565b34801561077657600080fd5b506103b4610785366004614ba4565b6126d9565b34801561079657600080fd5b506103b46107a53660046149e8565b612766565b3480156107b657600080fd5b506103b46107c5366004614c60565b6127ac565b3480156107d657600080fd5b506103517f000000000000000000000000000000000000000000000000000000000000000081565b34801561080a57600080fd5b50610384610819366004614c79565b612806565b34801561082a57600080fd5b50600b54610351565b34801561083f57600080fd5b506103b461084e366004614b43565b612831565b34801561085f57600080fd5b506103b461086e366004614d7b565b61283c565b34801561087f57600080fd5b506103b461088e366004614c60565b61291a565b34801561089f57600080fd5b506108c77f000000000000000000000000000000000000000000000000000000000000000081565b60405161035b9190614f55565b3480156108e057600080fd5b506108e96129fc565b60405161035b9190615090565b34801561090257600080fd5b50600c5461091590610100900460ff1681565b60405161035b9190615161565b34801561092e57600080fd5b506103b461093d366004614d9d565b612bf9565b34801561094e57600080fd5b50610957612f12565b60405161035b91906150de565b34801561097057600080fd5b5061099061097f366004614a36565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161035b565b3480156109b557600080fd5b506103b46109c4366004614b7a565b6130e6565b3480156109d557600080fd5b506109e96109e4366004614c60565b613232565b60405161035b9190615431565b348015610a0257600080fd5b50610351610a11366004614c60565b6132b0565b348015610a2257600080fd5b50610351600b5481565b348015610a3857600080fd5b506103b4610a47366004614c79565b6132e0565b348015610a5857600080fd5b506107007f000000000000000000000000000000000000000000000000000000000000000081565b348015610a8c57600080fd5b50610aa0610a9b366004614c60565b613305565b60405161035b9190615423565b348015610ab957600080fd5b506103b4613393565b348015610ace57600080fd5b50600c546103849060ff1681565b348015610ae857600080fd5b506103b4610af7366004614c60565b6133fa565b348015610b0857600080fd5b50610384610b17366004614a03565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610b5157600080fd5b50610990610b60366004614adf565b63f23a6e6160e01b95945050505050565b348015610b7d57600080fd5b506103b4610b8c366004614adf565b6137ad565b348015610b9d57600080fd5b506105e1610bac3660046149e8565b613834565b348015610bbd57600080fd5b50610351600f5481565b60006001600160a01b038316610c385760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6000610c5b826138ca565b6000610c783384610bc7565b11610cb75760405162461bcd60e51b815260206004820152600f60248201526e24ba32b6903737ba103337bab7321760891b6044820152606401610c2f565b6040805160a08101825283815260098054602083019081529282018481523360608401908152600160808501818152600d80549283018155600090815295517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb560049093029283015595517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb682015591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb7830155517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb8909101805494516001600160a01b039092166001600160a81b031990951694909417600160a01b911515919091021790925581549190610dcd83615572565b91905055507f23cba88d6c6f26b62b2cfc32a2cc04fbbde8590188b97cd3590e45af9ac6dd6d338383604051610e0593929190615049565b60405180910390a15050565b6000818152601260205260409020805460609190610e2e9061550b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e5a9061550b565b8015610ea75780601f10610e7c57610100808354040283529160200191610ea7565b820191906000526020600020905b815481529060010190602001808311610e8a57829003601f168201915b50505050509050919050565b600080600e8381548110610ec957610ec96155e3565b90600052602060002090600702016005015411610f225760405162461bcd60e51b81526020600482015260176024820152762a34b1b5b2ba1034b9903737ba1039b7b632103cb2ba1760491b6044820152606401610c2f565b610e10600e8381548110610f3857610f386155e3565b906000526020600020906007020160020154610f54919061547a565b600e8381548110610f6757610f676155e3565b90600052602060002090600702016005015442610f8491906154ad565b11610fdd5760405162461bcd60e51b8152602060048201526024808201527f5469636b657420686173206e6f2074696d65206c65667420666f72206c656e6460448201526334b7339760e11b6064820152608401610c2f565b6000603c600e8481548110610ff457610ff46155e3565b906000526020600020906007020160020154611010919061547a565b600e8481548110611023576110236155e3565b9060005260206000209060070201600501544261104091906154ad565b61104b90603c61548e565b61105591906154ad565b9392505050565b61106533612618565b6110815760405162461bcd60e51b8152600401610c2f906153cf565b3360009081526013602052604090205460ff166110b05760405162461bcd60e51b8152600401610c2f90615219565b336001600160a01b0316600e85815481106110cd576110cd6155e3565b60009182526020909120600460079092020101546001600160a01b0316146111075760405162461bcd60e51b8152600401610c2f906151e4565b80600e858154811061111b5761111b6155e3565b90600052602060002090600702016003018190555081600e8581548110611144576111446155e3565b90600052602060002090600702016002018190555082600e858154811061116d5761116d6155e3565b9060005260206000209060070201600101819055507f0fcd915268f7fe921a6c99bd903199d2f30c7f65a422416bfd1de6a264b8264d338484846040516111b7949392919061506a565b60405180910390a150505050565b60006111d13383610bc7565b116111db57600080fd5b6111e7338260016138ef565b60008181526011602052604081208054600192906112069084906154ad565b9250508190555060016007600082825461122091906154ad565b90915550506040517f9e90d55d2f1f115ffe1b87372c45f27f6b3a2b5ba392942167be784561890094906112579033908490615030565b60405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146112dc5760405163073e64fd60e21b81523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610c2f565b6112e68282613a5e565b5050565b6112f333613a83565b61130f5760405162461bcd60e51b8152600401610c2f9061535f565b6113193082613ab9565b50565b6001600160a01b03851633148061133857506113388533610b17565b61139f5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610c2f565b6113ac8585858585613b24565b5050505050565b6000828152600360205260409020600101546113ce81613d01565b6113d88383613d0b565b505050565b6006546001600160a01b031633146114075760405162461bcd60e51b8152600401610c2f906153a0565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611438903090600401614f55565b60206040518083038186803b15801561145057600080fd5b505afa158015611464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114889190614cd6565b116114a55760405162461bcd60e51b8152600401610c2f9061525f565b6005546040516370a0823160e01b81526001600160a01b039091169063a9059cbb90839083906370a08231906114df903090600401614f55565b60206040518083038186803b1580156114f757600080fd5b505afa15801561150b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152f9190614cd6565b6040518363ffffffff1660e01b815260040161154c929190615030565b602060405180830381600087803b15801561156657600080fd5b505af115801561157a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e69190614c43565b6001600160a01b038116331461160e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c2f565b6112e68282613d91565b6000600c54610100900460ff166001811115611636576116366155cd565b146116915760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f74206163746976652061742074686973206d6044820152641bdb595b9d60da1b6064820152608401610c2f565b61169a33612618565b611711573360009081526014602052604090205460ff166117115760405162461bcd60e51b815260206004820152602b60248201527f55736572206973204e4f542056495020616e6420646f6573206e6f74206f776e60448201526a399030902a34b1b5b2ba1760a91b6064820152608401610c2f565b600554600b546040516323b872dd60e01b81526001600160a01b03909216916323b872dd916117469133913091600401614fc7565b602060405180830381600087803b15801561176057600080fd5b505af1158015611774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117989190614c43565b5060006007546117a6611b6d565b6117b0919061558d565b9050600080805b600854811015611871576000818152601160205260408120546117da9085615462565b9050808511156117ec5780935061185e565b8192506117f93084610bc7565b61183b57600061180a6001856154ad565b90505b60006118193083610bc7565b111561182757809350611839565b80611831816154f4565b91505061180d565b505b611858303385600160405180602001604052806000815250613df8565b50611871565b508061186981615572565b9150506117b7565b5061187b33612618565b6118885761188833613f10565b7fea32e37a2618dbb680c93d891742e9e13b30d184822562a0ee3c09290fd42b4333600b54836040516118bd93929190615049565b60405180910390a1505050565b6060815183511461192f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610c2f565b600083516001600160401b0381111561194a5761194a6155f9565b604051908082528060200260200182016040528015611973578160200160208202803683370190505b50905060005b84518110156119eb576119be858281518110611997576119976155e3565b60200260200101518583815181106119b1576119b16155e3565b6020026020010151610bc7565b8282815181106119d0576119d06155e3565b60209081029190910101526119e481615572565b9050611979565b509392505050565b6119fc33613a83565b611a185760405162461bcd60e51b8152600401610c2f9061535f565b60005b81518110156112e657600060106000848481518110611a3c57611a3c6155e3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611a7881615572565b915050611a1b565b611a8933613a83565b611aa55760405162461bcd60e51b8152600401610c2f9061535f565b6001600160a01b03166000908152601060205260409020805460ff19166001179055565b611ad233613a83565b611aee5760405162461bcd60e51b8152600401610c2f9061535f565b60008281526012602052604090208054611b079061550b565b159050611b4e5760405162461bcd60e51b815260206004820152601560248201527443616e206e6f74207365742075726920747769636560581b6044820152606401610c2f565b600082815260126020908152604090912082516113d892840190614751565b6040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160401b037f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648201526002608482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b158015611c5c57600080fd5b505af1158015611c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5b9190614cd6565b611c9d33612618565b611cb95760405162461bcd60e51b8152600401610c2f906153cf565b3360009081526016602052604090205460ff16611d185760405162461bcd60e51b815260206004820152601c60248201527f5573657220646964206e6f742073656c6c20616e79205469636b6574000000006044820152606401610c2f565b610e10600e8281548110611d2e57611d2e6155e3565b906000526020600020906007020160020154611d4a919061547a565b600e8281548110611d5d57611d5d6155e3565b90600052602060002090600702016005015442611d7a91906154ad565b1180611daa5750600e8181548110611d9457611d946155e3565b9060005260206000209060070201600101546000145b611e145760405162461bcd60e51b815260206004820152603560248201527f4475726174696f6e206f6620746865205469636b6574206f72206e756d5472696044820152746573206973207374696c6c206176616c6961626c6560581b6064820152608401610c2f565b6000600e8281548110611e2957611e296155e3565b906000526020600020906007020160040160009054906101000a90046001600160a01b03169050600060146000600e8581548110611e6957611e696155e3565b60009182526020808320600460079093020191909101546001600160a01b031683528281019390935260409182018120805494151560ff1995861617905533808252601484528282208054861660011790556016909352208054909216909155600e805484908110611edd57611edd6155e3565b906000526020600020906007020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600e8381548110611f2757611f276155e3565b906000526020600020906007020160060160006101000a81548160ff021916908315150217905550600160146000600e8581548110611f6857611f686155e3565b60009182526020808320600792909202909101600401546001600160a01b039081168452838201949094526040928301909120805460ff1916941515949094179093558051918416825233928201929092527f5093646a80c0a81f51115fbf5ec8379ecf902ae2ba552c74599cbe844dcb53e39101610e05565b611feb33612618565b156120385760405162461bcd60e51b815260206004820152601f60248201527f412056495020757365722063616e206e6f74206275792061207469636b6574006044820152606401610c2f565b336001600160a01b0316600e8281548110612055576120556155e3565b60009182526020909120600460079092020101546001600160a01b031614156120ce5760405162461bcd60e51b815260206004820152602560248201527f596f752063616e206e6f74206275792061207469636b657420746f20796f75726044820152641039b2b63360d91b6064820152608401610c2f565b600e81815481106120e1576120e16155e3565b600091825260209091206006600790920201015460ff1615156001146121535760405162461bcd60e51b815260206004820152602160248201527f5469636b6574206973206e6f742063757272656e746c79206176616c6961626c6044820152606560f81b6064820152608401610c2f565b6000600e8281548110612168576121686155e3565b6000918252602090912060079091020160040154600554600e80546001600160a01b03938416945092909116916323b872dd913391869081106121ad576121ad6155e3565b906000526020600020906007020160040160009054906101000a90046001600160a01b0316600e86815481106121e5576121e56155e3565b9060005260206000209060070201600301546040518463ffffffff1660e01b815260040161221593929190614fc7565b602060405180830381600087803b15801561222f57600080fd5b505af1158015612243573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122679190614c43565b5042600e838154811061227c5761227c6155e3565b906000526020600020906007020160050181905550600060146000600e85815481106122aa576122aa6155e3565b60009182526020808320600792909202909101600401546001600160a01b031683528201929092526040018120805460ff191692151592909217909155600e8054601391839186908110612300576123006155e3565b60009182526020808320600792909202909101600401546001600160a01b031683528201929092526040018120805460ff191692151592909217909155600e8054600192601692909186908110612359576123596155e3565b60009182526020808320600460079093020191909101546001600160a01b031683528281019390935260409182018120805494151560ff19958616179055338082526014909352208054909216600117909155600e8054849081106123c0576123c06155e3565b906000526020600020906007020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000600e838154811061240a5761240a6155e3565b906000526020600020906007020160060160006101000a81548160ff0219169083151502179055507f060f7dd92424d6f1af65d2fe9acba5b63d299cc26cd8eb26403ca371bc9fbfbb828233600e8681548110612469576124696155e3565b906000526020600020906007020160030154604051610e0594939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b6006546001600160a01b031633146124d55760405162461bcd60e51b8152600401610c2f906153a0565b611319600082614061565b6124e933612618565b6125055760405162461bcd60e51b8152600401610c2f906153cf565b3360009081526013602052604090205460ff166125345760405162461bcd60e51b8152600401610c2f90615219565b336001600160a01b0316600e8281548110612551576125516155e3565b60009182526020909120600460079092020101546001600160a01b03161461258b5760405162461bcd60e51b8152600401610c2f906151e4565b6000600e82815481106125a0576125a06155e3565b60009182526020808320600660079093020191909101805493151560ff1994851617905533808352601382526040808420805486169055601490925291819020805490931660011790925590517f5dbab6b1e9ddd154d6eb51aa5622fb5278ea62a0b5f81d046a945d899490f6319161125791614f55565b600480546040516370a0823160e01b815260009283926001600160a01b0316916370a082319161264a91879101614f55565b60206040518083038186803b15801561266257600080fd5b505afa158015612676573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269a9190614cd6565b1180156126bf57506001600160a01b03821660009081526010602052604090205460ff165b156126cc57506001919050565b506000919050565b919050565b6126e233613a83565b6126fe5760405162461bcd60e51b8152600401610c2f9061535f565b60005b81518110156112e657600160106000848481518110612722576127226155e3565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061275e81615572565b915050612701565b61276f33613a83565b61278b5760405162461bcd60e51b8152600401610c2f9061535f565b6001600160a01b03166000908152601060205260409020805460ff19169055565b6127b533613a83565b6127d15760405162461bcd60e51b8152600401610c2f9061535f565b600b8190556040518181527f06cd74aabc11982a85b554df4d7833623303656fe69bed4db1b0cb3245feebe390602001611257565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6112e633838361406b565b336001600160a01b0316600d8381548110612859576128596155e3565b60009182526020909120600360049092020101546001600160a01b0316146128935760405162461bcd60e51b8152600401610c2f9061528d565b6000600d83815481106128a8576128a86155e3565b906000526020600020906004020160020154905081600d84815481106128d0576128d06155e3565b9060005260206000209060040201600201819055507fb141d00f22a670547caacc412e6489d8edaba6a840df558118363ce1a40d6ed2338483856040516118bd949392919061506a565b336001600160a01b0316600d8281548110612937576129376155e3565b60009182526020909120600360049092020101546001600160a01b0316146129715760405162461bcd60e51b8152600401610c2f9061528d565b61298e303383600160405180602001604052806000815250613df8565b6000600d82815481106129a3576129a36155e3565b906000526020600020906004020160030160146101000a81548160ff0219169083151502179055507fc9cedcca3d85d6009a562a9e70071f6288adabda9ba7f059589165e75c9cf4043382604051611257929190615030565b60606000805b600e54811015612abc576000600e8281548110612a2157612a216155e3565b60009182526020918290206040805160e081018252600790930290910180548352600180820154948401949094526002810154918301919091526003810154606083015260048101546001600160a01b03166080830152600581015460a08301526006015460ff16151560c082018190529092501415612aa957612aa6600184615462565b92505b5080612ab481615572565b915050612a02565b506000816001600160401b03811115612ad757612ad76155f9565b604051908082528060200260200182016040528015612b1057816020015b612afd6147d5565b815260200190600190039081612af55790505b5090506000805b600e54811015612bf0576000600e8281548110612b3657612b366155e3565b60009182526020918290206040805160e081018252600790930290910180548352600180820154948401949094526002810154918301919091526003810154606083015260048101546001600160a01b03166080830152600581015460a08301526006015460ff16151560c082018190529092501415612bdd5780848481518110612bc357612bc36155e3565b60200260200101819052508280612bd990615572565b9350505b5080612be881615572565b915050612b17565b50909392505050565b612c0233612618565b612c1e5760405162461bcd60e51b8152600401610c2f906153cf565b3360009081526013602052604090205460ff1615612c915760405162461bcd60e51b815260206004820152602a60248201527f5573657220697320616c72656164792063757272656e746c792073656c6c696e60448201526919c81848151a58dad95d60b21b6064820152608401610c2f565b3360009081526015602052604090205460ff1615612d08573360009081526014602052604090205460ff16612d085760405162461bcd60e51b815260206004820152601d60248201527f5573657220686173206e6f74207469636b6574206176616c6961626c650000006044820152606401610c2f565b6040805160e081018252600a8054825260208201868152928201858152606083018581523360808501908152600060a08601818152600160c08801818152600e80549283018155845297517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd60079092029182015597517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe89015593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff88015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c400870155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c401860180546001600160a01b0319166001600160a01b0390921691909117905590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40285015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c403909301805460ff19169315159390931790925581549190612e9983615572565b90915550503360008181526013602090815260408083208054600160ff199182168117909255601584528285208054821690921790915560149092529182902080549091169055517f07814713aba2e13eb5f2470225f7395d33fad1452b70f8427dae73e4d3a59344916118bd9186908690869061506a565b60606000805b600d54811015612fc2576000600d8281548110612f3757612f376155e3565b60009182526020918290206040805160a08101825260049093029091018054835260018082015494840194909452600281015491830191909152600301546001600160a01b038116606083015260ff600160a01b909104161515608082018190529092501415612faf57612fac600184615462565b92505b5080612fba81615572565b915050612f18565b506000816001600160401b03811115612fdd57612fdd6155f9565b60405190808252806020026020018201604052801561301657816020015b61300361481d565b815260200190600190039081612ffb5790505b5090506000805b600d54811015612bf0576000600d828154811061303c5761303c6155e3565b60009182526020918290206040805160a08101825260049093029091018054835260018082015494840194909452600281015491830191909152600301546001600160a01b038116606083015260ff600160a01b9091041615156080820181905290925014156130d357808484815181106130b9576130b96155e3565b602002602001018190525082806130cf90615572565b9350505b50806130de81615572565b91505061301d565b6006546001600160a01b031633146131105760405162461bcd60e51b8152600401610c2f906153a0565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613141903090600401614f55565b60206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131919190614cd6565b116131ae5760405162461bcd60e51b8152600401610c2f9061525f565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906131e09085908590600401615030565b602060405180830381600087803b1580156131fa57600080fd5b505af115801561320e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190614c43565b61323a61481d565b600d828154811061324d5761324d6155e3565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b909104161515608082015292915050565b60006132bb8261414c565b6132c457600080fd5b600082815260116020526040812054600754611055919061547a565b6000828152600360205260409020600101546132fb81613d01565b6113d88383613d91565b61330d6147d5565b600e8281548110613320576133206155e3565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546001600160a01b03166080820152600582015460a082015260069091015460ff16151560c082015292915050565b61339c33613a83565b6133b85760405162461bcd60e51b8152600401610c2f9061535f565b6000600c54610100900460ff1660018111156133d6576133d66155cd565b14156133ed57600c805461ff001916610100179055565b600c805461ff0019169055565b600d818154811061340d5761340d6155e3565b60009182526020909120600490910201600301546001600160a01b03163314156134855760405162461bcd60e51b815260206004820152602360248201527f596f752063616e206e6f742062757920616e206974656d20746f20796f75727360448201526232b63360e91b6064820152608401610c2f565b600d8181548110613498576134986155e3565b906000526020600020906004020160030160149054906101000a900460ff16151560011515146135145760405162461bcd60e51b815260206004820152602160248201527f54686973206974656d206973206e6f74206f6e2073616c6520616e796d6f72656044820152601760f91b6064820152608401610c2f565b600554600d80546001600160a01b03909216916323b872dd9133918590811061353f5761353f6155e3565b906000526020600020906004020160030160009054906101000a90046001600160a01b0316600d8581548110613577576135776155e3565b9060005260206000209060040201600201546040518463ffffffff1660e01b81526004016135a793929190614fc7565b602060405180830381600087803b1580156135c157600080fd5b505af11580156135d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135f99190614c43565b50613672600d8281548110613610576136106155e3565b906000526020600020906004020160030160009054906101000a90046001600160a01b031633600d8481548110613649576136496155e3565b906000526020600020906004020160000154600160405180602001604052806000815250613df8565b6000600d8281548110613687576136876155e3565b906000526020600020906004020160030160009054906101000a90046001600160a01b0316905033600d83815481106136c2576136c26155e3565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000600d838154811061370c5761370c6155e3565b906000526020600020906004020160030160146101000a81548160ff0219169083151502179055507f642067ff529c9b5b1162502fc8e8a3a91dda56e126a84f2fe38d341236231a82338284600d868154811061376b5761376b6155e3565b600091825260209182902060026004909202010154604080516001600160a01b0396871681529590941691850191909152918301526060820152608001610e05565b6001600160a01b0385163314806137c957506137c98533610b17565b6138275760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610c2f565b6113ac8585858585613df8565b606060006008546001600160401b03811115613852576138526155f9565b60405190808252806020026020018201604052801561387b578160200160208202803683370190505b50905060005b81518110156138c3576138948482610bc7565b8282815181106138a6576138a66155e3565b6020908102919091010152806138bb81615572565b915050613881565b5092915050565b60006001600160e01b03198216637965db0b60e01b1480610c5b5750610c5b82614164565b6001600160a01b0383166139515760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610c2f565b33600061395d84614189565b9050600061396a84614189565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156139f35760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610c2f565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816916000805160206156d9833981519152910160405180910390a46040805160208101909152600090525b50505050505050565b80600081518110613a7157613a716155e3565b6020026020010151600f819055505050565b6006546000906001600160a01b0383811691161480613aa85750613aa8600083612806565b613ab157600080fd5b506001919050565b613ad68260085483604051806020016040528060008152506141d4565b613aef6008548260009182526011602052604090912055565b8060076000828254613b019190615462565b92505081905550600160086000828254613b1b9190615462565b90915550505050565b8151835114613b865760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c2f565b6001600160a01b038416613bac5760405162461bcd60e51b8152600401610c2f906152d0565b3360005b8451811015613c93576000858281518110613bcd57613bcd6155e3565b602002602001015190506000858381518110613beb57613beb6155e3565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015613c3b5760405162461bcd60e51b8152600401610c2f90615315565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290613c78908490615462565b9250508190555050505080613c8c90615572565b9050613bb0565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051613ce3929190615133565b60405180910390a4613cf98187878787876142cd565b505050505050565b6113198133614438565b613d158282612806565b6112e65760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055613d4d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b613d9b8282612806565b156112e65760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b038416613e1e5760405162461bcd60e51b8152600401610c2f906152d0565b336000613e2a85614189565b90506000613e3785614189565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015613e7a5760405162461bcd60e51b8152600401610c2f90615315565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290613eb7908490615462565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816916000805160206156d9833981519152910160405180910390a4613f05848a8a8a8a8a61449c565b505050505050505050565b60005b600e548110156112e657816001600160a01b0316600e8281548110613f3a57613f3a6155e3565b60009182526020909120600460079092020101546001600160a01b0316141561404f57600e8181548110613f7057613f706155e3565b906000526020600020906007020160010154600114613fc457600e8181548110613f9c57613f9c6155e3565b600091825260208220600160079092020101805491613fba836154f4565b919050555061404f565b600e8181548110613fd757613fd76155e3565b600091825260208220600160079092020101805491613ff5836154f4565b91905055506000600e828154811061400f5761400f6155e3565b60009182526020808320600660079093020191909101805493151560ff199485161790556001600160a01b03851682526014905260409020805490911690555b8061405981615572565b915050613f13565b6112e68282613d0b565b816001600160a01b0316836001600160a01b031614156140df5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610c2f565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600081815260116020526040812054613ab157600080fd5b60006001600160e01b03198216630271189760e51b1480610c5b5750610c5b82614566565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106141c3576141c36155e3565b602090810291909101015292915050565b6001600160a01b0384166142345760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610c2f565b33600061424085614189565b9050600061424d85614189565b90506000868152602081815260408083206001600160a01b038b1684529091528120805487929061427f908490615462565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716916000805160206156d9833981519152910160405180910390a4613a558360008989898961449c565b6001600160a01b0384163b15613cf95760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906143119089908990889088908890600401614f69565b602060405180830381600087803b15801561432b57600080fd5b505af192505050801561435b575060408051601f3d908101601f1916820190925261435891810190614cb9565b60015b6144085761436761560f565b806308c379a014156143a1575061437c61562b565b8061438757506143a3565b8060405162461bcd60e51b8152600401610c2f9190615189565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610c2f565b6001600160e01b0319811663bc197c8160e01b14613a555760405162461bcd60e51b8152600401610c2f9061519c565b6144428282612806565b6112e65761445a816001600160a01b031660146145b6565b6144658360206145b6565b604051602001614476929190614ee6565b60408051601f198184030181529082905262461bcd60e51b8252610c2f91600401615189565b6001600160a01b0384163b15613cf95760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906144e09089908990889088908890600401614feb565b602060405180830381600087803b1580156144fa57600080fd5b505af192505050801561452a575060408051601f3d908101601f1916820190925261452791810190614cb9565b60015b6145365761436761560f565b6001600160e01b0319811663f23a6e6160e01b14613a555760405162461bcd60e51b8152600401610c2f9061519c565b60006001600160e01b03198216636cdb3d1360e11b148061459757506001600160e01b031982166303a24d0760e21b145b80610c5b57506301ffc9a760e01b6001600160e01b0319831614610c5b565b606060006145c583600261548e565b6145d0906002615462565b6001600160401b038111156145e7576145e76155f9565b6040519080825280601f01601f191660200182016040528015614611576020820181803683370190505b509050600360fc1b8160008151811061462c5761462c6155e3565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061465b5761465b6155e3565b60200101906001600160f81b031916908160001a905350600061467f84600261548e565b61468a906001615462565b90505b6001811115614702576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106146be576146be6155e3565b1a60f81b8282815181106146d4576146d46155e3565b60200101906001600160f81b031916908160001a90535060049490941c936146fb816154f4565b905061468d565b5083156110555760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c2f565b82805461475d9061550b565b90600052602060002090601f01602090048101928261477f57600085556147c5565b82601f1061479857805160ff19168380011785556147c5565b828001600101855582156147c5579182015b828111156147c55782518255916020019190600101906147aa565b506147d1929150614857565b5090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000151581525090565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b5b808211156147d15760008155600101614858565b60006001600160401b03831115614885576148856155f9565b60405161489c601f8501601f191660200182615546565b8091508381528484840111156148b157600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146126d457600080fd5b600082601f8301126148f157600080fd5b813560206148fe8261543f565b60405161490b8282615546565b8381528281019150858301600585901b8701840188101561492b57600080fd5b60005b858110156149515761493f826148c9565b8452928401929084019060010161492e565b5090979650505050505050565b600082601f83011261496f57600080fd5b8135602061497c8261543f565b6040516149898282615546565b8381528281019150858301600585901b870184018810156149a957600080fd5b60005b85811015614951578135845292840192908401906001016149ac565b600082601f8301126149d957600080fd5b6110558383356020850161486c565b6000602082840312156149fa57600080fd5b611055826148c9565b60008060408385031215614a1657600080fd5b614a1f836148c9565b9150614a2d602084016148c9565b90509250929050565b600080600080600060a08688031215614a4e57600080fd5b614a57866148c9565b9450614a65602087016148c9565b935060408601356001600160401b0380821115614a8157600080fd5b614a8d89838a0161495e565b94506060880135915080821115614aa357600080fd5b614aaf89838a0161495e565b93506080880135915080821115614ac557600080fd5b50614ad2888289016149c8565b9150509295509295909350565b600080600080600060a08688031215614af757600080fd5b614b00866148c9565b9450614b0e602087016148c9565b9350604086013592506060860135915060808601356001600160401b03811115614b3757600080fd5b614ad2888289016149c8565b60008060408385031215614b5657600080fd5b614b5f836148c9565b91506020830135614b6f816156b4565b809150509250929050565b60008060408385031215614b8d57600080fd5b614b96836148c9565b946020939093013593505050565b600060208284031215614bb657600080fd5b81356001600160401b03811115614bcc57600080fd5b614bd8848285016148e0565b949350505050565b60008060408385031215614bf357600080fd5b82356001600160401b0380821115614c0a57600080fd5b614c16868387016148e0565b93506020850135915080821115614c2c57600080fd5b50614c398582860161495e565b9150509250929050565b600060208284031215614c5557600080fd5b8151611055816156b4565b600060208284031215614c7257600080fd5b5035919050565b60008060408385031215614c8c57600080fd5b82359150614a2d602084016148c9565b600060208284031215614cae57600080fd5b8135611055816156c2565b600060208284031215614ccb57600080fd5b8151611055816156c2565b600060208284031215614ce857600080fd5b5051919050565b60008060408385031215614d0257600080fd5b8235915060208301356001600160401b03811115614d1f57600080fd5b614c398582860161495e565b60008060408385031215614d3e57600080fd5b8235915060208301356001600160401b03811115614d5b57600080fd5b8301601f81018513614d6c57600080fd5b614c398582356020840161486c565b60008060408385031215614d8e57600080fd5b50508035926020909101359150565b600080600060608486031215614db257600080fd5b505081359360208301359350604090920135919050565b60008060008060808587031215614ddf57600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501945080840160005b83811015614e2b57815187529582019590820190600101614e0f565b509495945050505050565b60008151808452614e4e8160208601602086016154c4565b601f01601f19169290920160200192915050565b805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0808201519083015260c0908101511515910152565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351614f188160178501602088016154c4565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614f498160288401602088016154c4565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0386811682528516602082015260a060408201819052600090614f9590830186614dfb565b8281036060840152614fa78186614dfb565b90508281036080840152614fbb8185614e36565b98975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a06080820181905260009061502590830184614e36565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6020808252825182820181905260009190848201906040850190845b818110156150d2576150bf838551614e62565b9284019260e092909201916001016150ac565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156150d25761510d838551614eae565b9284019260a092909201916001016150fa565b6020815260006110556020830184614dfb565b6040815260006151466040830185614dfb565b82810360208401526151588185614dfb565b95945050505050565b602081016002831061518357634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006110556020830184614e36565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252818101527f55736572206973206e6f74206f776e6572206f662074686973207469636b6574604082015260600190565b60208082526026908201527f55736572206973206e6f742063757272656e746c792073656c6c696e67206120604082015265151a58dad95d60d21b606082015260800190565b6020808252601490820152734e6f2066756e647320746f20776974686472617760601b604082015260600190565b60208082526023908201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320697460408201526232b69760e91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526021908201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696040820152603760f91b606082015260800190565b6020808252601590820152742ab9b2b91034b9903737ba103a34329037bbb732b960591b604082015260600190565b60208082526034908201527f55736572206973206e6f74205261636b734d656d62657273206f7220646f6573604082015273206e6f74206f776e732061204d7243727970746f60601b606082015260800190565b60e08101610c5b8284614e62565b60a08101610c5b8284614eae565b60006001600160401b03821115615458576154586155f9565b5060051b60200190565b60008219821115615475576154756155a1565b500190565b600082615489576154896155b7565b500490565b60008160001904831182151516156154a8576154a86155a1565b500290565b6000828210156154bf576154bf6155a1565b500390565b60005b838110156154df5781810151838201526020016154c7565b838111156154ee576000848401525b50505050565b600081615503576155036155a1565b506000190190565b600181811c9082168061551f57607f821691505b6020821081141561554057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b038111828210171561556b5761556b6155f9565b6040525050565b6000600019821415615586576155866155a1565b5060010190565b60008261559c5761559c6155b7565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156156285760046000803e5060005160e01c5b90565b600060443d10156156395790565b6040516003193d81016004833e81513d6001600160401b03816024840111818411171561566857505050505090565b82850191508151818111156156805750505050505090565b843d870101602082850101111561569a5750505050505090565b6156a960208286010187615546565b509095945050505050565b801515811461131957600080fd5b6001600160e01b03198116811461131957600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a26469706673582212202f8d6f7582c1520832790d8fc7ad728eedbef6f39b053e01803b2cc6b76d79e364736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_randomNumber()": {
        "details": "Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened"
      },
      "_rarityOfItem(uint256)": {
        "details": "- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buyItem(uint256)": {
        "details": "- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event "
      },
      "buyTicket(uint256)": {
        "details": "- Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket - Should check that user has a listed ticket - Transfer RacksToken from buyer to seller - Update mappings variables - Emit event"
      },
      "changeItemPrice(uint256,uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event"
      },
      "changeTicketConditions(uint256,uint256,uint256,uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event"
      },
      "claimTicketBack(uint256)": {
        "details": "- Check that claimer is lending a Ticket - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours  -> transform duration into seconds  - Update mappings - Emit event"
      },
      "flipContractState()": {
        "details": "Only callable by the Owner or an admin"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isVip(address)": {
        "details": "- Require users MrCrypro's balance is > ' - Require that RacksMembers user's attribute is true"
      },
      "listItem(uint256)": {
        "details": "Only callable by the Owner"
      },
      "listItemOnMarket(uint256,uint256)": {
        "details": "- Needs to check balanceOf item trying to be sold - Needs to transfer item  - Update marketItems array - Emit event "
      },
      "listTicket(uint256,uint256,uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Check is user has had a ticket before     - If so: check that is has ticket now     - if not: create ticket (first ticket in live for this user) - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time - Include ticket on array - Increase s_ticketCount - Set mapping to true - Emit event"
      },
      "openCase()": {
        "details": " - Should check that user owns a Ticket -> modifier - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item"
      },
      "removeListRacksMembers(address[])": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false"
      },
      "removeSingleRacksMember(address)": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setAdmin(address)": {
        "details": "Only callable by the Owner"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setCasePrice(uint256)": {
        "details": "Only callable by the Owner"
      },
      "setListRacksMembers(address[])": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true"
      },
      "setSingleRacksMember(address)": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true"
      },
      "setTokenUri(uint256,string)": {
        "details": "- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set"
      },
      "supplyOfItem(uint256)": {
        "details": "- Getter of s_maxSupply mapping"
      },
      "unListItem(uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Needs to transfer item from contract to user address - Update item's sold variable - Emit event"
      },
      "unListTicket(uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event"
      },
      "uri(uint256)": {
        "details": "- returns information stored in s_uris mapping - Any user can check this information"
      },
      "viewItems(address)": {
        "details": "Copy users inventory in an empty array and returns it"
      },
      "withdrawAllFunds(address)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to"
      },
      "withdrawFunds(address,uint256)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CaseOpened(address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Standard variables"
      },
      "_randomNumber()": {
        "notice": "Used to get an actually Random Number -> to pick an item when openning a case"
      },
      "_rarityOfItem(uint256)": {
        "notice": "Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item"
      },
      "buyItem(uint256)": {
        "notice": "Function used to buy an item on the marketplace"
      },
      "buyTicket(uint256)": {
        "notice": "This function is used to buy a caseTicket"
      },
      "changeItemPrice(uint256,uint256)": {
        "notice": "Function used to change price from item listed "
      },
      "changeTicketConditions(uint256,uint256,uint256,uint256)": {
        "notice": "This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace"
      },
      "claimTicketBack(uint256)": {
        "notice": "Function used to claim Ticket back when duration is over"
      },
      "exchangeItem(uint256)": {
        "notice": "Function used to exchange a token item for a real physical clothe."
      },
      "flipContractState()": {
        "notice": "Change contract state from Active to Inactive and viceversa"
      },
      "getCasePrice()": {
        "notice": "View case price"
      },
      "getITicketsOnSale()": {
        "notice": "Function used to return every ticket that are currently on sale"
      },
      "getItemsOnSale()": {
        "notice": "function used to return every item that is on sale on the MarketPlace"
      },
      "getMarketItem(uint256)": {
        "notice": "Function used to return items that are currently on sale"
      },
      "getMarketTicket(uint256)": {
        "notice": "Function used to return ticket that are currently on sale"
      },
      "getTicketDurationLeft(uint256)": {
        "notice": "Function used to view how much time is left for lended Ticket"
      },
      "i_vrfCoordinator()": {
        "notice": "VRF Variables"
      },
      "isVip(address)": {
        "notice": "Check if user is RacksMembers and owns at least 1 MrCrypto"
      },
      "listItem(uint256)": {
        "notice": "List a new item to the avaliable collection"
      },
      "listItemOnMarket(uint256,uint256)": {
        "notice": "Function used to sell an item on the marketplace"
      },
      "listTicket(uint256,uint256,uint256)": {
        "notice": "This function is used for a VIP user to list 'Case Tickets' on the MarketPlace"
      },
      "openCase()": {
        "notice": "Function used to 'open a case' and get an item"
      },
      "removeListRacksMembers(address[])": {
        "notice": "Set RacksMember attribute as false for a list of users that are Members (array)"
      },
      "removeSingleRacksMember(address)": {
        "notice": "Set RacksMember attribute as false for a user that was Racks Member before but it is not now"
      },
      "setAdmin(address)": {
        "notice": "Set new Admin"
      },
      "setCasePrice(uint256)": {
        "notice": "Change price of the box"
      },
      "setListRacksMembers(address[])": {
        "notice": "Set RacksMember attribute as true for a list of users that are Members (array)"
      },
      "setSingleRacksMember(address)": {
        "notice": "Set RacksMember attribute as true for a user that is Member"
      },
      "setTokenUri(uint256,string)": {
        "notice": "Used to set tokenURI to specific item "
      },
      "supplyOfItem(uint256)": {
        "notice": "Returns maxSupply of specific item (by tokenId)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Need to override supportsInterface function because Contract is ERC1155 and AccessControl"
      },
      "unListItem(uint256)": {
        "notice": "Function used to unlist an item from marketplace"
      },
      "unListTicket(uint256)": {
        "notice": "This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace"
      },
      "uri(uint256)": {
        "notice": "Used to return token URI by inserting tokenID"
      },
      "viewItems(address)": {
        "notice": "Returns all the items inside the user's inventory (Could be used by the user to check his inventory or to check someone else inventory by address)"
      },
      "withdrawAllFunds(address)": {
        "notice": "Used to withdraw ALL funds"
      },
      "withdrawFunds(address,uint256)": {
        "notice": "Used to withdraw specific amount of funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 670,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 676,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 678,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)166_storage)"
      },
      {
        "astId": 7675,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "MR_CRYPTO",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC721)3801"
      },
      {
        "astId": 7678,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "racksToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2794"
      },
      {
        "astId": 7684,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7686,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_maxTotalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7688,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_tokenCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7690,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_marketCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7692,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_ticketCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 7694,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "casePrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 7697,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "contractActive",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 7700,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_contractState",
        "offset": 1,
        "slot": "12",
        "type": "t_enum(ContractState)7645"
      },
      {
        "astId": 7704,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_marketItems",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(itemOnSale)7656_storage)dyn_storage"
      },
      {
        "astId": 7708,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "_tickets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(caseTicket)7671_storage)dyn_storage"
      },
      {
        "astId": 7726,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_randomWord",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7731,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_gotRacksMembers",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7735,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_maxSupply",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7739,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_uris",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 7743,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_isSellingTicket",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7747,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_hasTicket",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7751,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_hadTicket",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7755,
        "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
        "label": "s_ticketIsLended",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(caseTicket)7671_storage)dyn_storage": {
        "base": "t_struct(caseTicket)7671_storage",
        "encoding": "dynamic_array",
        "label": "struct RacksItemsv3.caseTicket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(itemOnSale)7656_storage)dyn_storage": {
        "base": "t_struct(itemOnSale)7656_storage",
        "encoding": "dynamic_array",
        "label": "struct RacksItemsv3.itemOnSale[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2794": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)3801": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)7645": {
        "encoding": "inplace",
        "label": "enum RacksItemsv3.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)166_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)166_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)166_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 163,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 165,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(caseTicket)7671_storage": {
        "encoding": "inplace",
        "label": "struct RacksItemsv3.caseTicket",
        "members": [
          {
            "astId": 7658,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "ticketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7660,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "numTries",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7662,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7664,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7666,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 7668,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "timeWhenSold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7670,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "isAvaliable",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(itemOnSale)7656_storage": {
        "encoding": "inplace",
        "label": "struct RacksItemsv3.itemOnSale",
        "members": [
          {
            "astId": 7647,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7649,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "marketItemId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7651,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7653,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "itemOwner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 7655,
            "contract": "contracts/RacksItemsv3.sol:RacksItemsv3",
            "label": "isOnSale",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}