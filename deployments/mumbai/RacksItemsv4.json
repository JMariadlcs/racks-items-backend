{
  "address": "0x67c8c575DA7C0D3641Be3e460d54471756ed62A2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_racksTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_MockMrCryptoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "casePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "item",
          "type": "uint256"
        }
      ],
      "name": "CaseOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "casePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "itemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemExchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "itemPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTries",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "newTicketOnSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "sellingItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ticketBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "realOwner",
          "type": "address"
        }
      ],
      "name": "ticketClaimedBack",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTries",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newHours",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "ticketConditionsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "unListTicketOnSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListedItem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "_rarityOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "caseLiquidity",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeItemPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTries",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newHours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeTicketConditions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimTicketBack",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exchangeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractState",
      "outputs": [
        {
          "internalType": "enum RacksItemsv4.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getITicketsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTries",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeWhenSold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAvaliable",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.caseTicket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemId",
          "type": "uint256"
        }
      ],
      "name": "getItemsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "itemOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isOnSale",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.itemOnSale",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItemsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "itemOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isOnSale",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.itemOnSale[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "getMarketItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "itemOwner",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isOnSale",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.itemOnSale",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "getMarketTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTries",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeWhenSold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAvaliable",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.caseTicket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketcount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTotalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceCase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "getTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numTries",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeWhenSold",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isAvaliable",
              "type": "bool"
            }
          ],
          "internalType": "struct IRacksItems.caseTicket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTicketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "getTicketDurationLeft",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isVip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemSupply",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItemOnMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numTries",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_hours",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openCase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_randomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setCasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "supplyOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "unListTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "viewItems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "withdrawAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa5223c556298d9afb4d7e9837685a212b7de8d3423c99896dbdc1ba27aef6568",
  "receipt": {
    "to": null,
    "from": "0xA8be82C6091aFb27c5597aFE5a2bab7f91Bb0277",
    "contractAddress": "0x67c8c575DA7C0D3641Be3e460d54471756ed62A2",
    "transactionIndex": 9,
    "gasUsed": "5240070",
    "logsBloom": "0x
    "blockHash": "0x5161778c140b0f01de461446f8984b7aaed1faad2762324342f191b8f53bbaf5",
    "transactionHash": "0xa5223c556298d9afb4d7e9837685a212b7de8d3423c99896dbdc1ba27aef6568",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 26949349,
        "transactionHash": "0xa5223c556298d9afb4d7e9837685a212b7de8d3423c99896dbdc1ba27aef6568",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a8be82c6091afb27c5597afe5a2bab7f91bb0277",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000028b938e78b00bd000000000000000000000000000000000000000000000000088bc6011dafdd8c40000000000000000000000000000000000000000000003eb94274b3104ee89ae0000000000000000000000000000000000000000000000008630cc83624dccf40000000000000000000000000000000000000000000003eb96b2debf7d9e957e",
        "logIndex": 23,
        "blockHash": "0x5161778c140b0f01de461446f8984b7aaed1faad2762324342f191b8f53bbaf5"
      }
    ],
    "blockNumber": 26949349,
    "cumulativeGasUsed": "7088299",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "286",
    "100000",
    "0x3855c456ca83b63377dC5b78726b4363684Bb538",
    "0x5CE7935AAc560c80a73F0DEfF7fC649A5539aF9e"
  ],
  "numDeployments": 1,
  "solcInputHash": "275528d18e9a597ef7e8fc74b476902b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_racksTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_MockMrCryptoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"casePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"CaseOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"casePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"itemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"itemPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"newTicketOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellingItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ticketBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"realOwner\",\"type\":\"address\"}],\"name\":\"ticketClaimedBack\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTries\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newHours\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"ticketConditionsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"unListTicketOnSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListedItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_rarityOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"caseLiquidity\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeItemPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeTicketConditions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimTicketBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exchangeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractState\",\"outputs\":[{\"internalType\":\"enum RacksItemsv4.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getITicketsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeWhenSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvaliable\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.caseTicket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemId\",\"type\":\"uint256\"}],\"name\":\"getItemsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.itemOnSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.itemOnSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"getMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"itemOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isOnSale\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.itemOnSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getMarketTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeWhenSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvaliable\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.caseTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketcount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceCase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeWhenSold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isAvaliable\",\"type\":\"bool\"}],\"internalType\":\"struct IRacksItems.caseTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"getTicketDurationLeft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItemOnMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numTries\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_hours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"supplyOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"unListTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_randomNumber()\":{\"details\":\"Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened\"},\"_rarityOfItem(uint256)\":{\"details\":\"- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buyItem(uint256)\":{\"details\":\"- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event \"},\"buyTicket(uint256)\":{\"details\":\"- Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket - Should check that user has a listed ticket - Transfer RacksToken from buyer to seller - Update mappings variables - Emit event\"},\"changeItemPrice(uint256,uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event\"},\"changeTicketConditions(uint256,uint256,uint256,uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event\"},\"claimTicketBack(uint256)\":{\"details\":\"- Check that claimer is lending a Ticket - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours  -> transform duration into seconds  - Update mappings - Emit event\"},\"flipContractState()\":{\"details\":\"Only callable by the Owner or an admin\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTicketDurationLeft(uint256)\":{\"details\":\"This function returns 2 parameters - uint256: timeLeft  - bool: false if numTries == 0         true if numTries > 0\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isVip(address)\":{\"details\":\"- Require users MrCrypro's balance is > 0\"},\"listItem(uint256)\":{\"details\":\"Only callable by the Owner\"},\"listItemOnMarket(uint256,uint256)\":{\"details\":\"- Needs to check balanceOf item trying to be sold - Needs to check if user has correctly done an Approve for the item transfer in case it is sold - Needs to transfer item  - Update s_marketInventory - Update marketItems array - Emit event \"},\"listTicket(uint256,uint256,uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Check is user has had a ticket before     - If so: check that is has ticket now     - if not: create ticket (first ticket in live for this user) - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time - Include ticket on array - Increase s_ticketCount - Set mapping to true - Emit event\"},\"openCase()\":{\"details\":\" - Should check that user owns a Ticket -> modifier - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setAdmin(address)\":{\"details\":\"Only callable by the Owner\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setCasePrice(uint256)\":{\"details\":\"Only callable by the Owner\"},\"setTokenUri(uint256,string)\":{\"details\":\"- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set\"},\"supplyOfItem(uint256)\":{\"details\":\"- Getter of s_maxSupply mapping\"},\"unListItem(uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Update marketInventory - Update item's sold variable - Emit event\"},\"unListTicket(uint256)\":{\"details\":\"- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event\"},\"uri(uint256)\":{\"details\":\"- returns information stored in s_uris mapping - Any user can check this information\"},\"viewItems(address)\":{\"details\":\"Copy users inventory in an empty array and returns it\"},\"withdrawAllFunds(address)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to\"},\"withdrawFunds(address,uint256)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer\"}},\"version\":1},\"userdoc\":{\"events\":{\"CaseOpened(address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Standard variables\"},\"_randomNumber()\":{\"notice\":\"Used to get an actually Random Number -> to pick an item when openning a case\"},\"_rarityOfItem(uint256)\":{\"notice\":\"Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item\"},\"buyItem(uint256)\":{\"notice\":\"Function used to buy an item on the marketplace\"},\"buyTicket(uint256)\":{\"notice\":\"This function is used to buy a caseTicket\"},\"caseLiquidity()\":{\"notice\":\"Returns all the items the case can drop\"},\"changeItemPrice(uint256,uint256)\":{\"notice\":\"Function used to change price from item listed \"},\"changeTicketConditions(uint256,uint256,uint256,uint256)\":{\"notice\":\"This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace\"},\"claimTicketBack(uint256)\":{\"notice\":\"Function used to claim Ticket back when duration is over\"},\"exchangeItem(uint256)\":{\"notice\":\"Function used to exchange a token item for a real physical clothe.\"},\"flipContractState()\":{\"notice\":\"Change contract state from Active to Inactive and viceversa\"},\"getITicketsOnSale()\":{\"notice\":\"Function used to return every ticket that are currently on sale\"},\"getItemsOnSale()\":{\"notice\":\"function used to return every item that is on sale on the MarketPlace\"},\"getMarketItem(uint256)\":{\"notice\":\"Function used to return items that are currently on sale\"},\"getMarketTicket(uint256)\":{\"notice\":\"Function used to return ticket that are currently on sale\"},\"getTicketDurationLeft(uint256)\":{\"notice\":\"Function used to view how much time is left for lended Ticket\"},\"i_vrfCoordinator()\":{\"notice\":\"VRF Variables\"},\"isVip(address)\":{\"notice\":\"Check if user owns at least 1 MrCrypto\"},\"listItem(uint256)\":{\"notice\":\"List a new item to the avaliable collection\"},\"listItemOnMarket(uint256,uint256)\":{\"notice\":\"Function used to sell an item on the marketplace\"},\"listTicket(uint256,uint256,uint256)\":{\"notice\":\"This function is used for a VIP user to list 'Case Tickets' on the MarketPlace\"},\"openCase()\":{\"notice\":\"Function used to 'open a case' and get an item\"},\"setAdmin(address)\":{\"notice\":\"Set new Admin\"},\"setCasePrice(uint256)\":{\"notice\":\"Change price of the box\"},\"setTokenUri(uint256,string)\":{\"notice\":\"Used to set tokenURI to specific item \"},\"supplyOfItem(uint256)\":{\"notice\":\"Returns maxSupply of specific item (by tokenId)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Need to override supportsInterface function because Contract is ERC1155 and AccessControl\"},\"unListItem(uint256)\":{\"notice\":\"Function used to unlist an item from marketplace\"},\"unListTicket(uint256)\":{\"notice\":\"This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace\"},\"uri(uint256)\":{\"notice\":\"Used to return token URI by inserting tokenID\"},\"viewItems(address)\":{\"notice\":\"Returns all the items inside the user's inventory without the ones on Market Sale(Could be used by the user to check his inventory or to check someone else inventory by address)\"},\"withdrawAllFunds(address)\":{\"notice\":\"Used to withdraw ALL funds\"},\"withdrawFunds(address,uint256)\":{\"notice\":\"Used to withdraw specific amount of funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RacksItemsv4.sol\":\"RacksItemsv4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/IRacksItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\ninterface IRacksItems { \\n\\n    /**\\n    * @notice Struct for Items on the Marketplace\\n    */\\n    struct itemOnSale{\\n    uint256 tokenId;\\n    uint256 marketItemId;\\n    uint256 price;\\n    address itemOwner;\\n    bool isOnSale;\\n    }\\n\\n    /**\\n    * @notice Struct for Tickets on the Marketplace\\n    */\\n    struct caseTicket {\\n    uint256 ticketId;\\n    uint256 numTries;\\n    uint256 duration;\\n    uint256 price;\\n    address owner;\\n    uint256 timeWhenSold;\\n    bool isAvaliable;\\n    }\\n\\n    /// @notice Events\\n    event CaseOpened(address user, uint256 casePrice, uint256 item);\\n    event casePriceChanged(uint256 newPrice);\\n    event itemExchanged(address user, uint256 tokenId);\\n    event sellingItem(address user, uint256 tokenId, uint256 price);\\n    event itemBought(address buyer, address seller, uint256 marketItemId, uint256 price);\\n    event unListedItem(address owner, uint256 marketItemId);\\n    event itemPriceChanged(address owner, uint256 marketItemId, uint256 oldPrice, uint256 newPrice);\\n    event newTicketOnSale(address seller, uint256 numTries, uint256 _hours, uint256 price);\\n    event unListTicketOnSale(address owner);\\n    event ticketConditionsChanged(address owner, uint256 newTries, uint256 newHours, uint256 newPrice);\\n    event ticketBought(uint256 ticketId, address oldOwner, address newOwner, uint256 price);\\n    event ticketClaimedBack(address borrower, address realOwner);\\n\\n    function openCase() external;\\n\\n    function caseLiquidity() external view returns(uint256[] memory);\\n\\n    function supplyOfItem(uint256 tokenId) external view returns(uint);\\n\\n    function _rarityOfItem(uint256 tokenId) external view returns(uint256);\\n\\n    function viewItems(address owner) external view returns(uint256[] memory);\\n\\n    function listItemOnMarket(uint256 marketItemId, uint256 price) external;\\n\\n    function unListItem(uint256 marketItemId) external;\\n\\n    function changeItemPrice(uint256 marketItemId, uint256 newPrice) external;\\n\\n    function exchangeItem(uint256 tokenId) external;\\n\\n    function buyItem(uint256 marketItemId) external;\\n\\n    function getMarketItem(uint marketItemId) external view returns(itemOnSale memory);\\n\\n    function getItemsOnSale() external view returns(itemOnSale[] memory);\\n\\n    function listTicket(uint256 numTries, uint256 _hours, uint256 price) external;\\n\\n    function unListTicket(uint256 ticketId) external;\\n\\n    function changeTicketConditions(uint256 ticketId, uint256 newTries, uint256 newHours, uint256 newPrice) external;\\n\\n    function buyTicket(uint256 ticketId) external;\\n\\n    function claimTicketBack(uint256 ticketId) external;\\n\\n    function getMarketTicket(uint256 ticketId) external view returns(caseTicket memory);\\n\\n    function getITicketsOnSale() external view returns(caseTicket[] memory);\\n\\n    function getTicketDurationLeft(uint256 ticketId) external view returns (address, uint256, bool);\\n\\n    function isVip(address user) external view returns(bool);\\n\\n    function setAdmin(address _newAdmin) external;\\n\\n    function setTokenUri(uint256 tokenId, string memory _uri) external;\\n\\n    function withdrawFunds(address wallet, uint256 amount) external;\\n\\n    function withdrawAllFunds(address wallet) external; \\n}\",\"keccak256\":\"0x43e56c102e689e6cd78bf5400a05b9c6ab630b86e2eb6f0279e488b8223d11e3\",\"license\":\"MIT\"},\"contracts/RacksItemsv4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IRacksItems.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\"; \\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; \\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\"; \\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; \\n\\ncontract RacksItemsv4 is IRacksItems, ERC1155, ERC1155Holder, AccessControl, VRFConsumerBaseV2 { \\n   \\n    /**\\n    * @notice Enum for Contract state -> to let user enter call some functions or not\\n    */\\n    enum ContractState {   \\n    Active,\\n    Inactive\\n    }\\n\\n    /// @notice tokens\\n    IERC721Enumerable MR_CRYPTO;\\n    IERC20 racksToken;\\n\\n    /// @notice Standard variables\\n    bytes32 public constant ADMIN_ROLE = 0x00;\\n    address private _owner;\\n    uint256 private s_maxTotalSupply;\\n    uint256 private s_tokenCount;\\n    uint256 private _marketCount;\\n    uint256 private s_ticketCount;\\n    uint256 private casePrice; \\n    ContractState private s_contractState;\\n    itemOnSale[] private _marketItems;\\n    caseTicket[] private _tickets;\\n\\n    /// @notice VRF Variables\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator; \\n    bytes32 public immutable i_gasLane;\\n    uint64 public immutable i_subscriptionId;\\n    uint32 public immutable i_callbackGasLimit;\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3; \\n    uint32 public constant NUM_WORDS = 2; \\n    uint256 public s_randomWord; // random Number we get from Chainlink VRF\\n\\n    /// @notice Mappings\\n    mapping(uint => uint) private s_maxSupply;\\n    mapping (uint256 => string) private s_uris; \\n    mapping(address => bool) private s_isSellingTicket;\\n    mapping(address => bool) private s_hasTicket; \\n    mapping(address => bool) private s_hadTicket;\\n    mapping(address => bool) private s_ticketIsLended;\\n    mapping (address => mapping(uint256=> uint256)) s_marketInventory;\\n\\n    /// @notice Modifiers\\n    /// @notice Check that person calling a function is the owner of the Contract\\n    modifier onlyOwner() {\\n    require(msg.sender == _owner, \\\"User is not the owner\\\");\\n        _;\\n    }\\n\\n    /// @notice Check that user is Owner or Admin\\n    modifier onlyOwnerOrAdmin() {\\n    require(_isOwnerOrAdmin(msg.sender), \\\"User is not the Owner or an Admin\\\");\\n    _;\\n    }\\n\\n    /// @notice Check that user is Member and owns at least 1 MrCrypto\\n    modifier onlyVIP() {\\n    require(isVip(msg.sender), \\\"User does not owns a MrCrypto\\\");\\n        _;\\n    }\\n\\n    /**  @notice Check that user is owns at least 1 ticket for opening case (used in case user\\n    * does not own a MrCrypto and buys a ticket from another user)\\n    */\\n    modifier ownsTicket() {\\n    require(s_hasTicket[msg.sender], \\\"User does not owns a Ticket for openning the case.\\\");\\n    _;\\n    }\\n\\n    /**  @notice Check that there is at least 1 item avaliable so the user can open a case for example\\n    */\\n    modifier supplyAvaliable() {\\n    require(s_maxTotalSupply > 0, \\\"There are no items avaliable\\\");\\n    _;\\n    }\\n\\n    /// @notice Check if contract state is Active\\n    modifier contractIsActive() {\\n    require(s_contractState == ContractState.Active, \\\"Contract is not active at this moment\\\");\\n    _;\\n    }\\n\\n    constructor(address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit, address _racksTokenAddress, address _MockMrCryptoAddress) \\n    VRFConsumerBaseV2(vrfCoordinatorV2)\\n    ERC1155(\\\"\\\"){\\n    /**\\n    * Initialization of Chainlink VRF variables\\n    */\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); \\n    i_gasLane = gasLane; \\n    i_subscriptionId = subscriptionId;\\n    i_callbackGasLimit = callbackGasLimit; \\n\\n    /**\\n    * Initialization of RacksItem contract variables\\n    */\\n    MR_CRYPTO = IERC721Enumerable(_MockMrCryptoAddress);\\n    racksToken = IERC20(_racksTokenAddress);\\n    _owner = msg.sender;\\n    s_tokenCount = 0;\\n    s_ticketCount = 0;\\n    casePrice = 1;\\n    s_contractState = ContractState.Active;\\n\\n    }\\n\\n    /** \\n    * @notice Need to override supportsInterface function because Contract is ERC1155 and AccessControl\\n    */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC1155Receiver, AccessControl) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n    }\\n\\n\\n    //////////////////////\\n    //  Case Functions // \\n    /////////////////////\\n\\n    /**\\n    * @notice Change price of the box\\n    * @dev Only callable by the Owner\\n    */\\n    function setCasePrice(uint256 price) public onlyOwnerOrAdmin {\\n    casePrice = price;\\n    emit casePriceChanged(price);\\n    }\\n\\n    /**\\n    * @notice Used to get an actually Random Number -> to pick an item when openning a case\\n    * @dev Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object\\n    * set as internal because is going to be called only when a case is opened\\n    */\\n    function _randomNumber() public returns(uint256) {\\n    uint256 s_requestedNumber = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS);\\n    return s_requestedNumber;\\n    }\\n\\n    /**\\n    * @notice Function to actually pick a winner \\n    * @dev \\n    * - randomWords -> array of randomWords\\n    */\\n    function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\n    s_randomWord = randomWords[0]; // just in case random number is very long we apply modular function \\n    }\\n\\n    /**\\n    * @notice Function used to 'open a case' and get an item\\n    * @dev \\n    * - Should check that user owns a Ticket -> modifier\\n    * - Should check that msg.value is bigger than casePrice\\n    * - Should transfer msg.value to the contract\\n    * - Internally calls randomNumber() \\n    * - Apply modular function for the randomNumber to be between 0 and totalSupply of items\\n    * - Should choose an item\\n    */\\n    function openCase() public override supplyAvaliable contractIsActive  {  \\n    if (MR_CRYPTO.balanceOf(msg.sender) < 1) {\\n        require(s_hasTicket[msg.sender], \\\"User does not owns a Ticket for openning the case.\\\");\\n    }\\n    racksToken.transferFrom(msg.sender, address(this), casePrice);\\n    uint256 randomNumber = _randomNumber()  % s_maxTotalSupply;\\n    uint256 totalCount = 0;\\n    uint256 item;\\n\\n    for(uint256 i = 0 ; i < s_tokenCount; i++) {\\n        uint256 _newTotalCount = totalCount + s_maxSupply[i] ;\\n        if(randomNumber > _newTotalCount) {\\n        totalCount = _newTotalCount;\\n        }else {\\n        item = i;\\n        if(balanceOf(address(this),item)==0){\\n            for(uint256 j = item-1; j >= 0; j--){\\n            if (balanceOf(address(this),j)>0){\\n                item = j;\\n                break;\\n            }\\n            }\\n        }\\n        _safeTransferFrom(address(this), msg.sender, item , 1,\\\"\\\");\\n        s_maxTotalSupply--;\\n        break;\\n        }\\n    }\\n    if (!isVip(msg.sender)){ // Case opener is someone that bought a ticket\\n    decreaseTicketTries(msg.sender);\\n    }\\n    emit CaseOpened(msg.sender, casePrice, item);\\n    }\\n\\n    /**\\n    * @notice Returns all the items the case can drop\\n    */\\n    function caseLiquidity() public view override returns(uint256[] memory){\\n    uint256 arrayLength;\\n    for(uint256 i=0; i< s_tokenCount; i++){\\n        if(balanceOf(address(this), i)>0 ){\\n        arrayLength++;\\n        }\\n    }\\n    uint256 [] memory items = new uint256[](arrayLength);\\n    uint256 indexCount;\\n    for(uint256 j=0; j< s_tokenCount; j++){\\n        if(balanceOf(address(this), j)>0 ){\\n        items[indexCount]=j;\\n        indexCount++;\\n\\n        }\\n    }\\n    return items;\\n    }\\n\\n\\n    //////////////////////\\n    //  Item Functions // \\n    /////////////////////\\n\\n    /**\\n    * @notice Returns maxSupply of specific item (by tokenId)\\n    * @dev - Getter of s_maxSupply mapping\\n    */\\n    function supplyOfItem(uint256 tokenId) public view override returns(uint) {\\n    return s_maxSupply[tokenId];\\n    }\\n\\n    /**\\n    * @notice Check that item exists (by tokenId)\\n    */\\n    function _itemExists(uint256 tokenId) internal view returns (bool) {\\n    require(s_maxSupply[tokenId] > 0);\\n    return true;\\n    }\\n\\n    /**\\n    * @notice Calculate chance of receiving an specific item\\n    * - As higher is result higher is the rarity of the item\\n    * @dev - Requires that tokenId exists (item is listed)\\n    * - chance is calculated as item supply divided by total items supply\\n    */\\n    function _rarityOfItem(uint256 tokenId) public virtual view override returns(uint256) {\\n    require(_itemExists(tokenId));\\n    uint256 result = s_maxTotalSupply / s_maxSupply[tokenId];\\n    return result;\\n    }\\n\\n    /**\\n    * @notice Returns all the items inside the user's inventory without the ones on Market Sale(Could be used by the\\n    * user to check his inventory or to check someone else inventory by address)\\n    * @dev Copy users inventory in an empty array and returns it\\n    */\\n    function viewItems(address owner) public view override returns(uint256[] memory) { \\n    uint256[] memory inventory = new uint [](s_tokenCount);\\n    for(uint256 i=0 ; i < inventory.length; i++) {\\n        inventory[i] = balanceOf(owner,i) - s_marketInventory[owner][i];\\n    }\\n    return inventory;\\n    }\\n\\n    /**\\n    * @notice List a new item to the avaliable collection\\n    * @dev Only callable by the Owner\\n    */\\n    function listItem(uint256 itemSupply) public onlyOwnerOrAdmin {\\n    _mintSupply(address(this), itemSupply);\\n    }\\n\\n    /**\\n    * @notice Mint supply tokens of each Item\\n    * @dev Declared internal because it is called inside the contructor\\n    * - call _mint function\\n    * - call set maxSupply function\\n    * - updates TotalMaxSupply of Items\\n    * - updates s_tokenCount -> Each items has associated an Id (e.g: Jeans -> Id: 0, Hoddie -> Id: 1,\\n    * we increment s_tokenCount so next time we call _mintSupply a new type of item is going to be minted)\\n    * - The items (tokens are minted by this contract and deposited into this contract address)\\n    */\\n    function _mintSupply(address receiver, uint256 amount) internal {\\n        _mint(receiver, s_tokenCount, amount, \\\"\\\");\\n        _setMaxSupply(s_tokenCount, amount);\\n        s_maxTotalSupply += amount;\\n        s_tokenCount += 1;\\n    }\\n\\n    /**\\n    * @notice Function used to set maxSupply of each item\\n    */\\n    function _setMaxSupply(uint256 tokenId, uint256 amount) internal {\\n        s_maxSupply[tokenId] = amount;\\n    }\\n\\n\\n    ////////////////////////////\\n    //  Marketplace Functions // \\n    ///////////////////////////\\n\\n    /**\\n    * @notice Function used to sell an item on the marketplace\\n    * @dev\\n    * - Needs to check balanceOf item trying to be sold\\n    * - Needs to check if user has correctly done an Approve for the item transfer in case it is sold\\n    * - Needs to transfer item \\n    * - Update s_marketInventory\\n    * - Update marketItems array\\n    * - Emit event \\n    */\\n    function listItemOnMarket(uint256 marketItemId, uint256 price) public override {\\n    require(balanceOf(msg.sender, marketItemId) > 0, \\\"Item not found.\\\");\\n    require(isApprovedForAll(msg.sender, address(this)), \\\"Approved is not correctly done.\\\");\\n    require(price > 0, \\\"Price must be greater than 0\\\");\\n    s_marketInventory[msg.sender][marketItemId] += 1;\\n    _marketItems.push(\\n        itemOnSale(\\n        marketItemId,\\n        _marketCount,\\n        price,\\n        msg.sender,\\n        true\\n        )\\n    );\\n    _marketCount++;\\n    emit sellingItem(msg.sender, marketItemId, price);\\n    }\\n\\n    /**\\n    * @notice Function used to unlist an item from marketplace\\n    * @dev\\n    * - Needs to check that user is trying to unlist an item he owns\\n    * - Update marketInventory\\n    * - Update item's sold variable\\n    * - Emit event\\n    */\\n    function unListItem(uint256 marketItemId) public override {\\n    require(_marketItems[marketItemId].itemOwner == msg.sender, \\\"You are not the owner of this item.\\\");\\n    s_marketInventory[msg.sender][_marketItems[marketItemId].tokenId] -= 1;\\n    _marketItems[marketItemId].isOnSale = false;\\n    emit unListedItem(msg.sender, marketItemId);\\n    }\\n\\n    /**\\n    * @notice Function used to change price from item listed \\n    * @dev\\n    * - Needs to check that user is trying to unlist an item he owns\\n    * - Needs to update price status\\n    * - Emit event\\n    */\\n    function changeItemPrice(uint256 marketItemId, uint256 newPrice) public override {\\n    require(_marketItems[marketItemId].itemOwner == msg.sender, \\\"You are not the owner of this item.\\\");\\n    uint256 oldPrice = _marketItems[marketItemId].price;\\n    _marketItems[marketItemId].price = newPrice;\\n    emit itemPriceChanged(msg.sender, marketItemId, oldPrice, newPrice);\\n    }\\n\\n    /**\\n    * @notice Function used to exchange a token item for a real physical clothe.\\n    */\\n    function exchangeItem(uint256 tokenId) public override {\\n    require(balanceOf(msg.sender, tokenId) > 0);\\n    _burn(msg.sender, tokenId, 1);\\n    s_maxSupply[tokenId] -= 1;\\n    s_maxTotalSupply -=1;\\n    emit itemExchanged(msg.sender, tokenId);\\n    }\\n\\n    /**\\n    * @notice Function used to buy an item on the marketplace\\n    * @dev\\n    * - Needs to check that user is not trying to buy its own item\\n    * - Needs to check that item was not sold before\\n    * - Needs to transfer tokens from buyer to seller\\n    * - Needs to transfer item from seller to buyer\\n    * - Update sold attribute from array\\n    * - Emit event \\n    */\\n    function buyItem(uint256 marketItemId) public override {\\n    itemOnSale memory item = _marketItems[marketItemId];\\n    require(msg.sender != _marketItems[marketItemId].itemOwner, \\\"You can not buy an item to yourself\\\");\\n    require(_marketItems[marketItemId].isOnSale == true, \\\"This item is not on sale anymore.\\\");\\n    require(_itemStillAvailable(item.itemOwner, item.tokenId), \\\"Item does not exist.\\\");\\n    require(racksToken.allowance(msg.sender, address(this)) >= item.price, \\\"Insufficient ERC20 allowance\\\");\\n\\n    racksToken.transferFrom(msg.sender, _marketItems[marketItemId].itemOwner, _marketItems[marketItemId].price);\\n    _safeTransferFrom(_marketItems[marketItemId].itemOwner, msg.sender, _marketItems[marketItemId].tokenId, 1 ,\\\"\\\");\\n    s_marketInventory[item.itemOwner][item.tokenId]-=1;\\n    address oldOwner = _marketItems[marketItemId].itemOwner;\\n    _marketItems[marketItemId].itemOwner = msg.sender;\\n    _marketItems[marketItemId].isOnSale = false;\\n    emit itemBought(msg.sender, oldOwner, marketItemId, _marketItems[marketItemId].price);\\n    }\\n\\n    /**\\n    * @notice Function used to return items that are currently on sale\\n    */\\n    function getMarketItem(uint marketItemId) public view override returns(itemOnSale memory){\\n    return _marketItems[marketItemId];\\n    }\\n\\n    /**\\n    * @notice function used to return every item that is on sale on the MarketPlace\\n    */\\n    function getItemsOnSale() public view override returns(itemOnSale[] memory) {\\n    uint arrayLength;\\n\\n    for(uint i=0; i<_marketItems.length;i++){\\n        itemOnSale memory item = _marketItems[i];\\n        if(item.isOnSale == true && _itemStillAvailable(item.itemOwner, item.tokenId)){\\n        arrayLength+=1;\\n        }\\n    }\\n    itemOnSale[] memory items = new itemOnSale[](arrayLength);\\n    uint indexCount;\\n    for(uint256 i = 0; i < _marketItems.length; i++){\\n        itemOnSale memory  item = _marketItems[i];\\n        if(item.isOnSale == true  && _itemStillAvailable(item.itemOwner, item.tokenId)){\\n        items[indexCount]=item;\\n        indexCount++;\\n        }\\n    }\\n    return items;\\n    }\\n\\n    //////////////////////\\n    //  Ticket Functions // \\n    /////////////////////\\n\\n    /**\\n    * @notice This function is used for a VIP user to list 'Case Tickets' on the MarketPlace\\n    * @dev - Should check that user is Vip (Modifier)\\n    * - Check is user has had a ticket before\\n    *     - If so: check that is has ticket now\\n    *     - if not: create ticket (first ticket in live for this user)\\n    * - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time\\n    * - Include ticket on array\\n    * - Increase s_ticketCount\\n    * - Set mapping to true\\n    * - Emit event\\n    *\\n    */\\n    function listTicket(uint256 numTries, uint256 _hours, uint256 price) public override onlyVIP {\\n    require(!s_isSellingTicket[msg.sender], \\\"User is already currently selling a Ticket\\\");\\n    if(s_hadTicket[msg.sender]) {\\n    require(s_hasTicket[msg.sender], \\\"User has not ticket avaliable\\\");\\n    }\\n        _tickets.push(\\n        caseTicket(\\n        s_ticketCount,\\n        numTries,\\n        _hours,\\n        price,\\n        msg.sender,\\n        0,\\n        true\\n        ));\\n        s_ticketCount++;\\n        s_isSellingTicket[msg.sender] = true;\\n        s_hadTicket[msg.sender] = true;\\n        s_hasTicket[msg.sender] = false;\\n        emit newTicketOnSale(msg.sender, numTries, _hours, price);\\n    }\\n\\n    /**\\n    * @notice This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace\\n    * @dev - Should check that user is Vip (Modifier)\\n    * - Should check that user has a listed ticket\\n    * - Emit event\\n    */\\n    function unListTicket(uint256 ticketId) public override onlyVIP {\\n    require(s_isSellingTicket[msg.sender], \\\"User is not currently selling a Ticket\\\");\\n    require(_tickets[ticketId].owner == msg.sender, \\\"User is not owner of this ticket\\\");\\n    _tickets[ticketId].isAvaliable = false;\\n    s_isSellingTicket[msg.sender] = false;\\n    s_hasTicket[msg.sender] = true;\\n    emit unListTicketOnSale(msg.sender);\\n    }\\n\\n    /**\\n    * @notice This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace\\n    * @dev - Should check that user is Vip (Modifier)\\n    * - Should check that user has a listed ticket\\n    * - Emit event\\n    */\\n    function changeTicketConditions(uint256 ticketId, uint256 newTries, uint256 newHours, uint256 newPrice) public override onlyVIP {\\n    require(s_isSellingTicket[msg.sender], \\\"User is not currently selling a Ticket\\\");\\n    require(_tickets[ticketId].owner == msg.sender, \\\"User is not owner of this ticket\\\");\\n    _tickets[ticketId].price = newPrice;\\n    _tickets[ticketId].duration = newHours;\\n    _tickets[ticketId].numTries = newTries;\\n    emit ticketConditionsChanged(msg.sender, newTries, newHours, newPrice);\\n    }\\n\\n    /**\\n    * @notice This function is used to buy a caseTicket\\n    * @dev - Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket\\n    * - Should check that user has a listed ticket\\n    * - Transfer RacksToken from buyer to seller\\n    * - Update mappings variables\\n    * - Emit event\\n    */\\n    function buyTicket(uint256 ticketId) public override {\\n    require(!isVip(msg.sender), \\\"A VIP user can not buy a ticket\\\");\\n    require(_tickets[ticketId].owner != msg.sender, \\\"You can not buy a ticket to your self\\\");\\n    require(_tickets[ticketId].isAvaliable == true, \\\"Ticket is not currently avaliable\\\");\\n    address oldOwner = _tickets[ticketId].owner;\\n    racksToken.transferFrom(msg.sender, _tickets[ticketId].owner, _tickets[ticketId].price);\\n    _tickets[ticketId].timeWhenSold = block.timestamp;\\n    s_hasTicket[_tickets[ticketId].owner] = false;\\n    s_isSellingTicket[_tickets[ticketId].owner] = false;\\n    s_ticketIsLended[_tickets[ticketId].owner] = true;\\n    s_hasTicket[msg.sender] = true;\\n    _tickets[ticketId].owner = msg.sender;\\n    _tickets[ticketId].isAvaliable = false;\\n    emit ticketBought(ticketId, oldOwner, msg.sender, _tickets[ticketId].price);\\n    }\\n\\n    /** @notice Function used to claim Ticket back when duration is over\\n    * @dev - Check that claimer is lending a Ticket\\n    * - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours \\n    * -> transform duration into seconds \\n    * - Update mappings\\n    * - Emit event\\n    */\\n    function claimTicketBack(uint256 ticketId) public override onlyVIP {\\n    require(s_ticketIsLended[msg.sender], \\\"User did not sell any Ticket\\\");\\n    require((_tickets[ticketId].numTries == 0) || (((block.timestamp - _tickets[ticketId].timeWhenSold)/60) == (_tickets[ticketId].duration * 60)), \\\"Duration of the Ticket or numTries is still avaliable\\\");\\n    address oldOwner = _tickets[ticketId].owner;\\n    s_hasTicket[_tickets[ticketId].owner] = false;\\n    s_hasTicket[msg.sender] = true;\\n    s_ticketIsLended[msg.sender] = false;\\n    _tickets[ticketId].owner = msg.sender;\\n    _tickets[ticketId].isAvaliable = true;\\n    s_hasTicket[_tickets[ticketId].owner] = true;\\n    emit ticketClaimedBack(oldOwner, msg.sender);\\n    }\\n\\n    /** @notice Function used to decrease Ticket tries avaliables\\n    * @dev - Check if used trie was last one\\n    *        - If not: just decrease numTries\\n    *        - If so: decrease numTries, update Avaliability and mappings\\n    */\\n    function decreaseTicketTries(address user) internal {\\n    for (uint256 i = 0; i < _tickets.length; i++) {\\n        if (_tickets[i].owner == user) {\\n            if(_tickets[i].numTries != 1) { // Case it was not the last trie avaliable\\n                _tickets[i].numTries--;\\n            }else { // it was his last trie avaliable\\n                _tickets[i].numTries--;\\n                _tickets[i].isAvaliable = false;\\n                s_hasTicket[user] = false;\\n            }\\n        }       \\n    } \\n    }\\n\\n    /**\\n    * @notice Function used to return ticket that are currently on sale\\n    */\\n    function getMarketTicket(uint256 ticketId) public view override returns(caseTicket memory) {\\n    return _tickets[ticketId];\\n    }\\n\\n    /**\\n    * @notice Function used to return every ticket that are currently on sale\\n    */\\n    function getITicketsOnSale() public view override returns(caseTicket[] memory) {\\n    uint arrayLength;\\n\\n    for(uint i=0; i<_tickets.length;i++){\\n        caseTicket memory ticket = _tickets[i];\\n        if(ticket.isAvaliable==true){\\n        arrayLength+=1;\\n        }\\n    }\\n    caseTicket[] memory tickets = new caseTicket[](arrayLength);\\n    uint indexCount;\\n    for(uint256 i = 0; i < _tickets.length; i++){\\n        caseTicket memory ticket = _tickets[i];\\n        if(ticket.isAvaliable==true){\\n        tickets[indexCount]=ticket;\\n        indexCount++;\\n        }\\n    }\\n    return tickets;\\n    }\\n\\n    /**\\n    * @notice Function used to check if an item is still owned and approved by its owner\\n    */\\n    function _itemStillAvailable(address owner, uint256 tokenId) internal view returns(bool){\\n    if(balanceOf(owner, tokenId) > 0){\\n        return true;\\n    }else{\\n        return false;\\n    }\\n    }\\n\\n    /**\\n    * @notice Function used to view how much time is left for lended Ticket\\n    * @dev This function returns 2 parameters\\n    * - uint256: timeLeft \\n    * - bool: false if numTries == 0\\n    *         true if numTries > 0\\n    */\\n    function getTicketDurationLeft(uint256 ticketId) public view override returns (address, uint256, bool) {\\n    require(_tickets[ticketId].timeWhenSold > 0, \\\"Ticket is not sold yet.\\\");\\n    uint256 timeLeft;\\n    if ((_tickets[ticketId].numTries == 0)) {\\n        if((((block.timestamp - _tickets[ticketId].timeWhenSold)/60) == (_tickets[ticketId].duration * 60))) {\\n        timeLeft = 0;\\n        return (_tickets[ticketId].owner, timeLeft, false);\\n        }else {\\n        timeLeft = (_tickets[ticketId].duration * 60) - ((block.timestamp - _tickets[ticketId].timeWhenSold)/60);\\n        return (_tickets[ticketId].owner, timeLeft, false);\\n        } \\n    } else {\\n        if((((block.timestamp - _tickets[ticketId].timeWhenSold)/60) == (_tickets[ticketId].duration * 60))) {\\n        timeLeft = 0;\\n        return (_tickets[ticketId].owner, timeLeft, true);\\n        }else {\\n        timeLeft = (_tickets[ticketId].duration * 60) - ((block.timestamp - _tickets[ticketId].timeWhenSold)/60);\\n        return (_tickets[ticketId].owner, timeLeft, true);\\n        } \\n    }\\n    }\\n\\n\\n    //////////////////////\\n    //  User Functions // \\n    /////////////////////\\n\\n    /**\\n    * @notice Check if user owns at least 1 MrCrypto\\n    * @dev - Require users MrCrypro's balance is > 0\\n    */\\n    function isVip(address user) public view override returns(bool) {\\n    if((MR_CRYPTO.balanceOf(user) > 0)) {\\n        return true;\\n    } else{\\n        return false;\\n    } \\n    }\\n\\n    /**\\n    * @notice Check if user is owner of the Contract or has admin role\\n    * @dev Only callable by the Owner\\n    */\\n    function _isOwnerOrAdmin(address user) internal view returns (bool) {\\n    require(_owner == user || hasRole(ADMIN_ROLE, user));\\n    return true;\\n    }\\n\\n    /**\\n    * @notice Set new Admin\\n    * @dev Only callable by the Owner\\n    */\\n    function setAdmin(address _newAdmin) public override onlyOwner {\\n    _setupRole(ADMIN_ROLE, _newAdmin);\\n    }\\n\\n    ////////////////////////////\\n    //  Management Functions // \\n    //////////////////////////\\n\\n    /**\\n    * @notice Change contract state from Active to Inactive and viceversa\\n    * @dev Only callable by the Owner or an admin\\n    */\\n    function flipContractState() public onlyOwnerOrAdmin {\\n    if (s_contractState == ContractState.Active) {\\n        s_contractState = ContractState.Inactive;\\n    }else {\\n        s_contractState = ContractState.Active;\\n    }\\n    }\\n\\n    ////////////////////////////\\n    //  ERC1155 Functions   // \\n    //////////////////////////\\n\\n    /**\\n    * @notice Used to return token URI by inserting tokenID\\n    * @dev - returns information stored in s_uris mapping\\n    * - Any user can check this information\\n    */\\n    function uri(uint256 tokenId) override public view returns (string memory) {\\n    return(s_uris[tokenId]);\\n    }\\n\\n    /**\\n    * @notice Used to set tokenURI to specific item \\n    * @dev - Only Owner or Admins can call this function\\n    * - Need to specify:\\n    *  - tokenId: specific item you want to set its uri\\n    *  - uri: uri wanted to be set\\n    */\\n    function setTokenUri(uint256 tokenId, string memory _uri) public override onlyOwnerOrAdmin {\\n        require(bytes(s_uris[tokenId]).length == 0, \\\"Can not set uri twice\\\"); \\n        s_uris[tokenId] = _uri; \\n    }\\n\\n    ////////////////////////\\n    //  Funds Functions // \\n    //////////////////////\\n\\n    /**\\n    * @notice Used to withdraw specific amount of funds\\n    * @dev \\n    * - Only owner is able to call this function\\n    * - Should check that there are avaliable funds to withdraw\\n    * - Should specify the wallet address you want to transfer the funds to\\n    * - Should specify the amount of funds you want to transfer\\n    */\\n    function withdrawFunds(address wallet, uint256 amount) public override onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, amount);\\n    }\\n\\n    /**\\n    * @notice Used to withdraw ALL funds\\n    * @dev \\n    * - Only owner is able to call this function\\n    * - Should check that there are avaliable funds to withdraw\\n    * - Should specify the wallet address you want to transfer the funds to\\n    */\\n    function withdrawAllFunds(address wallet) public override onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, racksToken.balanceOf(address(this)));\\n    }\\n\\n    /// @notice Receive function\\n    receive() external payable {\\n    }\\n\\n     //////////////\\n    //  Getters // \\n    //////////////\\n\\n    function getOwner() public view returns(address) {\\n        return _owner;\\n    }\\n\\n    function getMaxTotalSupply() public view returns(uint256) {\\n        return s_maxTotalSupply;\\n    }\\n\\n    function getTokenCount() public view returns(uint256) {\\n        return s_tokenCount;\\n    }\\n\\n    function getMarketcount() public view returns(uint256) {\\n        return _marketCount;\\n    }\\n\\n    function getTicketCount() public view returns(uint256) {\\n        return s_ticketCount;\\n    }\\n\\n    function getPriceCase() public view returns(uint256) {\\n        return casePrice;\\n    }\\n\\n    function getContractState() public view returns(ContractState) {\\n        return s_contractState;\\n    }\\n\\n   function getItemsOnSale(uint256 itemId) public view returns(itemOnSale memory) {\\n        return _marketItems[itemId];\\n   }\\n\\n    function getTicket(uint256 ticketId) public view returns(caseTicket memory) {\\n        return _tickets[ticketId];\\n    }\\n}\",\"keccak256\":\"0x028994890721c6730043336a9c4028256b02974c7e7e5b6c7fc0c2ba50f8956d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162005eef38038062005eef8339810160408190526200003591620001d0565b60408051602081019091526000815286906200005181620000f4565b506001600160601b0319606091821b811660805296901b90951660a05260c09384526001600160c01b03199290931b9190911660e09081526001600160e01b031991901b1661010052600480546001600160a01b039384166001600160a01b0319918216179091556005805493909216928116929092179055600680549091163317905560006008819055600a556001600b55600c805460ff191690556200029e565b8051620001099060029060208401906200010d565b5050565b8280546200011b9062000261565b90600052602060002090601f0160209004810192826200013f57600085556200018a565b82601f106200015a57805160ff19168380011785556200018a565b828001600101855582156200018a579182015b828111156200018a5782518255916020019190600101906200016d565b50620001989291506200019c565b5090565b5b808211156200019857600081556001016200019d565b80516001600160a01b0381168114620001cb57600080fd5b919050565b60008060008060008060c08789031215620001ea57600080fd5b620001f587620001b3565b6020880151604089015191975095506001600160401b03811681146200021a57600080fd5b606088015190945063ffffffff811681146200023557600080fd5b92506200024560808801620001b3565b91506200025560a08801620001b3565b90509295509295509295565b600181811c908216806200027657607f821691505b602082108114156200029857634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c60c05160e05160c01c6101005160e01c615bdd6200031260003960008181610aa90152611e8a0152600081816105c40152611e5701526000818161088e0152611e290152600081816109420152611ec501526000818161149b01526114c30152615bdd6000f3fe60806040526004361061033b5760003560e01c80637e420db5116101b2578063bc197c81116100ed578063dd006d3111610090578063dd006d3114610793578063de08f65314610acb578063e7fb74c714610ae0578063e985e9c514610b00578063f23a6e6114610b20578063f242432a14610b4c578063f48c9d3414610b6c578063fd210fd914610b8c57600080fd5b8063bc197c81146109c8578063c107532914610a0d578063c4c4273014610a2d578063c7be7a4914610640578063c7e05f8d14610a42578063d3c115f214610a62578063d547741f14610a77578063d757d02714610a9757600080fd5b8063a217fddf11610155578063a217fddf14610769578063a22cb465146108d0578063a7b19424146108f0578063a7bc77c614610910578063aebc455014610930578063b2ead3c714610964578063b85e67af14610986578063bbcbc2e7146109a657600080fd5b80637e420db5146107c05780637f4e4849146107e057806384203f4b14610800578063885c2f1714610820578063893d20e8146108355780638dc5f45b1461085c5780638e879c8a1461087c57806391d14854146108b057600080fd5b806336568abe1161028257806361c073d61161022557806361c073d6146106b757806367dd74ca146106d757806367f082b0146106f7578063704b6c021461071f57806372cf6e341461073f57806375b238fc1461076957806378a895671461077e5780637dc379fa1461079357600080fd5b806336568abe14610592578063470cdf97146105b25780634a226657146105fe5780634e1273f41461061357806352a8bd221461064057806357f7789e1461066d5780635db30bb11461068d57806361652450146106a257600080fd5b80631fe543e3116102ea5780631fe543e31461048057806320ba0814146104a057806321c63a47146104cd578063248a9ca3146104e25780632ce38190146105125780632eb2c2d6146105325780632f2ff15d1461055257806332dee40b1461057257600080fd5b8062fdd58e1461034757806301ffc9a71461037a578063020f1980146103aa5780630e89341c146103cc57806319c08575146103f95780631c7cbe4f146104405780631cb0b2731461046057600080fd5b3661034257005b600080fd5b34801561035357600080fd5b50610367610362366004614ffb565b610ba2565b6040519081526020015b60405180910390f35b34801561038657600080fd5b5061039a61039536600461514e565b610c3c565b6040519015158152602001610371565b3480156103b657600080fd5b506103ca6103c536600461522d565b610c47565b005b3480156103d857600080fd5b506103ec6103e7366004615112565b610ec2565b6040516103719190615655565b34801561040557600080fd5b50610419610414366004615112565b610f64565b604080516001600160a01b0390941684526020840192909252151590820152606001610371565b34801561044c57600080fd5b506103ca61045b36600461527b565b61128a565b34801561046c57600080fd5b506103ca61047b366004615112565b6113f3565b34801561048c57600080fd5b506103ca61049b3660046151a1565b611490565b3480156104ac57600080fd5b506103676104bb366004615112565b60009081526010602052604090205490565b3480156104d957600080fd5b50600a54610367565b3480156104ee57600080fd5b506103676104fd366004615112565b60009081526003602052604090206001015490565b34801561051e57600080fd5b506103ca61052d366004615112565b61150b565b34801561053e57600080fd5b506103ca61054d366004614eb7565b61153d565b34801561055e57600080fd5b506103ca61056d36600461512b565b6115d4565b34801561057e57600080fd5b506103ca61058d366004614e69565b6115fe565b34801561059e57600080fd5b506103ca6105ad36600461512b565b6117bf565b3480156105be57600080fd5b506105e67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160401b039091168152602001610371565b34801561060a57600080fd5b506103ca611839565b34801561061f57600080fd5b5061063361062e366004615025565b611bcf565b60405161037191906155ec565b34801561064c57600080fd5b5061066061065b366004615112565b611cf8565b60405161037191906158e0565b34801561067957600080fd5b506103ca6106883660046151dd565b611d76565b34801561069957600080fd5b50600754610367565b3480156106ae57600080fd5b50610367611e1a565b3480156106c357600080fd5b506103ca6106d2366004615112565b611f41565b3480156106e357600080fd5b506103ca6106f2366004615112565b612290565b34801561070357600080fd5b5061070c600381565b60405161ffff9091168152602001610371565b34801561072b57600080fd5b506103ca61073a366004614e69565b612759565b34801561074b57600080fd5b50610754600281565b60405163ffffffff9091168152602001610371565b34801561077557600080fd5b50610367600081565b34801561078a57600080fd5b50600854610367565b34801561079f57600080fd5b506107b36107ae366004615112565b61278e565b60405161037191906158d2565b3480156107cc57600080fd5b506103ca6107db366004615112565b61281c565b3480156107ec57600080fd5b50600c5460ff16604051610371919061562d565b34801561080c57600080fd5b5061039a61081b366004614e69565b612954565b34801561082c57600080fd5b50600b54610367565b34801561084157600080fd5b506006546001600160a01b03165b6040516103719190615407565b34801561086857600080fd5b506103ca610877366004615112565b6129f1565b34801561088857600080fd5b506103677f000000000000000000000000000000000000000000000000000000000000000081565b3480156108bc57600080fd5b5061039a6108cb36600461512b565b612a4b565b3480156108dc57600080fd5b506103ca6108eb366004614fc4565b612a76565b3480156108fc57600080fd5b506103ca61090b36600461522d565b612a81565b34801561091c57600080fd5b506103ca61092b366004615112565b612b5f565b34801561093c57600080fd5b5061084f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561097057600080fd5b50610979612c82565b604051610371919061555c565b34801561099257600080fd5b506103ca6109a136600461524f565b612e7f565b3480156109b257600080fd5b506109bb613198565b60405161037191906155aa565b3480156109d457600080fd5b506109f46109e3366004614eb7565b63bc197c8160e01b95945050505050565b6040516001600160e01b03199091168152602001610371565b348015610a1957600080fd5b506103ca610a28366004614ffb565b61339e565b348015610a3957600080fd5b50600954610367565b348015610a4e57600080fd5b50610367610a5d366004615112565b6134ea565b348015610a6e57600080fd5b50610633613521565b348015610a8357600080fd5b506103ca610a9236600461512b565b613608565b348015610aa357600080fd5b506107547f000000000000000000000000000000000000000000000000000000000000000081565b348015610ad757600080fd5b506103ca61362d565b348015610aec57600080fd5b506103ca610afb366004615112565b61368c565b348015610b0c57600080fd5b5061039a610b1b366004614e84565b613c20565b348015610b2c57600080fd5b506109f4610b3b366004614f60565b63f23a6e6160e01b95945050505050565b348015610b5857600080fd5b506103ca610b67366004614f60565b613c4e565b348015610b7857600080fd5b50610633610b87366004614e69565b613cd5565b348015610b9857600080fd5b50610367600f5481565b60006001600160a01b038316610c135760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6000610c3682613d99565b6000610c533384610ba2565b11610c925760405162461bcd60e51b815260206004820152600f60248201526e24ba32b6903737ba103337bab7321760891b6044820152606401610c0a565b610c9c3330613c20565b610ce85760405162461bcd60e51b815260206004820152601f60248201527f417070726f766564206973206e6f7420636f72726563746c7920646f6e652e006044820152606401610c0a565b60008111610d385760405162461bcd60e51b815260206004820152601c60248201527f5072696365206d7573742062652067726561746572207468616e2030000000006044820152606401610c0a565b3360009081526016602090815260408083208584529091528120805460019290610d63908490615911565b90915550506040805160a08101825283815260098054602083019081529282018481523360608401908152600160808501818152600d80549283018155600090815295517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb560049093029283015595517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb682015591517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb7830155517fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb8909101805494516001600160a01b039092166001600160a81b031990951694909417600160a01b911515919091021790925581549190610e7e83615a21565b91905055507f23cba88d6c6f26b62b2cfc32a2cc04fbbde8590188b97cd3590e45af9ac6dd6d338383604051610eb693929190615515565b60405180910390a15050565b6000818152601160205260409020805460609190610edf906159ba565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0b906159ba565b8015610f585780601f10610f2d57610100808354040283529160200191610f58565b820191906000526020600020905b815481529060010190602001808311610f3b57829003601f168201915b50505050509050919050565b600080600080600e8581548110610f7d57610f7d615a92565b90600052602060002090600702016005015411610fd65760405162461bcd60e51b81526020600482015260176024820152762a34b1b5b2ba1034b9903737ba1039b7b632103cb2ba1760491b6044820152606401610c0a565b6000600e8581548110610feb57610feb615a92565b9060005260206000209060070201600101546000141561114357600e858154811061101857611018615a92565b906000526020600020906007020160020154603c611036919061593d565b603c600e878154811061104b5761104b615a92565b90600052602060002090600702016005015442611068919061595c565b6110729190615929565b14156110b75760009050600e858154811061108f5761108f615a92565b600091825260208220600460079092020101546001600160a01b031694509092509050611283565b603c600e86815481106110cc576110cc615a92565b906000526020600020906007020160050154426110e9919061595c565b6110f39190615929565b600e868154811061110657611106615a92565b906000526020600020906007020160020154603c611124919061593d565b61112e919061595c565b9050600e858154811061108f5761108f615a92565b600e858154811061115657611156615a92565b906000526020600020906007020160020154603c611174919061593d565b603c600e878154811061118957611189615a92565b906000526020600020906007020160050154426111a6919061595c565b6111b09190615929565b14156111f75760009050600e85815481106111cd576111cd615a92565b60009182526020909120600460079092020101546001600160a01b03169350915060019050611283565b603c600e868154811061120c5761120c615a92565b90600052602060002090600702016005015442611229919061595c565b6112339190615929565b600e868154811061124657611246615a92565b906000526020600020906007020160020154603c611264919061593d565b61126e919061595c565b9050600e85815481106111cd576111cd615a92565b9193909250565b61129333612954565b6112af5760405162461bcd60e51b8152600401610c0a906157e1565b3360009081526012602052604090205460ff166112de5760405162461bcd60e51b8152600401610c0a906156e5565b336001600160a01b0316600e85815481106112fb576112fb615a92565b60009182526020909120600460079092020101546001600160a01b0316146113355760405162461bcd60e51b8152600401610c0a906156b0565b80600e858154811061134957611349615a92565b90600052602060002090600702016003018190555081600e858154811061137257611372615a92565b90600052602060002090600702016002018190555082600e858154811061139b5761139b615a92565b9060005260206000209060070201600101819055507f0fcd915268f7fe921a6c99bd903199d2f30c7f65a422416bfd1de6a264b8264d338484846040516113e59493929190615536565b60405180910390a150505050565b60006113ff3383610ba2565b1161140957600080fd5b61141533826001613dbe565b600081815260106020526040812080546001929061143490849061595c565b9250508190555060016007600082825461144e919061595c565b90915550506040517f9e90d55d2f1f115ffe1b87372c45f27f6b3a2b5ba392942167be7845618900949061148590339084906154fc565b60405180910390a150565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114fd57337f000000000000000000000000000000000000000000000000000000000000000060405163073e64fd60e21b8152600401610c0a92919061541b565b6115078282613f2d565b5050565b61151433613f52565b6115305760405162461bcd60e51b8152600401610c0a90615862565b61153a3082613f88565b50565b6001600160a01b03851633148061155957506115598533613c20565b6115c05760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610c0a565b6115cd8585858585613ff3565b5050505050565b6000828152600360205260409020600101546115ef816141d0565b6115f983836141da565b505050565b6006546001600160a01b031633146116285760405162461bcd60e51b8152600401610c0a906158a3565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611659903090600401615407565b60206040518083038186803b15801561167157600080fd5b505afa158015611685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a99190615188565b116116c65760405162461bcd60e51b8152600401610c0a9061572b565b6005546040516370a0823160e01b81526001600160a01b039091169063a9059cbb90839083906370a0823190611700903090600401615407565b60206040518083038186803b15801561171857600080fd5b505afa15801561172c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117509190615188565b6040518363ffffffff1660e01b815260040161176d9291906154fc565b602060405180830381600087803b15801561178757600080fd5b505af115801561179b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150791906150f5565b6001600160a01b038116331461182f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610c0a565b6115078282614260565b60006007541161188b5760405162461bcd60e51b815260206004820152601c60248201527f546865726520617265206e6f206974656d73206176616c6961626c65000000006044820152606401610c0a565b6000600c5460ff1660018111156118a4576118a4615a7c565b146118ff5760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f74206163746976652061742074686973206d6044820152641bdb595b9d60da1b6064820152608401610c0a565b600480546040516370a0823160e01b81526001926001600160a01b03909216916370a082319161193191339101615407565b60206040518083038186803b15801561194957600080fd5b505afa15801561195d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119819190615188565b1015611a01573360009081526013602052604090205460ff16611a015760405162461bcd60e51b815260206004820152603260248201527f5573657220646f6573206e6f74206f776e732061205469636b657420666f722060448201527137b832b73734b733903a34329031b0b9b29760711b6064820152608401610c0a565b600554600b546040516323b872dd60e01b81526001600160a01b03909216916323b872dd91611a369133913091600401615493565b602060405180830381600087803b158015611a5057600080fd5b505af1158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8891906150f5565b506000600754611a96611e1a565b611aa09190615a3c565b9050600080805b600854811015611b7657600081815260106020526040812054611aca9085615911565b905080851115611adc57809350611b63565b819250611ae93084610ba2565b611b2b576000611afa60018561595c565b90505b6000611b093083610ba2565b1115611b1757809350611b29565b80611b21816159a3565b915050611afd565b505b611b483033856001604051806020016040528060008152506142c7565b60078054906000611b58836159a3565b919050555050611b76565b5080611b6e81615a21565b915050611aa7565b50611b8033612954565b611b8d57611b8d336143df565b7fea32e37a2618dbb680c93d891742e9e13b30d184822562a0ee3c09290fd42b4333600b5483604051611bc293929190615515565b60405180910390a1505050565b60608151835114611c345760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610c0a565b600083516001600160401b03811115611c4f57611c4f615aa8565b604051908082528060200260200182016040528015611c78578160200160208202803683370190505b50905060005b8451811015611cf057611cc3858281518110611c9c57611c9c615a92565b6020026020010151858381518110611cb657611cb6615a92565b6020026020010151610ba2565b828281518110611cd557611cd5615a92565b6020908102919091010152611ce981615a21565b9050611c7e565b509392505050565b611d00614c43565b600d8281548110611d1357611d13615a92565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b909104161515608082015292915050565b611d7f33613f52565b611d9b5760405162461bcd60e51b8152600401610c0a90615862565b60008281526011602052604090208054611db4906159ba565b159050611dfb5760405162461bcd60e51b815260206004820152601560248201527443616e206e6f74207365742075726920747769636560581b6044820152606401610c0a565b600082815260116020908152604090912082516115f992840190614c7d565b6040516305d3b1d360e41b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160401b037f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648201526002608482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b158015611f0957600080fd5b505af1158015611f1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c369190615188565b611f4a33612954565b611f665760405162461bcd60e51b8152600401610c0a906157e1565b3360009081526015602052604090205460ff16611fc55760405162461bcd60e51b815260206004820152601c60248201527f5573657220646964206e6f742073656c6c20616e79205469636b6574000000006044820152606401610c0a565b600e8181548110611fd857611fd8615a92565b906000526020600020906007020160010154600014806120625750600e818154811061200657612006615a92565b906000526020600020906007020160020154603c612024919061593d565b603c600e838154811061203957612039615a92565b90600052602060002090600702016005015442612056919061595c565b6120609190615929565b145b6120cc5760405162461bcd60e51b815260206004820152603560248201527f4475726174696f6e206f6620746865205469636b6574206f72206e756d5472696044820152746573206973207374696c6c206176616c6961626c6560581b6064820152608401610c0a565b6000600e82815481106120e1576120e1615a92565b906000526020600020906007020160040160009054906101000a90046001600160a01b03169050600060136000600e858154811061212157612121615a92565b60009182526020808320600460079093020191909101546001600160a01b031683528281019390935260409182018120805494151560ff1995861617905533808252601384528282208054861660011790556015909352208054909216909155600e80548490811061219557612195615a92565b906000526020600020906007020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600e83815481106121df576121df615a92565b906000526020600020906007020160060160006101000a81548160ff021916908315150217905550600160136000600e858154811061222057612220615a92565b60009182526020808320600792909202909101600401546001600160a01b031683528201929092526040908101909120805460ff191692151592909217909155517f5093646a80c0a81f51115fbf5ec8379ecf902ae2ba552c74599cbe844dcb53e390610eb6908390339061541b565b61229933612954565b156122e65760405162461bcd60e51b815260206004820152601f60248201527f412056495020757365722063616e206e6f74206275792061207469636b6574006044820152606401610c0a565b336001600160a01b0316600e828154811061230357612303615a92565b60009182526020909120600460079092020101546001600160a01b0316141561237c5760405162461bcd60e51b815260206004820152602560248201527f596f752063616e206e6f74206275792061207469636b657420746f20796f75726044820152641039b2b63360d91b6064820152608401610c0a565b600e818154811061238f5761238f615a92565b600091825260209091206006600790920201015460ff1615156001146124015760405162461bcd60e51b815260206004820152602160248201527f5469636b6574206973206e6f742063757272656e746c79206176616c6961626c6044820152606560f81b6064820152608401610c0a565b6000600e828154811061241657612416615a92565b6000918252602090912060079091020160040154600554600e80546001600160a01b03938416945092909116916323b872dd9133918690811061245b5761245b615a92565b906000526020600020906007020160040160009054906101000a90046001600160a01b0316600e868154811061249357612493615a92565b9060005260206000209060070201600301546040518463ffffffff1660e01b81526004016124c393929190615493565b602060405180830381600087803b1580156124dd57600080fd5b505af11580156124f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251591906150f5565b5042600e838154811061252a5761252a615a92565b906000526020600020906007020160050181905550600060136000600e858154811061255857612558615a92565b60009182526020808320600792909202909101600401546001600160a01b031683528201929092526040018120805460ff191692151592909217909155600e80546012918391869081106125ae576125ae615a92565b60009182526020808320600792909202909101600401546001600160a01b031683528201929092526040018120805460ff191692151592909217909155600e805460019260159290918690811061260757612607615a92565b60009182526020808320600460079093020191909101546001600160a01b031683528281019390935260409182018120805494151560ff19958616179055338082526013909352208054909216600117909155600e80548490811061266e5761266e615a92565b906000526020600020906007020160040160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000600e83815481106126b8576126b8615a92565b906000526020600020906007020160060160006101000a81548160ff0219169083151502179055507f060f7dd92424d6f1af65d2fe9acba5b63d299cc26cd8eb26403ca371bc9fbfbb828233600e868154811061271757612717615a92565b906000526020600020906007020160030154604051610eb694939291909384526001600160a01b03928316602085015291166040830152606082015260800190565b6006546001600160a01b031633146127835760405162461bcd60e51b8152600401610c0a906158a3565b61153a600082614530565b612796614d01565b600e82815481106127a9576127a9615a92565b60009182526020918290206040805160e0810182526007909302909101805483526001810154938301939093526002830154908201526003820154606082015260048201546001600160a01b03166080820152600582015460a082015260069091015460ff16151560c082015292915050565b61282533612954565b6128415760405162461bcd60e51b8152600401610c0a906157e1565b3360009081526012602052604090205460ff166128705760405162461bcd60e51b8152600401610c0a906156e5565b336001600160a01b0316600e828154811061288d5761288d615a92565b60009182526020909120600460079092020101546001600160a01b0316146128c75760405162461bcd60e51b8152600401610c0a906156b0565b6000600e82815481106128dc576128dc615a92565b60009182526020808320600660079093020191909101805493151560ff1994851617905533808352601282526040808420805486169055601390925291819020805490931660011790925590517f5dbab6b1e9ddd154d6eb51aa5622fb5278ea62a0b5f81d046a945d899490f6319161148591615407565b600480546040516370a0823160e01b815260009283926001600160a01b0316916370a082319161298691879101615407565b60206040518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190615188565b11156129e457506001919050565b506000919050565b919050565b6129fa33613f52565b612a165760405162461bcd60e51b8152600401610c0a90615862565b600b8190556040518181527f06cd74aabc11982a85b554df4d7833623303656fe69bed4db1b0cb3245feebe390602001611485565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61150733838361453a565b336001600160a01b0316600d8381548110612a9e57612a9e615a92565b60009182526020909120600360049092020101546001600160a01b031614612ad85760405162461bcd60e51b8152600401610c0a90615759565b6000600d8381548110612aed57612aed615a92565b906000526020600020906004020160020154905081600d8481548110612b1557612b15615a92565b9060005260206000209060040201600201819055507fb141d00f22a670547caacc412e6489d8edaba6a840df558118363ce1a40d6ed233848385604051611bc29493929190615536565b336001600160a01b0316600d8281548110612b7c57612b7c615a92565b60009182526020909120600360049092020101546001600160a01b031614612bb65760405162461bcd60e51b8152600401610c0a90615759565b336000908152601660205260408120600d8054600193919085908110612bde57612bde615a92565b90600052602060002090600402016000015481526020019081526020016000206000828254612c0d919061595c565b925050819055506000600d8281548110612c2957612c29615a92565b906000526020600020906004020160030160146101000a81548160ff0219169083151502179055507fc9cedcca3d85d6009a562a9e70071f6288adabda9ba7f059589165e75c9cf40433826040516114859291906154fc565b60606000805b600e54811015612d42576000600e8281548110612ca757612ca7615a92565b60009182526020918290206040805160e081018252600790930290910180548352600180820154948401949094526002810154918301919091526003810154606083015260048101546001600160a01b03166080830152600581015460a08301526006015460ff16151560c082018190529092501415612d2f57612d2c600184615911565b92505b5080612d3a81615a21565b915050612c88565b506000816001600160401b03811115612d5d57612d5d615aa8565b604051908082528060200260200182016040528015612d9657816020015b612d83614d01565b815260200190600190039081612d7b5790505b5090506000805b600e54811015612e76576000600e8281548110612dbc57612dbc615a92565b60009182526020918290206040805160e081018252600790930290910180548352600180820154948401949094526002810154918301919091526003810154606083015260048101546001600160a01b03166080830152600581015460a08301526006015460ff16151560c082018190529092501415612e635780848481518110612e4957612e49615a92565b60200260200101819052508280612e5f90615a21565b9350505b5080612e6e81615a21565b915050612d9d565b50909392505050565b612e8833612954565b612ea45760405162461bcd60e51b8152600401610c0a906157e1565b3360009081526012602052604090205460ff1615612f175760405162461bcd60e51b815260206004820152602a60248201527f5573657220697320616c72656164792063757272656e746c792073656c6c696e60448201526919c81848151a58dad95d60b21b6064820152608401610c0a565b3360009081526014602052604090205460ff1615612f8e573360009081526013602052604090205460ff16612f8e5760405162461bcd60e51b815260206004820152601d60248201527f5573657220686173206e6f74207469636b6574206176616c6961626c650000006044820152606401610c0a565b6040805160e081018252600a8054825260208201868152928201858152606083018581523360808501908152600060a08601818152600160c08801818152600e80549283018155845297517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd60079092029182015597517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe89015593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff88015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c400870155517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c401860180546001600160a01b0319166001600160a01b0390921691909117905590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40285015591517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c403909301805460ff1916931515939093179092558154919061311f83615a21565b90915550503360008181526012602090815260408083208054600160ff199182168117909255601484528285208054821690921790915560139092529182902080549091169055517f07814713aba2e13eb5f2470225f7395d33fad1452b70f8427dae73e4d3a5934491611bc291869086908690615536565b60606000805b600d54811015613261576000600d82815481106131bd576131bd615a92565b60009182526020918290206040805160a08101825260049093029091018054835260018082015494840194909452600281015491830191909152600301546001600160a01b038116606083015260ff600160a01b9091041615156080820181905290925014801561323b575061323b8160600151826000015161461b565b1561324e5761324b600184615911565b92505b508061325981615a21565b91505061319e565b506000816001600160401b0381111561327c5761327c615aa8565b6040519080825280602002602001820160405280156132b557816020015b6132a2614c43565b81526020019060019003908161329a5790505b5090506000805b600d54811015612e76576000600d82815481106132db576132db615a92565b60009182526020918290206040805160a08101825260049093029091018054835260018082015494840194909452600281015491830191909152600301546001600160a01b038116606083015260ff600160a01b9091041615156080820181905290925014801561335957506133598160600151826000015161461b565b1561338b578084848151811061337157613371615a92565b6020026020010181905250828061338790615a21565b9350505b508061339681615a21565b9150506132bc565b6006546001600160a01b031633146133c85760405162461bcd60e51b8152600401610c0a906158a3565b6005546040516370a0823160e01b81526000916001600160a01b0316906370a08231906133f9903090600401615407565b60206040518083038186803b15801561341157600080fd5b505afa158015613425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134499190615188565b116134665760405162461bcd60e51b8152600401610c0a9061572b565b60055460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb9061349890859085906004016154fc565b602060405180830381600087803b1580156134b257600080fd5b505af11580156134c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f991906150f5565b60006134f58261463e565b6134fe57600080fd5b60008281526010602052604081205460075461351a9190615929565b9392505050565b60606000805b60085481101561356357600061353d3083610ba2565b1115613551578161354d81615a21565b9250505b8061355b81615a21565b915050613527565b506000816001600160401b0381111561357e5761357e615aa8565b6040519080825280602002602001820160405280156135a7578160200160208202803683370190505b5090506000805b600854811015612e765760006135c43083610ba2565b11156135f657808383815181106135dd576135dd615a92565b6020908102919091010152816135f281615a21565b9250505b8061360081615a21565b9150506135ae565b600082815260036020526040902060010154613623816141d0565b6115f98383614260565b61363633613f52565b6136525760405162461bcd60e51b8152600401610c0a90615862565b6000600c5460ff16600181111561366b5761366b615a7c565b141561368057600c805460ff19166001179055565b600c805460ff19169055565b6000600d82815481106136a1576136a1615a92565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b9091041615156080820152600d8054919250908390811061371657613716615a92565b60009182526020909120600490910201600301546001600160a01b031633141561378e5760405162461bcd60e51b815260206004820152602360248201527f596f752063616e206e6f742062757920616e206974656d20746f20796f75727360448201526232b63360e91b6064820152608401610c0a565b600d82815481106137a1576137a1615a92565b906000526020600020906004020160030160149054906101000a900460ff161515600115151461381d5760405162461bcd60e51b815260206004820152602160248201527f54686973206974656d206973206e6f74206f6e2073616c6520616e796d6f72656044820152601760f91b6064820152608401610c0a565b61382f8160600151826000015161461b565b6138725760405162461bcd60e51b815260206004820152601460248201527324ba32b6903237b2b9903737ba1032bc34b9ba1760611b6044820152606401610c0a565b6040808201516005549151636eb1769f60e11b815290916001600160a01b03169063dd62ed3e906138a9903390309060040161541b565b60206040518083038186803b1580156138c157600080fd5b505afa1580156138d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f99190615188565b10156139475760405162461bcd60e51b815260206004820152601c60248201527f496e73756666696369656e7420455243323020616c6c6f77616e6365000000006044820152606401610c0a565b600554600d80546001600160a01b03909216916323b872dd9133918690811061397257613972615a92565b906000526020600020906004020160030160009054906101000a90046001600160a01b0316600d86815481106139aa576139aa615a92565b9060005260206000209060040201600201546040518463ffffffff1660e01b81526004016139da93929190615493565b602060405180830381600087803b1580156139f457600080fd5b505af1158015613a08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a2c91906150f5565b50613aa5600d8381548110613a4357613a43615a92565b906000526020600020906004020160030160009054906101000a90046001600160a01b031633600d8581548110613a7c57613a7c615a92565b9060005260206000209060040201600001546001604051806020016040528060008152506142c7565b60608101516001600160a01b03166000908152601660209081526040808320845184529091528120805460019290613ade90849061595c565b925050819055506000600d8381548110613afa57613afa615a92565b906000526020600020906004020160030160009054906101000a90046001600160a01b0316905033600d8481548110613b3557613b35615a92565b906000526020600020906004020160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506000600d8481548110613b7f57613b7f615a92565b906000526020600020906004020160030160146101000a81548160ff0219169083151502179055507f642067ff529c9b5b1162502fc8e8a3a91dda56e126a84f2fe38d341236231a82338285600d8781548110613bde57613bde615a92565b600091825260209182902060026004909202010154604080516001600160a01b0396871681529590941691850191909152918301526060820152608001611bc2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b6001600160a01b038516331480613c6a5750613c6a8533613c20565b613cc85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610c0a565b6115cd85858585856142c7565b606060006008546001600160401b03811115613cf357613cf3615aa8565b604051908082528060200260200182016040528015613d1c578160200160208202803683370190505b50905060005b8151811015613d92576001600160a01b0384166000908152601660209081526040808320848452909152902054613d598583610ba2565b613d63919061595c565b828281518110613d7557613d75615a92565b602090810291909101015280613d8a81615a21565b915050613d22565b5092915050565b60006001600160e01b03198216637965db0b60e01b1480610c365750610c3682614656565b6001600160a01b038316613e205760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610c0a565b336000613e2c8461467b565b90506000613e398461467b565b60408051602080820183526000918290528882528181528282206001600160a01b038b1683529052205490915084811015613ec25760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610c0a565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a9052909290881691600080516020615b88833981519152910160405180910390a46040805160208101909152600090525b50505050505050565b80600081518110613f4057613f40615a92565b6020026020010151600f819055505050565b6006546000906001600160a01b0383811691161480613f775750613f77600083612a4b565b613f8057600080fd5b506001919050565b613fa58260085483604051806020016040528060008152506146c6565b613fbe6008548260009182526010602052604090912055565b8060076000828254613fd09190615911565b92505081905550600160086000828254613fea9190615911565b90915550505050565b81518351146140555760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610c0a565b6001600160a01b03841661407b5760405162461bcd60e51b8152600401610c0a9061579c565b3360005b845181101561416257600085828151811061409c5761409c615a92565b6020026020010151905060008583815181106140ba576140ba615a92565b602090810291909101810151600084815280835260408082206001600160a01b038e16835290935291909120549091508181101561410a5760405162461bcd60e51b8152600401610c0a90615818565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290614147908490615911565b925050819055505050508061415b90615a21565b905061407f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516141b29291906155ff565b60405180910390a46141c88187878787876147bf565b505050505050565b61153a813361492a565b6141e48282612a4b565b6115075760008281526003602090815260408083206001600160a01b03851684529091529020805460ff1916600117905561421c3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61426a8282612a4b565b156115075760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001600160a01b0384166142ed5760405162461bcd60e51b8152600401610c0a9061579c565b3360006142f98561467b565b905060006143068561467b565b90506000868152602081815260408083206001600160a01b038c168452909152902054858110156143495760405162461bcd60e51b8152600401610c0a90615818565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290614386908490615911565b909155505060408051888152602081018890526001600160a01b03808b16928c82169291881691600080516020615b88833981519152910160405180910390a46143d4848a8a8a8a8a61498e565b505050505050505050565b60005b600e5481101561150757816001600160a01b0316600e828154811061440957614409615a92565b60009182526020909120600460079092020101546001600160a01b0316141561451e57600e818154811061443f5761443f615a92565b90600052602060002090600702016001015460011461449357600e818154811061446b5761446b615a92565b600091825260208220600160079092020101805491614489836159a3565b919050555061451e565b600e81815481106144a6576144a6615a92565b6000918252602082206001600790920201018054916144c4836159a3565b91905055506000600e82815481106144de576144de615a92565b60009182526020808320600660079093020191909101805493151560ff199485161790556001600160a01b03851682526013905260409020805490911690555b8061452881615a21565b9150506143e2565b61150782826141da565b816001600160a01b0316836001600160a01b031614156145ae5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610c0a565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000806146288484610ba2565b111561463657506001610c36565b506000610c36565b600081815260106020526040812054613f8057600080fd5b60006001600160e01b03198216630271189760e51b1480610c365750610c3682614a58565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106146b5576146b5615a92565b602090810291909101015292915050565b6001600160a01b0384166147265760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610c0a565b3360006147328561467b565b9050600061473f8561467b565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290614771908490615911565b909155505060408051878152602081018790526001600160a01b03808a169260009291871691600080516020615b88833981519152910160405180910390a4613f248360008989898961498e565b6001600160a01b0384163b156141c85760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906148039089908990889088908890600401615435565b602060405180830381600087803b15801561481d57600080fd5b505af192505050801561484d575060408051601f3d908101601f1916820190925261484a9181019061516b565b60015b6148fa57614859615abe565b806308c379a01415614893575061486e615ada565b806148795750614895565b8060405162461bcd60e51b8152600401610c0a9190615655565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610c0a565b6001600160e01b0319811663bc197c8160e01b14613f245760405162461bcd60e51b8152600401610c0a90615668565b6149348282612a4b565b6115075761494c816001600160a01b03166014614aa8565b614957836020614aa8565b604051602001614968929190615398565b60408051601f198184030181529082905262461bcd60e51b8252610c0a91600401615655565b6001600160a01b0384163b156141c85760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906149d290899089908890889088906004016154b7565b602060405180830381600087803b1580156149ec57600080fd5b505af1925050508015614a1c575060408051601f3d908101601f19168201909252614a199181019061516b565b60015b614a2857614859615abe565b6001600160e01b0319811663f23a6e6160e01b14613f245760405162461bcd60e51b8152600401610c0a90615668565b60006001600160e01b03198216636cdb3d1360e11b1480614a8957506001600160e01b031982166303a24d0760e21b145b80610c3657506301ffc9a760e01b6001600160e01b0319831614610c36565b60606000614ab783600261593d565b614ac2906002615911565b6001600160401b03811115614ad957614ad9615aa8565b6040519080825280601f01601f191660200182016040528015614b03576020820181803683370190505b509050600360fc1b81600081518110614b1e57614b1e615a92565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110614b4d57614b4d615a92565b60200101906001600160f81b031916908160001a9053506000614b7184600261593d565b614b7c906001615911565b90505b6001811115614bf4576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110614bb057614bb0615a92565b1a60f81b828281518110614bc657614bc6615a92565b60200101906001600160f81b031916908160001a90535060049490941c93614bed816159a3565b9050614b7f565b50831561351a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610c0a565b6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b828054614c89906159ba565b90600052602060002090601f016020900481019282614cab5760008555614cf1565b82601f10614cc457805160ff1916838001178555614cf1565b82800160010185558215614cf1579182015b82811115614cf1578251825591602001919060010190614cd6565b50614cfd929150614d49565b5090565b6040518060e001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016000151581525090565b5b80821115614cfd5760008155600101614d4a565b60006001600160401b03831115614d7757614d77615aa8565b604051614d8e601f8501601f1916602001826159f5565b809150838152848484011115614da357600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146129ec57600080fd5b600082601f830112614de357600080fd5b81356020614df0826158ee565b604051614dfd82826159f5565b8381528281019150858301600585901b87018401881015614e1d57600080fd5b60005b85811015614e3c57813584529284019290840190600101614e20565b5090979650505050505050565b600082601f830112614e5a57600080fd5b61351a83833560208501614d5e565b600060208284031215614e7b57600080fd5b61351a82614dbb565b60008060408385031215614e9757600080fd5b614ea083614dbb565b9150614eae60208401614dbb565b90509250929050565b600080600080600060a08688031215614ecf57600080fd5b614ed886614dbb565b9450614ee660208701614dbb565b935060408601356001600160401b0380821115614f0257600080fd5b614f0e89838a01614dd2565b94506060880135915080821115614f2457600080fd5b614f3089838a01614dd2565b93506080880135915080821115614f4657600080fd5b50614f5388828901614e49565b9150509295509295909350565b600080600080600060a08688031215614f7857600080fd5b614f8186614dbb565b9450614f8f60208701614dbb565b9350604086013592506060860135915060808601356001600160401b03811115614fb857600080fd5b614f5388828901614e49565b60008060408385031215614fd757600080fd5b614fe083614dbb565b91506020830135614ff081615b63565b809150509250929050565b6000806040838503121561500e57600080fd5b61501783614dbb565b946020939093013593505050565b6000806040838503121561503857600080fd5b82356001600160401b038082111561504f57600080fd5b818501915085601f83011261506357600080fd5b81356020615070826158ee565b60405161507d82826159f5565b8381528281019150858301600585901b870184018b101561509d57600080fd5b600096505b848710156150c7576150b381614dbb565b8352600196909601959183019183016150a2565b50965050860135925050808211156150de57600080fd5b506150eb85828601614dd2565b9150509250929050565b60006020828403121561510757600080fd5b815161351a81615b63565b60006020828403121561512457600080fd5b5035919050565b6000806040838503121561513e57600080fd5b82359150614eae60208401614dbb565b60006020828403121561516057600080fd5b813561351a81615b71565b60006020828403121561517d57600080fd5b815161351a81615b71565b60006020828403121561519a57600080fd5b5051919050565b600080604083850312156151b457600080fd5b8235915060208301356001600160401b038111156151d157600080fd5b6150eb85828601614dd2565b600080604083850312156151f057600080fd5b8235915060208301356001600160401b0381111561520d57600080fd5b8301601f8101851361521e57600080fd5b6150eb85823560208401614d5e565b6000806040838503121561524057600080fd5b50508035926020909101359150565b60008060006060848603121561526457600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561529157600080fd5b5050823594602084013594506040840135936060013592509050565b600081518084526020808501945080840160005b838110156152dd578151875295820195908201906001016152c1565b509495945050505050565b60008151808452615300816020860160208601615973565b601f01601f19169290920160200192915050565b805182526020808201519083015260408082015190830152606080820151908301526080808201516001600160a01b03169083015260a0808201519083015260c0908101511515910152565b8051825260208082015190830152604080820151908301526060808201516001600160a01b0316908301526080908101511515910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152600083516153ca816017850160208801615973565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516153fb816028840160208801615973565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0386811682528516602082015260a060408201819052600090615461908301866152ad565b828103606084015261547381866152ad565b9050828103608084015261548781856152e8565b98975050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906154f1908301846152e8565b979650505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6020808252825182820181905260009190848201906040850190845b8181101561559e5761558b838551615314565b9284019260e09290920191600101615578565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561559e576155d9838551615360565b9284019260a092909201916001016155c6565b60208152600061351a60208301846152ad565b60408152600061561260408301856152ad565b828103602084015261562481856152ad565b95945050505050565b602081016002831061564f57634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061351a60208301846152e8565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6020808252818101527f55736572206973206e6f74206f776e6572206f662074686973207469636b6574604082015260600190565b60208082526026908201527f55736572206973206e6f742063757272656e746c792073656c6c696e67206120604082015265151a58dad95d60d21b606082015260800190565b6020808252601490820152734e6f2066756e647320746f20776974686472617760601b604082015260600190565b60208082526023908201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320697460408201526232b69760e91b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252601d908201527f5573657220646f6573206e6f74206f776e732061204d7243727970746f000000604082015260600190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526021908201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696040820152603760f91b606082015260800190565b6020808252601590820152742ab9b2b91034b9903737ba103a34329037bbb732b960591b604082015260600190565b60e08101610c368284615314565b60a08101610c368284615360565b60006001600160401b0382111561590757615907615aa8565b5060051b60200190565b6000821982111561592457615924615a50565b500190565b60008261593857615938615a66565b500490565b600081600019048311821515161561595757615957615a50565b500290565b60008282101561596e5761596e615a50565b500390565b60005b8381101561598e578181015183820152602001615976565b8381111561599d576000848401525b50505050565b6000816159b2576159b2615a50565b506000190190565b600181811c908216806159ce57607f821691505b602082108114156159ef57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715615a1a57615a1a615aa8565b6040525050565b6000600019821415615a3557615a35615a50565b5060010190565b600082615a4b57615a4b615a66565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115615ad75760046000803e5060005160e01c5b90565b600060443d1015615ae85790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715615b1757505050505090565b8285019150815181811115615b2f5750505050505090565b843d8701016020828501011115615b495750505050505090565b615b58602082860101876159f5565b509095945050505050565b801515811461153a57600080fd5b6001600160e01b03198116811461153a57600080fdfec3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62a2646970667358221220608fd6f585a2f77f85275024d90facd38bf26aac4c29714a21cc50afee2a0ee564736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_randomNumber()": {
        "details": "Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened"
      },
      "_rarityOfItem(uint256)": {
        "details": "- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buyItem(uint256)": {
        "details": "- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event "
      },
      "buyTicket(uint256)": {
        "details": "- Should check that user is NOT Vip -> does make sense that a VIP user buys a ticket - Should check that user has a listed ticket - Transfer RacksToken from buyer to seller - Update mappings variables - Emit event"
      },
      "changeItemPrice(uint256,uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event"
      },
      "changeTicketConditions(uint256,uint256,uint256,uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event"
      },
      "claimTicketBack(uint256)": {
        "details": "- Check that claimer is lending a Ticket - Check that duration of the Ticket is over -> block.timestamp is in seconds and duration in hours  -> transform duration into seconds  - Update mappings - Emit event"
      },
      "flipContractState()": {
        "details": "Only callable by the Owner or an admin"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTicketDurationLeft(uint256)": {
        "details": "This function returns 2 parameters - uint256: timeLeft  - bool: false if numTries == 0         true if numTries > 0"
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isVip(address)": {
        "details": "- Require users MrCrypro's balance is > 0"
      },
      "listItem(uint256)": {
        "details": "Only callable by the Owner"
      },
      "listItemOnMarket(uint256,uint256)": {
        "details": "- Needs to check balanceOf item trying to be sold - Needs to check if user has correctly done an Approve for the item transfer in case it is sold - Needs to transfer item  - Update s_marketInventory - Update marketItems array - Emit event "
      },
      "listTicket(uint256,uint256,uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Check is user has had a ticket before     - If so: check that is has ticket now     - if not: create ticket (first ticket in live for this user) - Should check that user is NOT currently selling another ticket -> Users can only sell 1 ticket at the same time - Include ticket on array - Increase s_ticketCount - Set mapping to true - Emit event"
      },
      "openCase()": {
        "details": " - Should check that user owns a Ticket -> modifier - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setAdmin(address)": {
        "details": "Only callable by the Owner"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setCasePrice(uint256)": {
        "details": "Only callable by the Owner"
      },
      "setTokenUri(uint256,string)": {
        "details": "- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set"
      },
      "supplyOfItem(uint256)": {
        "details": "- Getter of s_maxSupply mapping"
      },
      "unListItem(uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Update marketInventory - Update item's sold variable - Emit event"
      },
      "unListTicket(uint256)": {
        "details": "- Should check that user is Vip (Modifier) - Should check that user has a listed ticket - Emit event"
      },
      "uri(uint256)": {
        "details": "- returns information stored in s_uris mapping - Any user can check this information"
      },
      "viewItems(address)": {
        "details": "Copy users inventory in an empty array and returns it"
      },
      "withdrawAllFunds(address)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to"
      },
      "withdrawFunds(address,uint256)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CaseOpened(address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Standard variables"
      },
      "_randomNumber()": {
        "notice": "Used to get an actually Random Number -> to pick an item when openning a case"
      },
      "_rarityOfItem(uint256)": {
        "notice": "Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item"
      },
      "buyItem(uint256)": {
        "notice": "Function used to buy an item on the marketplace"
      },
      "buyTicket(uint256)": {
        "notice": "This function is used to buy a caseTicket"
      },
      "caseLiquidity()": {
        "notice": "Returns all the items the case can drop"
      },
      "changeItemPrice(uint256,uint256)": {
        "notice": "Function used to change price from item listed "
      },
      "changeTicketConditions(uint256,uint256,uint256,uint256)": {
        "notice": "This function is used for a VIP user to change 'Case Tickets' price and tries on the MarketPlace"
      },
      "claimTicketBack(uint256)": {
        "notice": "Function used to claim Ticket back when duration is over"
      },
      "exchangeItem(uint256)": {
        "notice": "Function used to exchange a token item for a real physical clothe."
      },
      "flipContractState()": {
        "notice": "Change contract state from Active to Inactive and viceversa"
      },
      "getITicketsOnSale()": {
        "notice": "Function used to return every ticket that are currently on sale"
      },
      "getItemsOnSale()": {
        "notice": "function used to return every item that is on sale on the MarketPlace"
      },
      "getMarketItem(uint256)": {
        "notice": "Function used to return items that are currently on sale"
      },
      "getMarketTicket(uint256)": {
        "notice": "Function used to return ticket that are currently on sale"
      },
      "getTicketDurationLeft(uint256)": {
        "notice": "Function used to view how much time is left for lended Ticket"
      },
      "i_vrfCoordinator()": {
        "notice": "VRF Variables"
      },
      "isVip(address)": {
        "notice": "Check if user owns at least 1 MrCrypto"
      },
      "listItem(uint256)": {
        "notice": "List a new item to the avaliable collection"
      },
      "listItemOnMarket(uint256,uint256)": {
        "notice": "Function used to sell an item on the marketplace"
      },
      "listTicket(uint256,uint256,uint256)": {
        "notice": "This function is used for a VIP user to list 'Case Tickets' on the MarketPlace"
      },
      "openCase()": {
        "notice": "Function used to 'open a case' and get an item"
      },
      "setAdmin(address)": {
        "notice": "Set new Admin"
      },
      "setCasePrice(uint256)": {
        "notice": "Change price of the box"
      },
      "setTokenUri(uint256,string)": {
        "notice": "Used to set tokenURI to specific item "
      },
      "supplyOfItem(uint256)": {
        "notice": "Returns maxSupply of specific item (by tokenId)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Need to override supportsInterface function because Contract is ERC1155 and AccessControl"
      },
      "unListItem(uint256)": {
        "notice": "Function used to unlist an item from marketplace"
      },
      "unListTicket(uint256)": {
        "notice": "This function is used for a VIP user to unlist 'Case Tickets' on the MarketPlace"
      },
      "uri(uint256)": {
        "notice": "Used to return token URI by inserting tokenID"
      },
      "viewItems(address)": {
        "notice": "Returns all the items inside the user's inventory without the ones on Market Sale(Could be used by the user to check his inventory or to check someone else inventory by address)"
      },
      "withdrawAllFunds(address)": {
        "notice": "Used to withdraw ALL funds"
      },
      "withdrawFunds(address,uint256)": {
        "notice": "Used to withdraw specific amount of funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 670,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 676,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 678,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)166_storage)"
      },
      {
        "astId": 10253,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "MR_CRYPTO",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC721Enumerable)3850"
      },
      {
        "astId": 10256,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "racksToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2794"
      },
      {
        "astId": 10262,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 10264,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_maxTotalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10266,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_tokenCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10268,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_marketCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 10270,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_ticketCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 10272,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "casePrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10275,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_contractState",
        "offset": 0,
        "slot": "12",
        "type": "t_enum(ContractState)10249"
      },
      {
        "astId": 10279,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_marketItems",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(itemOnSale)4446_storage)dyn_storage"
      },
      {
        "astId": 10283,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "_tickets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(caseTicket)4461_storage)dyn_storage"
      },
      {
        "astId": 10301,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_randomWord",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 10306,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10310,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_uris",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 10314,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_isSellingTicket",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10318,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_hasTicket",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10322,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_hadTicket",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10326,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_ticketIsLended",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10332,
        "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
        "label": "s_marketInventory",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(caseTicket)4461_storage)dyn_storage": {
        "base": "t_struct(caseTicket)4461_storage",
        "encoding": "dynamic_array",
        "label": "struct IRacksItems.caseTicket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(itemOnSale)4446_storage)dyn_storage": {
        "base": "t_struct(itemOnSale)4446_storage",
        "encoding": "dynamic_array",
        "label": "struct IRacksItems.itemOnSale[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2794": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721Enumerable)3850": {
        "encoding": "inplace",
        "label": "contract IERC721Enumerable",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)10249": {
        "encoding": "inplace",
        "label": "enum RacksItemsv4.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)166_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)166_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)166_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 163,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 165,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(caseTicket)4461_storage": {
        "encoding": "inplace",
        "label": "struct IRacksItems.caseTicket",
        "members": [
          {
            "astId": 4448,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "ticketId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4450,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "numTries",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4452,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4454,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4456,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "owner",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4458,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "timeWhenSold",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "isAvaliable",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(itemOnSale)4446_storage": {
        "encoding": "inplace",
        "label": "struct IRacksItems.itemOnSale",
        "members": [
          {
            "astId": 4437,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4439,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "marketItemId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4441,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4443,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "itemOwner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4445,
            "contract": "contracts/RacksItemsv4.sol:RacksItemsv4",
            "label": "isOnSale",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}