{
  "address": "0x54be0b16B25Bb77C3Ea90d62B481d01f7930Ea10",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_racksTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "casePrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "item",
          "type": "uint256"
        }
      ],
      "name": "CaseOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "casePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "itemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "itemExchanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "itemPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "sellingItem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListedItem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_randomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "_rarityOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "casePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "changeItemPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "exchangeItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "flipContractState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCasePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getItemsOnSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItems.itemOnSale[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "getMarketItem",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "marketItemId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "sold",
              "type": "bool"
            }
          ],
          "internalType": "struct RacksItems.itemOnSale",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_MrCryptoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isVip",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "itemSupply",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openCase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "removeListRacksMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "removeSingleRacksMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_contractState",
      "outputs": [
        {
          "internalType": "enum RacksItems.ContractState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_randomWord",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "sellItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setCasePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        }
      ],
      "name": "setListRacksMembers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setSingleRacksMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setTokenUri",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "supplyOfItem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "marketItemId",
          "type": "uint256"
        }
      ],
      "name": "unListItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "viewItems",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "withdrawAllFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4c110465c3018e621364167a345270a726415202e08edd756b2a45403d4a07f8",
  "receipt": {
    "to": null,
    "from": "0x60ff9eF432e9B5dAFDA2AC51139Cd7AD1f24c233",
    "contractAddress": "0x54be0b16B25Bb77C3Ea90d62B481d01f7930Ea10",
    "transactionIndex": 27,
    "gasUsed": "3937109",
    "logsBloom": "0x
    "blockHash": "0x6e470b2f95cb4a04babd67dab2a7561c40333f1f14b112b363cdc2b5f3410a5a",
    "transactionHash": "0x4c110465c3018e621364167a345270a726415202e08edd756b2a45403d4a07f8",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 26463953,
        "transactionHash": "0x4c110465c3018e621364167a345270a726415202e08edd756b2a45403d4a07f8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000060ff9ef432e9b5dafda2ac51139cd7ad1f24c233",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003b073c9378e487000000000000000000000000000000000000000000000000057307f29742a7b500000000000000000000000000000000000000000000187569b4158ba1e000ae000000000000000000000000000000000000000000000000053800b603c9c32e00000000000000000000000000000000000000000000187569ef1cc83558e535",
        "logIndex": 245,
        "blockHash": "0x6e470b2f95cb4a04babd67dab2a7561c40333f1f14b112b363cdc2b5f3410a5a"
      }
    ],
    "blockNumber": 26463953,
    "cumulativeGasUsed": "7801967",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7a1BaC17Ccc5b313516C5E16fb24f7659aA5ebed",
    "0x4b09e658ed251bcafeebbc69400383d49f344ace09b9576fe248bb02c003fe9f",
    "286",
    "100000",
    "0x9EdceDc5600c644056d9fe1CaF8d46Bb286A770a"
  ],
  "numDeployments": 23,
  "solcInputHash": "3949b4d0c4b4894623129f3d1968e6a3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_racksTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"casePrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"item\",\"type\":\"uint256\"}],\"name\":\"CaseOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"casePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"itemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"itemExchanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"itemPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellingItem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListedItem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_randomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"_rarityOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"casePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"changeItemPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"exchangeItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flipContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCasePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getItemsOnSale\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItems.itemOnSale[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"getMarketItem\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"struct RacksItems.itemOnSale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_MrCryptoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isVip\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"itemSupply\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openCase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"removeListRacksMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"removeSingleRacksMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_contractState\",\"outputs\":[{\"internalType\":\"enum RacksItems.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_randomWord\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"sellItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setCasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"setListRacksMembers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setSingleRacksMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setTokenUri\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"supplyOfItem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"marketItemId\",\"type\":\"uint256\"}],\"name\":\"unListItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"viewItems\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"withdrawAllFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_randomNumber()\":{\"details\":\"Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened\"},\"_rarityOfItem(uint256)\":{\"details\":\"- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply\"},\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"buyItem(uint256)\":{\"details\":\"- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event \"},\"changeItemPrice(uint256,uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event\"},\"flipContractState()\":{\"details\":\"Only callable by the Owner or an admin\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"isVip(address)\":{\"details\":\"- Require users MrCrypro's balance is > ' - Require that RacksMembers user's attribute is true\"},\"listItem(uint256)\":{\"details\":\"Only callable by the Owner\"},\"openCase()\":{\"details\":\" - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item\"},\"removeListRacksMembers(address[])\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false\"},\"removeSingleRacksMember(address)\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"sellItem(uint256,uint256)\":{\"details\":\"- Needs to check balanceOf item trying to be sold - Needs to transfer item  - Update marketItems array - Emit event \"},\"setAdmin(address)\":{\"details\":\"Only callable by the Owner\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setCasePrice(uint256)\":{\"details\":\"Only callable by the Owner\"},\"setListRacksMembers(address[])\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true\"},\"setSingleRacksMember(address)\":{\"details\":\"Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true\"},\"setTokenUri(uint256,string)\":{\"details\":\"- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set\"},\"supplyOfItem(uint256)\":{\"details\":\"- Getter of s_maxSupply mapping\"},\"unListItem(uint256)\":{\"details\":\"- Needs to check that user is trying to unlist an item he owns - Needs to transfer item from contract to user address - Update item's sold variable - Emit event\"},\"uri(uint256)\":{\"details\":\"- returns information stored in s_uris mapping - Any user can check this information\"},\"viewItems(address)\":{\"details\":\"Copy users inventory in an empty array and returns it\"},\"withdrawAllFunds(address)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to\"},\"withdrawFunds(address,uint256)\":{\"details\":\" - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer\"}},\"version\":1},\"userdoc\":{\"events\":{\"CaseOpened(address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"ADMIN_ROLE()\":{\"notice\":\"Standard variables\"},\"_randomNumber()\":{\"notice\":\"Used to get an actually Random Number -> to pick an item when openning a case\"},\"_rarityOfItem(uint256)\":{\"notice\":\"Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item\"},\"buyItem(uint256)\":{\"notice\":\"Function used to buy an item on the marketplace\"},\"changeItemPrice(uint256,uint256)\":{\"notice\":\"Function used to change price from item listed \"},\"exchangeItem(uint256)\":{\"notice\":\"Function used to exchange a token item for a real physical clothe.\"},\"flipContractState()\":{\"notice\":\"Change contract state from Active to Inactive and viceversa\"},\"getCasePrice()\":{\"notice\":\"View case price\"},\"getMarketItem(uint256)\":{\"notice\":\"Function used to return items that are currently on sale\"},\"i_vrfCoordinator()\":{\"notice\":\"VRF Variables\"},\"isVip(address)\":{\"notice\":\"Check if user is RacksMembers and owns at least 1 MrCrypto\"},\"listItem(uint256)\":{\"notice\":\"List a new item to the avaliable collection\"},\"openCase()\":{\"notice\":\"Function used to 'open a case' and get an item\"},\"removeListRacksMembers(address[])\":{\"notice\":\"Set RacksMember attribute as false for a list of users that are Members (array)\"},\"removeSingleRacksMember(address)\":{\"notice\":\"Set RacksMember attribute as false for a user that was Racks Member before but it is not now\"},\"sellItem(uint256,uint256)\":{\"notice\":\"Function used to sell an item on the marketplace\"},\"setAdmin(address)\":{\"notice\":\"Set new Admin\"},\"setCasePrice(uint256)\":{\"notice\":\"Change price of the box\"},\"setListRacksMembers(address[])\":{\"notice\":\"Set RacksMember attribute as true for a list of users that are Members (array)\"},\"setSingleRacksMember(address)\":{\"notice\":\"Set RacksMember attribute as true for a user that is Member\"},\"setTokenUri(uint256,string)\":{\"notice\":\"Used to set tokenURI to specific item \"},\"supplyOfItem(uint256)\":{\"notice\":\"Returns maxSupply of specific item (by tokenId)\"},\"supportsInterface(bytes4)\":{\"notice\":\"Need to override supportsInterface function because Contract is ERC1155 and AccessControl\"},\"unListItem(uint256)\":{\"notice\":\"Function used to unlist an item from marketplace\"},\"uri(uint256)\":{\"notice\":\"Used to return token URI by inserting tokenID\"},\"viewItems(address)\":{\"notice\":\"Returns all the items inside the user's inventory (Could be used by the user to check his inventory or to check someone else inventory by address)\"},\"withdrawAllFunds(address)\":{\"notice\":\"Used to withdraw ALL funds\"},\"withdrawFunds(address,uint256)\":{\"notice\":\"Used to withdraw specific amount of funds\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RacksItems.sol\":\"RacksItems\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _balances[id][to] += amount;\\n        emit TransferSingle(operator, address(0), to, id, amount);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _afterTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `from`\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address from,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n        uint256[] memory ids = _asSingletonArray(id);\\n        uint256[] memory amounts = _asSingletonArray(amount);\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, from, address(0), id, amount);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address from,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, from, address(0), ids, amounts);\\n\\n        _afterTokenTransfer(operator, from, address(0), ids, amounts, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC1155: setting approval status for self\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0x74216d303b87202736b6d571fc3e9b530aa98ff017a41516170f1c555e518669\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x2e024ca51ce5abe16c0d34e6992a1104f356e2244eb4ccbec970435e8b3405e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RacksItems.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\"; // define roles\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\"; // erc1155 tokens\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\"; // contract should be ERC1155 holder to receive ERC1155 tokens\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\"; // to instanciate MrCrypto object\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\"; // to work with RacksToken\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\"; // to work with COORDINATOR and VRF\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\"; // to use functionalities for Chainlink VRF\\n\\ncontract RacksItems is ERC1155, ERC1155Holder, AccessControl, VRFConsumerBaseV2 { // VRFv2SubscriptionManager\\n   \\n  /**\\n  * @notice Enum for Contract state -> to let user enter call some functions or not\\n  */\\n  enum ContractState {   \\n    Active,\\n    Inactive\\n  }\\n\\n  /**\\n  * @notice Struct for Items on the Marketplace\\n  */\\n  struct itemOnSale{\\n        uint tokenId;\\n        uint marketItemId;\\n        uint price;\\n        address seller;\\n        bool sold;\\n  }\\n\\n  /// @notice tokens\\n  IERC721 MR_CRYPTO;\\n  address public constant i_MrCryptoAddress = 0xeF453154766505FEB9dBF0a58E6990fd6eB66969;\\n  IERC20 racksToken;\\n  \\n  /// @notice Standard variables\\n  bytes32 public constant ADMIN_ROLE = 0x00;\\n  address private _owner;\\n  uint256 private s_maxTotalSupply;\\n  uint256 private s_tokenCount;\\n  uint private _marketCount;\\n  uint256 public casePrice; // Change to RacksToken\\n  bool public contractActive = true;\\n  ContractState public s_contractState;\\n  itemOnSale[] _marketItems;\\n\\n  /// @notice VRF Variables\\n  VRFCoordinatorV2Interface public immutable i_vrfCoordinator; \\n  bytes32 public immutable i_gasLane;\\n  uint64 public immutable i_subscriptionId;\\n  uint32 public immutable i_callbackGasLimit;\\n  uint16 public constant REQUEST_CONFIRMATIONS = 3; \\n  uint32 public constant NUM_WORDS = 2; \\n  uint256 public s_randomWord; // random Number we get from Chainlink VRF\\n  \\n  /// @notice Mappings\\n  mapping(address => bool) private s_gotRacksMembers;\\n  mapping(uint => uint) private s_maxSupply;\\n  mapping (uint256 => string) private s_uris; \\n\\n  /// @notice Events\\n  event CaseOpened(address user, uint256 casePrice, uint256 item);\\n  event casePriceChanged(uint256 newPrice);\\n  event itemExchanged(address user, uint256 tokenId);\\n  event sellingItem(address user, uint256 tokenId, uint256 price);\\n  event itemBought(address buyer, address seller, uint256 marketItemId, uint256 price);\\n  event unListedItem(address owner, uint256 marketItemId);\\n  event itemPriceChanged(address owner, uint256 marketItemId, uint256 oldPrice, uint256 newPrice);\\n  \\n  /// @notice Modifiers\\n  /// @notice Check that person calling a function is the owner of the Contract\\n  modifier onlyOwner() {\\n      require(msg.sender == _owner, \\\"User is not the owner\\\");\\n      _;\\n  }\\n\\n  /// @notice Check that user is Member and owns at least 1 MrCrypto\\n  modifier onlyVIP() {\\n      require(isVip(msg.sender), \\\"User is not RacksMembers or does not owns a MrCrypto\\\");\\n      _;\\n  }\\n\\n  modifier onlyOwnerOrAdmin() {\\n    require(_isOwnerOrAdmin(msg.sender), \\\"User is not the Owner or an Admin\\\");\\n    _;\\n  }\\n\\n  /// @notice Check if contract state is Active\\n  modifier contractIsActive() {\\n    require(s_contractState == ContractState.Active, \\\"Contract is not active at this moment\\\");\\n    _;\\n  }\\n\\n  constructor(address vrfCoordinatorV2, bytes32 gasLane, uint64 subscriptionId, uint32 callbackGasLimit, address _racksTokenAddress) \\n  VRFConsumerBaseV2(vrfCoordinatorV2)\\n  ERC1155(\\\"\\\"){\\n    /**\\n    * Initialization of Chainlink VRF variables\\n    */\\n    i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2); \\n    i_gasLane = gasLane; \\n    i_subscriptionId = subscriptionId;\\n    i_callbackGasLimit = callbackGasLimit; \\n\\n    /**\\n    * Initialization of RacksItem contract variables\\n    */\\n    MR_CRYPTO = IERC721(i_MrCryptoAddress);\\n    racksToken = IERC20(_racksTokenAddress);\\n    _owner = msg.sender;\\n    s_tokenCount = 0;\\n    casePrice = 1;\\n    s_contractState = ContractState.Active;\\n\\n    /**\\n    * Mint of initial supply\\n    _mintSupply(address(this), 100000); // Jeans\\n    _mintSupply(address(this), 1000); // Hoddie \\n    _mintSupply(address(this), 50000); // Watch\\n    _mintSupply(address(this), 1000); // Coat\\n    _mintSupply(address(this), 30000); // Shoes\\n     */\\n  }\\n\\n  /** \\n  * @notice Need to override supportsInterface function because Contract is ERC1155 and AccessControl\\n  */\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155, ERC1155Receiver, AccessControl) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n\\n\\n  // FUNCTIONS RELATED WITH THE CASE\\n\\n  /**\\n  * @notice Change price of the box\\n  * @dev Only callable by the Owner\\n  */\\n  function setCasePrice(uint256 price) public onlyOwnerOrAdmin {\\n    casePrice = price;\\n    emit casePriceChanged(price);\\n  }\\n\\n  /**\\n  * @notice View case price\\n  */\\n  function getCasePrice() public view returns(uint256) {\\n    return casePrice;\\n  }\\n\\n  /**\\n  * @notice Used to get an actually Random Number -> to pick an item when openning a case\\n  * @dev Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object\\n  * set as internal because is going to be called only when a case is opened\\n  */\\n  function _randomNumber() public returns(uint256) {\\n  uint256 s_requestedNumber = i_vrfCoordinator.requestRandomWords(i_gasLane, i_subscriptionId, REQUEST_CONFIRMATIONS, i_callbackGasLimit, NUM_WORDS);\\n  return s_requestedNumber;\\n  }\\n\\n  /**\\n  * @notice Function to actually pick a winner \\n  * @dev \\n  * - randomWords -> array of randomWords\\n  */\\n  function fulfillRandomWords(uint256 /* requestId */, uint256[] memory randomWords) internal override {\\n    s_randomWord = randomWords[0]; // just in case random number is very long we apply modular function \\n  }\\n\\n   /**\\n  * @notice Function used to 'open a case' and get an item\\n  * @dev \\n  * - Should check that msg.value is bigger than casePrice\\n  * - Should transfer msg.value to the contract\\n  * - Internally calls randomNumber() \\n  * - Apply modular function for the randomNumber to be between 0 and totalSupply of items\\n  * - Should choose an item\\n  */\\n  function openCase() public /*onlyVIP*/ contractIsActive {  \\n    racksToken.transferFrom(msg.sender, address(this), casePrice);\\n    uint256 randomNumber = _randomNumber()  % s_maxTotalSupply;\\n    uint256 totalCount = 0;\\n    uint256 item;\\n\\n    for(uint256 i = 0 ; i < s_tokenCount; i++) {\\n      uint256 _newTotalCount = totalCount + s_maxSupply[i] ;\\n      if(randomNumber > _newTotalCount) {\\n        totalCount = _newTotalCount;\\n      }else {\\n        item = i;\\n        if(balanceOf(address(this),item)==0){\\n          for(uint256 j = item-1; j >= 0; j--){\\n            if (balanceOf(address(this),j)>0){\\n              item = j;\\n              break;\\n            }\\n          }\\n        }\\n        _safeTransferFrom(address(this), msg.sender, item , 1,\\\"\\\");\\n        break;\\n      }\\n    }\\n    emit CaseOpened(msg.sender, casePrice, item);\\n  }\\n\\n\\n  // FUNCTIONS RELATED TO ITEMS\\n\\n  /**\\n  * @notice Returns maxSupply of specific item (by tokenId)\\n  * @dev - Getter of s_maxSupply mapping\\n  */\\n  function supplyOfItem(uint256 tokenId) public view returns(uint) {\\n    return s_maxSupply[tokenId];\\n  }\\n\\n  /**\\n  * @notice Check that item exists (by tokenId)\\n  */\\n  function _itemExists(uint256 tokenId) internal view returns (bool) {\\n    require(s_maxSupply[tokenId] > 0);\\n    return true;\\n  }\\n\\n  /**\\n  * @notice Calculate chance of receiving an specific item\\n  * - As higher is result higher is the rarity of the item\\n  * @dev - Requires that tokenId exists (item is listed)\\n  * - chance is calculated as item supply divided by total items supply\\n  */\\n  function _rarityOfItem(uint256 tokenId) public virtual view returns(uint256) {\\n    require(_itemExists(tokenId));\\n    uint256 result = s_maxTotalSupply / s_maxSupply[tokenId];\\n    return result;\\n  }\\n\\n  /**\\n  * @notice Returns all the items inside the user's inventory (Could be used by the\\n  * user to check his inventory or to check someone else inventory by address)\\n  * @dev Copy users inventory in an empty array and returns it\\n  */\\n  function viewItems(address owner) public view returns(uint256[] memory) { \\n    uint256[] memory inventory = new uint [](s_tokenCount);\\n    for(uint256 i=0 ; i<inventory.length; i++) {\\n      inventory[i]=balanceOf(owner,i);\\n    }\\n    return inventory;\\n  }\\n\\n  /**\\n  * @notice List a new item to the avaliable collection\\n  * @dev Only callable by the Owner\\n  */\\n  function listItem(uint256 itemSupply) public onlyOwnerOrAdmin {\\n    _mintSupply(address(this), itemSupply);\\n  }\\n\\n  /**\\n  * @notice Mint supply tokens of each Item\\n  * @dev Declared internal because it is called inside the contructor\\n  * - call _mint function\\n  * - call set maxSupply function\\n  * - updates TotalMaxSupply of Items\\n  * - updates s_tokenCount -> Each items has associated an Id (e.g: Jeans -> Id: 0, Hoddie -> Id: 1,\\n  * we increment s_tokenCount so next time we call _mintSupply a new type of item is going to be minted)\\n  * - The items (tokens are minted by this contract and deposited into this contract address)\\n  */\\n  function _mintSupply(address receiver, uint256 amount) internal {\\n      _mint(receiver, s_tokenCount, amount, \\\"\\\");\\n      _setMaxSupply(s_tokenCount, amount);\\n      s_maxTotalSupply += amount;\\n      s_tokenCount += 1;\\n  }\\n\\n  /**\\n  * @notice Function used to set maxSupply of each item\\n  */\\n  function _setMaxSupply(uint256 tokenId, uint256 amount) internal {\\n      s_maxSupply[tokenId] = amount;\\n  }\\n\\n\\n  // FUNCTIONS RELATED TO THE \\\"MARKETPLACE\\\"\\n\\n  /**\\n  * @notice Function used to sell an item on the marketplace\\n  * @dev\\n  * - Needs to check balanceOf item trying to be sold\\n  * - Needs to transfer item \\n  * - Update marketItems array\\n  * - Emit event \\n  */\\n  function sellItem(uint256 marketItemId, uint256 price) public {\\n    require(balanceOf(msg.sender, marketItemId) > 0, \\\"Item not found.\\\");\\n    _safeTransferFrom(msg.sender, address(this), marketItemId, 1 ,\\\"\\\");\\n    _marketItems.push(\\n      itemOnSale(\\n        marketItemId,\\n        _marketCount,\\n        price,\\n        msg.sender,\\n        false\\n      )\\n    );\\n    _marketCount++;\\n    emit sellingItem(msg.sender, marketItemId, price);\\n  }\\n\\n  /**\\n  * @notice Function used to unlist an item from marketplace\\n  * @dev\\n  * - Needs to check that user is trying to unlist an item he owns\\n  * - Needs to transfer item from contract to user address\\n  * - Update item's sold variable\\n  * - Emit event\\n  */\\n  function unListItem(uint256 marketItemId) public {\\n    require(_marketItems[marketItemId].seller == msg.sender, \\\"You are not the owner of this item.\\\");\\n    _safeTransferFrom(address(this), msg.sender, marketItemId, 1, \\\"\\\");\\n    _marketItems[marketItemId].sold = true;\\n    emit unListedItem(msg.sender, marketItemId);\\n  }\\n\\n  /**\\n  * @notice Function used to change price from item listed \\n  * @dev\\n  * - Needs to check that user is trying to unlist an item he owns\\n  * - Needs to update price status\\n  * - Emit event\\n  */\\n  function changeItemPrice(uint256 marketItemId, uint256 newPrice) public {\\n    require(_marketItems[marketItemId].seller == msg.sender, \\\"You are not the owner of this item.\\\");\\n    uint256 oldPrice = _marketItems[marketItemId].price;\\n    _marketItems[marketItemId].price = newPrice;\\n    emit itemPriceChanged(msg.sender, marketItemId, oldPrice, newPrice);\\n  }\\n\\n  /**\\n  * @notice Function used to exchange a token item for a real physical clothe.\\n  */\\n  function exchangeItem(uint256 marketItemId) public {\\n    require(balanceOf(msg.sender, marketItemId) > 0);\\n     _burn(msg.sender, marketItemId, 1);\\n     s_maxSupply[marketItemId] -= 1;\\n     s_maxTotalSupply -=1;\\n     emit itemExchanged(msg.sender, marketItemId);\\n  }\\n\\n  /**\\n  * @notice Function used to buy an item on the marketplace\\n  * @dev\\n  * - Needs to check that user is not trying to buy its own item\\n  * - Needs to check that item was not sold before\\n  * - Needs to transfer tokens from buyer to seller\\n  * - Needs to transfer item from seller to buyer\\n  * - Update sold attribute from array\\n  * - Emit event \\n  */\\n  function buyItem(uint256 marketItemId) public {\\n    itemOnSale memory item = _marketItems[marketItemId];\\n    require(msg.sender!=item.seller);\\n    require(item.sold==false);\\n    racksToken.transferFrom(msg.sender, item.seller, item.price);\\n    _safeTransferFrom(address(this), msg.sender, item.tokenId, 1 ,\\\"\\\");\\n    _marketItems[marketItemId].sold = true;\\n    emit itemBought(msg.sender, item.seller, marketItemId, item.price);\\n  }\\n\\n  /**\\n  * @notice Function used to return items that are currently on sale\\n  */\\n  function getMarketItem(uint marketItemId) public view returns(itemOnSale memory){\\n    return _marketItems[marketItemId];\\n  }\\n\\n  function getItemsOnSale() public view returns(itemOnSale[] memory) {\\n    uint arrayLength;\\n    \\n    for(uint i=0; i<_marketItems.length;i++){\\n      itemOnSale memory item = _marketItems[i];\\n      if(item.sold==false){\\n        arrayLength+=1;\\n      }\\n    }\\n    itemOnSale[] memory items = new itemOnSale[](arrayLength);\\n    uint indexCount;\\n    for(uint256 i = 0; i < _marketItems.length; i++){\\n      itemOnSale memory  item = _marketItems[i];\\n      if(item.sold==false){\\n        items[indexCount]=item;\\n        indexCount++;\\n      }\\n    }\\n    return items;\\n  }\\n\\n  // FUNCTIONS RELATED TO \\\"USERS\\\"\\n\\n  /**\\n  * @notice Check if user is RacksMembers and owns at least 1 MrCrypto\\n  * @dev - Require users MrCrypro's balance is > '\\n  * - Require that RacksMembers user's attribute is true\\n  */\\n  function isVip(address user) public view returns(bool){\\n    require(MR_CRYPTO.balanceOf(user) > 0);\\n    require(s_gotRacksMembers[user]);\\n    return true;\\n  }\\n\\n  /**\\n  * @notice Check if user is owner of the Contract or has admin role\\n  * @dev Only callable by the Owner\\n  */\\n  function _isOwnerOrAdmin(address user) internal view returns (bool) {\\n      require(_owner == user || hasRole(ADMIN_ROLE, user));\\n      return true;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as true for a user that is Member\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as true some address that was already set as true\\n  */\\n  function setSingleRacksMember(address user) public onlyOwnerOrAdmin {\\n    //require(!s_gotRacksMembers[user], \\\"User is already RacksMember\\\");\\n    s_gotRacksMembers[user] = true;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as true for a list of users that are Members (array)\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as true some address that was already set as true\\n  */\\n  function setListRacksMembers(address[] memory users) public onlyOwnerOrAdmin {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      //require(!s_gotRacksMembers[users[i]], \\\"User is already RacksMember\\\");\\n       s_gotRacksMembers[users[i]] = true;\\n    }\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as false for a user that was Racks Member before but it is not now\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as false some address that was already set as false\\n  */\\n  function removeSingleRacksMember(address user) public onlyOwnerOrAdmin {\\n    //require(s_gotRacksMembers[user], \\\"User is already not RacksMember\\\");\\n    s_gotRacksMembers[user] = false;\\n  }\\n\\n  /**\\n  * @notice Set RacksMember attribute as false for a list of users that are Members (array)\\n  * @dev Only callable by the Owner\\n  * Require comented because maybe owner or admin are trying to set as false some address that was already set as false\\n  */\\n  function removeListRacksMembers(address[] memory users) public onlyOwnerOrAdmin {\\n    for (uint256 i = 0; i < users.length; i++) {\\n      //require(s_gotRacksMembers[users[i]], \\\"User is already not RacksMember\\\");\\n      s_gotRacksMembers[users[i]] = false;\\n    }\\n  }\\n\\n  /**\\n  * @notice Set new Admin\\n  * @dev Only callable by the Owner\\n  */\\n  function setAdmin(address _newAdmin) public onlyOwner {\\n    _setupRole(ADMIN_ROLE, _newAdmin);\\n  }\\n\\n  // FUNCTIONS RELATED WITH THE CONTRACT\\n\\n  /**\\n  * @notice Change contract state from Active to Inactive and viceversa\\n  * @dev Only callable by the Owner or an admin\\n  */\\n  function flipContractState() public onlyOwnerOrAdmin {\\n    if (s_contractState == ContractState.Active) {\\n      s_contractState = ContractState.Inactive;\\n    }else {\\n      s_contractState = ContractState.Active;\\n    }\\n  }\\n\\n  // FUNCTIONS RELATED TO ERC1155 TOKENS\\n\\n  /**\\n  * @notice Used to return token URI by inserting tokenID\\n  * @dev - returns information stored in s_uris mapping\\n  * - Any user can check this information\\n  */\\n  function uri(uint256 tokenId) override public view returns (string memory) {\\n    return(s_uris[tokenId]);\\n  }\\n\\n  /**\\n  * @notice Used to set tokenURI to specific item \\n  * @dev - Only Owner or Admins can call this function\\n  * - Need to specify:\\n  *  - tokenId: specific item you want to set its uri\\n  *  - uri: uri wanted to be set\\n  */\\n  function setTokenUri(uint256 tokenId, string memory _uri) public onlyOwnerOrAdmin {\\n        require(bytes(s_uris[tokenId]).length == 0, \\\"Can not set uri twice\\\"); \\n        s_uris[tokenId] = _uri; \\n  }\\n\\n  \\n  // FUNCTIONS RELATED TO FUNDS\\n  \\n  /**\\n  * @notice Used to withdraw specific amount of funds\\n  * @dev \\n  * - Only owner is able to call this function\\n  * - Should check that there are avaliable funds to withdraw\\n  * - Should specify the wallet address you want to transfer the funds to\\n  * - Should specify the amount of funds you want to transfer\\n  */\\n  function withdrawFunds(address wallet, uint256 amount) public onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, amount);\\n  }\\n\\n  /**\\n  * @notice Used to withdraw ALL funds\\n  * @dev \\n  * - Only owner is able to call this function\\n  * - Should check that there are avaliable funds to withdraw\\n  * - Should specify the wallet address you want to transfer the funds to\\n  */\\n  function withdrawAllFunds(address wallet) public onlyOwner {\\n    require(racksToken.balanceOf(address(this)) > 0, \\\"No funds to withdraw\\\");\\n    racksToken.transfer(wallet, address(this).balance);\\n  }\\n\\n  /// @notice Receive function\\n  receive() external payable {\\n  }\\n}\",\"keccak256\":\"0xc755208ad39c2695645f21f92a7f610d3d991445b10936158b83da65eab3b4a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103585760003560e01c80638ba8b15a116101bb578063c1075329116100f7578063e289fcb611610095578063f23a6e611161006f578063f23a6e6114610ac3578063f242432a14610aef578063f48c9d3414610b0f578063fd210fd914610b2f57600080fd5b8063e289fcb614610a40578063e7fb74c714610a5a578063e985e9c514610a7a57600080fd5b8063ca90958f116100d1578063ca90958f146109c1578063d547741f146109d7578063d757d027146109f7578063de08f65314610a2b57600080fd5b8063c107532914610954578063c7be7a4914610974578063c7e05f8d146109a157600080fd5b8063a22cb46511610164578063aebc45501161013e578063aebc45501461088d578063b63b8612146108c1578063bbcbc2e7146108ed578063bc197c811461090f57600080fd5b8063a22cb4651461082d578063a7b194241461084d578063a7bc77c61461086d57600080fd5b806391d148541161019557806391d14854146107d2578063976298f314610818578063a217fddf1461070957600080fd5b80638ba8b15a1461075e5780638dc5f45b1461077e5780638e879c8a1461079e57600080fd5b806336568abe11610295578063616524501161023357806372cf6e341161020d57806372cf6e34146106df57806375b238fc1461070957806384203f4b1461071e57806389165aa91461073e57600080fd5b8063616524501461068257806367f082b014610697578063704b6c02146106bf57600080fd5b80634e1273f41161026f5780634e1273f4146105f55780635408c3191461062257806354e889f61461064257806357f7789e1461066257600080fd5b806336568abe14610573578063470cdf97146105935780634a226657146105e057600080fd5b806320ba0814116103025780632d923561116102dc5780632d923561146104f35780632eb2c2d6146105135780632f2ff15d1461053357806332dee40b1461055357600080fd5b806320ba081414610476578063248a9ca3146104a35780632ce38190146104d357600080fd5b8063109b827811610333578063109b8278146103f45780631cb0b273146104345780631fe543e31461045657600080fd5b8062fdd58e1461036457806301ffc9a7146103975780630e89341c146103c757600080fd5b3661035f57005b600080fd5b34801561037057600080fd5b5061038461037f366004613c58565b610b45565b6040519081526020015b60405180910390f35b3480156103a357600080fd5b506103b76103b2366004613d7c565b610bf1565b604051901515815260200161038e565b3480156103d357600080fd5b506103e76103e2366004613d40565b610bfc565b60405161038e91906140f5565b34801561040057600080fd5b5061041c73ef453154766505feb9dbf0a58e6990fd6eb6696981565b6040516001600160a01b03909116815260200161038e565b34801561044057600080fd5b5061045461044f366004613d40565b610c9e565b005b34801561046257600080fd5b50610454610471366004613dcf565b610d3b565b34801561048257600080fd5b50610384610491366004613d40565b6000908152600f602052604090205490565b3480156104af57600080fd5b506103846104be366004613d40565b60009081526003602052604090206001015490565b3480156104df57600080fd5b506104546104ee366004613d40565b610ddc565b3480156104ff57600080fd5b5061045461050e366004613e5d565b610e48565b34801561051f57600080fd5b5061045461052e366004613b12565b611037565b34801561053f57600080fd5b5061045461054e366004613d59565b6110d9565b34801561055f57600080fd5b5061045461056e366004613ac4565b611103565b34801561057f57600080fd5b5061045461058e366004613d59565b6112ab565b34801561059f57600080fd5b506105c77f000000000000000000000000000000000000000000000000000000000000000081565b60405167ffffffffffffffff909116815260200161038e565b3480156105ec57600080fd5b50610454611333565b34801561060157600080fd5b50610615610610366004613cbf565b611576565b60405161038e919061408c565b34801561062e57600080fd5b5061045461063d366004613c82565b6116b4565b34801561064e57600080fd5b5061045461065d366004613ac4565b61177b565b34801561066e57600080fd5b5061045461067d366004613e0c565b6117fe565b34801561068e57600080fd5b506103846118e4565b3480156106a357600080fd5b506106ac600381565b60405161ffff909116815260200161038e565b3480156106cb57600080fd5b506104546106da366004613ac4565b611a25565b3480156106eb57600080fd5b506106f4600281565b60405163ffffffff909116815260200161038e565b34801561071557600080fd5b50610384600081565b34801561072a57600080fd5b506103b7610739366004613ac4565b611a8a565b34801561074a57600080fd5b50610454610759366004613c82565b611b44565b34801561076a57600080fd5b50610454610779366004613ac4565b611c0b565b34801561078a57600080fd5b50610454610799366004613d40565b611c8b565b3480156107aa57600080fd5b506103847f000000000000000000000000000000000000000000000000000000000000000081565b3480156107de57600080fd5b506103b76107ed366004613d59565b60009182526003602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561082457600080fd5b50600a54610384565b34801561083957600080fd5b50610454610848366004613c21565b611d1f565b34801561085957600080fd5b50610454610868366004613e5d565b611d2a565b34801561087957600080fd5b50610454610888366004613d40565b611e55565b34801561089957600080fd5b5061041c7f000000000000000000000000000000000000000000000000000000000000000081565b3480156108cd57600080fd5b50600b546108e090610100900460ff1681565b60405161038e91906140cd565b3480156108f957600080fd5b50610902611f7e565b60405161038e9190614008565b34801561091b57600080fd5b5061093b61092a366004613b12565b63bc197c8160e01b95945050505050565b6040516001600160e01b0319909116815260200161038e565b34801561096057600080fd5b5061045461096f366004613c58565b612189565b34801561098057600080fd5b5061099461098f366004613d40565b612332565b60405161038e9190614108565b3480156109ad57600080fd5b506103846109bc366004613d40565b6123e5565b3480156109cd57600080fd5b50610384600a5481565b3480156109e357600080fd5b506104546109f2366004613d59565b61241c565b348015610a0357600080fd5b506106f47f000000000000000000000000000000000000000000000000000000000000000081565b348015610a3757600080fd5b50610454612441565b348015610a4c57600080fd5b50600b546103b79060ff1681565b348015610a6657600080fd5b50610454610a75366004613d40565b6124e2565b348015610a8657600080fd5b506103b7610a95366004613adf565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b348015610acf57600080fd5b5061093b610ade366004613bbc565b63f23a6e6160e01b95945050505050565b348015610afb57600080fd5b50610454610b0a366004613bbc565b6126ca565b348015610b1b57600080fd5b50610615610b2a366004613ac4565b612765565b348015610b3b57600080fd5b50610384600d5481565b60006001600160a01b038316610bc85760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b6000610beb826127fc565b6000818152601060205260409020805460609190610c1990614219565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4590614219565b8015610c925780601f10610c6757610100808354040283529160200191610c92565b820191906000526020600020905b815481529060010190602001808311610c7557829003601f168201915b50505050509050919050565b6000610caa3383610b45565b11610cb457600080fd5b610cc03382600161283a565b6000818152600f60205260408120805460019290610cdf9084906141bb565b92505081905550600160076000828254610cf991906141bb565b909155505060408051338152602081018390527f9e90d55d2f1f115ffe1b87372c45f27f6b3a2b5ba392942167be78456189009491015b60405180910390a150565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610dce576040517f1cf993f40000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166024820152604401610bbf565b610dd882826129ee565b5050565b610de533612a13565b610e3b5760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b610e453082612a72565b50565b6000610e543384610b45565b11610ea15760405162461bcd60e51b815260206004820152600f60248201527f4974656d206e6f7420666f756e642e00000000000000000000000000000000006044820152606401610bbf565b610ebe333084600160405180602001604052806000815250612add565b6040805160a08101825283815260098054602083019081529282018481523360608401908152600060808501818152600c8054600181018255908352955160049096027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019690965595517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c886015591517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c9850155517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca909301805494511515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009095166001600160a01b03949094169390931793909317909155805491610fec83614281565b909155505060408051338152602081018490529081018290527f23cba88d6c6f26b62b2cfc32a2cc04fbbde8590188b97cd3590e45af9ac6dd6d906060015b60405180910390a15050565b6001600160a01b03851633148061105357506110538533610a95565b6110c55760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610bbf565b6110d28585858585612c88565b5050505050565b6000828152600360205260409020600101546110f481612efb565b6110fe8383612f05565b505050565b6006546001600160a01b0316331461115d5760405162461bcd60e51b815260206004820152601560248201527f55736572206973206e6f7420746865206f776e657200000000000000000000006044820152606401610bbf565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156111a157600080fd5b505afa1580156111b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d99190613db6565b116112265760405162461bcd60e51b815260206004820152601460248201527f4e6f2066756e647320746f2077697468647261770000000000000000000000006044820152606401610bbf565b60055460405163a9059cbb60e01b81526001600160a01b0383811660048301524760248301529091169063a9059cbb90604401602060405180830381600087803b15801561127357600080fd5b505af1158015611287573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd89190613d23565b6001600160a01b03811633146113295760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610bbf565b610dd88282612fa7565b6000600b54610100900460ff166001811115611351576113516142dc565b146113c45760405162461bcd60e51b815260206004820152602560248201527f436f6e7472616374206973206e6f74206163746976652061742074686973206d60448201527f6f6d656e740000000000000000000000000000000000000000000000000000006064820152608401610bbf565b600554600a546040516323b872dd60e01b815233600482015230602482015260448101919091526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561141a57600080fd5b505af115801561142e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114529190613d23565b5060006007546114606118e4565b61146a919061429c565b9050600080805b60085481101561152b576000818152600f60205260408120546114949085614170565b9050808511156114a657809350611518565b8192506114b33084610b45565b6114f55760006114c46001856141bb565b90505b60006114d33083610b45565b11156114e1578093506114f3565b806114eb81614202565b9150506114c7565b505b611512303385600160405180602001604052806000815250612add565b5061152b565b508061152381614281565b915050611471565b50600a5460408051338152602081019290925281018290527fea32e37a2618dbb680c93d891742e9e13b30d184822562a0ee3c09290fd42b43906060015b60405180910390a1505050565b606081518351146115ef5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610bbf565b6000835167ffffffffffffffff81111561160b5761160b614308565b604051908082528060200260200182016040528015611634578160200160208202803683370190505b50905060005b84518110156116ac5761167f858281518110611658576116586142f2565b6020026020010151858381518110611672576116726142f2565b6020026020010151610b45565b828281518110611691576116916142f2565b60209081029190910101526116a581614281565b905061163a565b509392505050565b6116bd33612a13565b6117135760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b60005b8151811015610dd8576000600e6000848481518110611737576117376142f2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061177381614281565b915050611716565b61178433612a13565b6117da5760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b6001600160a01b03166000908152600e60205260409020805460ff19166001179055565b61180733612a13565b61185d5760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b6000828152601060205260409020805461187690614219565b1590506118c55760405162461bcd60e51b815260206004820152601560248201527f43616e206e6f74207365742075726920747769636500000000000000000000006044820152606401610bbf565b600082815260106020908152604090912082516110fe928401906138a9565b6040517f5d3b1d300000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001660248201526003604482015263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648201526002608482015260009081906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690635d3b1d309060a401602060405180830381600087803b1580156119ed57600080fd5b505af1158015611a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190613db6565b6006546001600160a01b03163314611a7f5760405162461bcd60e51b815260206004820152601560248201527f55736572206973206e6f7420746865206f776e657200000000000000000000006044820152606401610bbf565b610e4560008261302a565b600480546040516370a0823160e01b81526001600160a01b0384811693820193909352600092839216906370a082319060240160206040518083038186803b158015611ad557600080fd5b505afa158015611ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0d9190613db6565b11611b1757600080fd5b6001600160a01b0382166000908152600e602052604090205460ff16611b3c57600080fd5b506001919050565b611b4d33612a13565b611ba35760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b60005b8151811015610dd8576001600e6000848481518110611bc757611bc76142f2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580611c0381614281565b915050611ba6565b611c1433612a13565b611c6a5760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b6001600160a01b03166000908152600e60205260409020805460ff19169055565b611c9433612a13565b611cea5760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b600a8190556040518181527f06cd74aabc11982a85b554df4d7833623303656fe69bed4db1b0cb3245feebe390602001610d30565b610dd8338383613034565b336001600160a01b0316600c8381548110611d4757611d476142f2565b60009182526020909120600360049092020101546001600160a01b031614611dbd5760405162461bcd60e51b815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320697460448201526232b69760e91b6064820152608401610bbf565b6000600c8381548110611dd257611dd26142f2565b906000526020600020906004020160020154905081600c8481548110611dfa57611dfa6142f2565b600091825260209182902060026004909202010191909155604080513381529182018590528101829052606081018390527fb141d00f22a670547caacc412e6489d8edaba6a840df558118363ce1a40d6ed290608001611569565b336001600160a01b0316600c8281548110611e7257611e726142f2565b60009182526020909120600360049092020101546001600160a01b031614611ee85760405162461bcd60e51b815260206004820152602360248201527f596f7520617265206e6f7420746865206f776e6572206f66207468697320697460448201526232b69760e91b6064820152608401610bbf565b611f05303383600160405180602001604052806000815250612add565b6001600c8281548110611f1a57611f1a6142f2565b60009182526020918290206003600490920201018054921515600160a01b0260ff60a01b1990931692909217909155604080513381529182018390527fc9cedcca3d85d6009a562a9e70071f6288adabda9ba7f059589165e75c9cf4049101610d30565b60606000805b600c5481101561202a576000600c8281548110611fa357611fa36142f2565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b9091041615156080820181905290915061201757612014600184614170565b92505b508061202281614281565b915050611f84565b5060008167ffffffffffffffff81111561204657612046614308565b6040519080825280602002602001820160405280156120b457816020015b6120a16040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b8152602001906001900390816120645790505b5090506000805b600c54811015612180576000600c82815481106120da576120da6142f2565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b9091041615156080820181905290915061216d5780848481518110612153576121536142f2565b6020026020010181905250828061216990614281565b9350505b508061217881614281565b9150506120bb565b50909392505050565b6006546001600160a01b031633146121e35760405162461bcd60e51b815260206004820152601560248201527f55736572206973206e6f7420746865206f776e657200000000000000000000006044820152606401610bbf565b6005546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561222757600080fd5b505afa15801561223b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061225f9190613db6565b116122ac5760405162461bcd60e51b815260206004820152601460248201527f4e6f2066756e647320746f2077697468647261770000000000000000000000006044820152606401610bbf565b60055460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156122fa57600080fd5b505af115801561230e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fe9190613d23565b61236f6040518060a0016040528060008152602001600081526020016000815260200160006001600160a01b031681526020016000151581525090565b600c8281548110612382576123826142f2565b60009182526020918290206040805160a0810182526004909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b038116606083015260ff600160a01b909104161515608082015292915050565b60006123f082613129565b6123f957600080fd5b6000828152600f60205260408120546007546124159190614188565b9392505050565b60008281526003602052604090206001015461243781612efb565b6110fe8383612fa7565b61244a33612a13565b6124a05760405162461bcd60e51b815260206004820152602160248201527f55736572206973206e6f7420746865204f776e6572206f7220616e2041646d696044820152603760f91b6064820152608401610bbf565b6000600b54610100900460ff1660018111156124be576124be6142dc565b14156124d557600b805461ff001916610100179055565b600b805461ff0019169055565b6000600c82815481106124f7576124f76142f2565b60009182526020918290206040805160a081018252600493909302909101805483526001810154938301939093526002830154908201526003909101546001600160a01b03811660608301819052600160a01b90910460ff161515608083015290915033141561256657600080fd5b60808101511561257557600080fd5b600554606082015160408084015190516323b872dd60e01b81523360048201526001600160a01b03928316602482015260448101919091529116906323b872dd90606401602060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260b9190613d23565b5061262d30338360000151600160405180602001604052806000815250612add565b6001600c8381548110612642576126426142f2565b60009182526020918290206003600490920201018054921515600160a01b0260ff60a01b199093169290921790915560608083015160408085015181513381526001600160a01b03909316948301949094528101859052908101919091527f642067ff529c9b5b1162502fc8e8a3a91dda56e126a84f2fe38d341236231a829060800161102b565b6001600160a01b0385163314806126e657506126e68533610a95565b6127585760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f76656400000000000000000000000000000000000000000000006064820152608401610bbf565b6110d28585858585612add565b6060600060085467ffffffffffffffff81111561278457612784614308565b6040519080825280602002602001820160405280156127ad578160200160208202803683370190505b50905060005b81518110156127f5576127c68482610b45565b8282815181106127d8576127d86142f2565b6020908102919091010152806127ed81614281565b9150506127b3565b5092915050565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610beb5750610beb82613141565b6001600160a01b0383166128b65760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610bbf565b3360006128c28461317f565b905060006128cf8461317f565b60408051602080820183526000918290528882528181528282206001600160a01b038b16835290522054909150848110156129715760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e6365000000000000000000000000000000000000000000000000000000006064820152608401610bbf565b6000868152602081815260408083206001600160a01b038b81168086529184528285208a8703905582518b81529384018a90529092908816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46040805160208101909152600090525b50505050505050565b80600081518110612a0157612a016142f2565b6020026020010151600d819055505050565b6006546000906001600160a01b0383811691161480612a6957506001600160a01b03821660009081527f3617319a054d772f909f7c479a2cebe5066e836a939412e32403c99029b92eff602052604090205460ff165b611b3c57600080fd5b612a8f8260085483604051806020016040528060008152506131ca565b612aa8600854826000918252600f602052604090912055565b8060076000828254612aba9190614170565b92505081905550600160086000828254612ad49190614170565b90915550505050565b6001600160a01b038416612b415760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610bbf565b336000612b4d8561317f565b90506000612b5a8561317f565b90506000868152602081815260408083206001600160a01b038c16845290915290205485811015612be05760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610bbf565b6000878152602081815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290612c1d908490614170565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612c7d848a8a8a8a8a6132ed565b505050505050505050565b8151835114612cff5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d617463680000000000000000000000000000000000000000000000006064820152608401610bbf565b6001600160a01b038416612d635760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610bbf565b3360005b8451811015612e8d576000858281518110612d8457612d846142f2565b602002602001015190506000858381518110612da257612da26142f2565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015612e355760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b6064820152608401610bbf565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290612e72908490614170565b9250508190555050505080612e8690614281565b9050612d67565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612edd92919061409f565b60405180910390a4612ef38187878787876134a2565b505050505050565b610e4581336135ad565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16610dd85760008281526003602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612f633390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff1615610dd85760008281526003602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610dd88282612f05565b816001600160a01b0316836001600160a01b031614156130bc5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610bbf565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000818152600f6020526040812054611b3c57600080fd5b60006001600160e01b031982167f4e2312e0000000000000000000000000000000000000000000000000000000001480610beb5750610beb8261362d565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106131b9576131b96142f2565b602090810291909101015292915050565b6001600160a01b0384166132465760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610bbf565b3360006132528561317f565b9050600061325f8561317f565b90506000868152602081815260408083206001600160a01b038b16845290915281208054879290613291908490614170565b909155505060408051878152602081018790526001600160a01b03808a1692600092918716917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46129e5836000898989895b6001600160a01b0384163b15612ef35760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906133319089908990889088908890600401613fc5565b602060405180830381600087803b15801561334b57600080fd5b505af192505050801561337b575060408051601f3d908101601f1916820190925261337891810190613d99565b60015b6134315761338761431e565b806308c379a014156133c1575061339c61433a565b806133a757506133c3565b8060405162461bcd60e51b8152600401610bbf91906140f5565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610bbf565b6001600160e01b0319811663f23a6e6160e01b146129e55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610bbf565b6001600160a01b0384163b15612ef35760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906134e69089908990889088908890600401613f67565b602060405180830381600087803b15801561350057600080fd5b505af1925050508015613530575060408051601f3d908101601f1916820190925261352d91810190613d99565b60015b61353c5761338761431e565b6001600160e01b0319811663bc197c8160e01b146129e55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610bbf565b60008281526003602090815260408083206001600160a01b038516845290915290205460ff16610dd8576135eb816001600160a01b031660146136c8565b6135f68360206136c8565b604051602001613607929190613ee6565b60408051601f198184030181529082905262461bcd60e51b8252610bbf916004016140f5565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061369057506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610beb57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610beb565b606060006136d783600261419c565b6136e2906002614170565b67ffffffffffffffff8111156136fa576136fa614308565b6040519080825280601f01601f191660200182016040528015613724576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061375b5761375b6142f2565b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106137a6576137a66142f2565b60200101906001600160f81b031916908160001a90535060006137ca84600261419c565b6137d5906001614170565b90505b600181111561385a577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613816576138166142f2565b1a60f81b82828151811061382c5761382c6142f2565b60200101906001600160f81b031916908160001a90535060049490941c9361385381614202565b90506137d8565b5083156124155760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610bbf565b8280546138b590614219565b90600052602060002090601f0160209004810192826138d7576000855561391d565b82601f106138f057805160ff191683800117855561391d565b8280016001018555821561391d579182015b8281111561391d578251825591602001919060010190613902565b5061392992915061392d565b5090565b5b80821115613929576000815560010161392e565b600067ffffffffffffffff83111561395c5761395c614308565b604051613973601f8501601f191660200182614254565b80915083815284848401111561398857600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b03811681146139b757600080fd5b919050565b600082601f8301126139cd57600080fd5b813560206139da8261414c565b6040516139e78282614254565b8381528281019150858301600585901b87018401881015613a0757600080fd5b60005b85811015613a2d57613a1b826139a0565b84529284019290840190600101613a0a565b5090979650505050505050565b600082601f830112613a4b57600080fd5b81356020613a588261414c565b604051613a658282614254565b8381528281019150858301600585901b87018401881015613a8557600080fd5b60005b85811015613a2d57813584529284019290840190600101613a88565b600082601f830112613ab557600080fd5b61241583833560208501613942565b600060208284031215613ad657600080fd5b612415826139a0565b60008060408385031215613af257600080fd5b613afb836139a0565b9150613b09602084016139a0565b90509250929050565b600080600080600060a08688031215613b2a57600080fd5b613b33866139a0565b9450613b41602087016139a0565b9350604086013567ffffffffffffffff80821115613b5e57600080fd5b613b6a89838a01613a3a565b94506060880135915080821115613b8057600080fd5b613b8c89838a01613a3a565b93506080880135915080821115613ba257600080fd5b50613baf88828901613aa4565b9150509295509295909350565b600080600080600060a08688031215613bd457600080fd5b613bdd866139a0565b9450613beb602087016139a0565b93506040860135925060608601359150608086013567ffffffffffffffff811115613c1557600080fd5b613baf88828901613aa4565b60008060408385031215613c3457600080fd5b613c3d836139a0565b91506020830135613c4d816143c4565b809150509250929050565b60008060408385031215613c6b57600080fd5b613c74836139a0565b946020939093013593505050565b600060208284031215613c9457600080fd5b813567ffffffffffffffff811115613cab57600080fd5b613cb7848285016139bc565b949350505050565b60008060408385031215613cd257600080fd5b823567ffffffffffffffff80821115613cea57600080fd5b613cf6868387016139bc565b93506020850135915080821115613d0c57600080fd5b50613d1985828601613a3a565b9150509250929050565b600060208284031215613d3557600080fd5b8151612415816143c4565b600060208284031215613d5257600080fd5b5035919050565b60008060408385031215613d6c57600080fd5b82359150613b09602084016139a0565b600060208284031215613d8e57600080fd5b8135612415816143d2565b600060208284031215613dab57600080fd5b8151612415816143d2565b600060208284031215613dc857600080fd5b5051919050565b60008060408385031215613de257600080fd5b82359150602083013567ffffffffffffffff811115613e0057600080fd5b613d1985828601613a3a565b60008060408385031215613e1f57600080fd5b82359150602083013567ffffffffffffffff811115613e3d57600080fd5b8301601f81018513613e4e57600080fd5b613d1985823560208401613942565b60008060408385031215613e7057600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015613eaf57815187529582019590820190600101613e93565b509495945050505050565b60008151808452613ed28160208601602086016141d2565b601f01601f19169290920160200192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613f1e8160178501602088016141d2565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613f5b8160288401602088016141d2565b01602801949350505050565b60006001600160a01b03808816835280871660208401525060a06040830152613f9360a0830186613e7f565b8281036060840152613fa58186613e7f565b90508281036080840152613fb98185613eba565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613ffd60a0830184613eba565b979650505050505050565b6020808252825182820181905260009190848201906040850190845b818110156140805761406d8385518051825260208101516020830152604081015160408301526001600160a01b0360608201511660608301526080810151151560808301525050565b9284019260a09290920191600101614024565b50909695505050505050565b6020815260006124156020830184613e7f565b6040815260006140b26040830185613e7f565b82810360208401526140c48185613e7f565b95945050505050565b60208101600283106140ef57634e487b7160e01b600052602160045260246000fd5b91905290565b6020815260006124156020830184613eba565b60a08101610beb82848051825260208101516020830152604081015160408301526001600160a01b0360608201511660608301526080810151151560808301525050565b600067ffffffffffffffff82111561416657614166614308565b5060051b60200190565b60008219821115614183576141836142b0565b500190565b600082614197576141976142c6565b500490565b60008160001904831182151516156141b6576141b66142b0565b500290565b6000828210156141cd576141cd6142b0565b500390565b60005b838110156141ed5781810151838201526020016141d5565b838111156141fc576000848401525b50505050565b600081614211576142116142b0565b506000190190565b600181811c9082168061422d57607f821691505b6020821081141561424e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561427a5761427a614308565b6040525050565b6000600019821415614295576142956142b0565b5060010190565b6000826142ab576142ab6142c6565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156143375760046000803e5060005160e01c5b90565b600060443d10156143485790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561437857505050505090565b82850191508151818111156143905750505050505090565b843d87010160208285010111156143aa5750505050505090565b6143b960208286010187614254565b509095945050505050565b8015158114610e4557600080fd5b6001600160e01b031981168114610e4557600080fdfea26469706673582212200f203a6e4abd5cf736ee21d206e5b2b3da9f09da611ce5bf9f1cdc6f42fec9cc64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_randomNumber()": {
        "details": "Uses Chainlink VRF -> call requestRandomWords method by using o_vrfCoordinator object set as internal because is going to be called only when a case is opened"
      },
      "_rarityOfItem(uint256)": {
        "details": "- Requires that tokenId exists (item is listed) - chance is calculated as item supply divided by total items supply"
      },
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "buyItem(uint256)": {
        "details": "- Needs to check that user is not trying to buy its own item - Needs to check that item was not sold before - Needs to transfer tokens from buyer to seller - Needs to transfer item from seller to buyer - Update sold attribute from array - Emit event "
      },
      "changeItemPrice(uint256,uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Needs to update price status - Emit event"
      },
      "flipContractState()": {
        "details": "Only callable by the Owner or an admin"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "isVip(address)": {
        "details": "- Require users MrCrypro's balance is > ' - Require that RacksMembers user's attribute is true"
      },
      "listItem(uint256)": {
        "details": "Only callable by the Owner"
      },
      "openCase()": {
        "details": " - Should check that msg.value is bigger than casePrice - Should transfer msg.value to the contract - Internally calls randomNumber()  - Apply modular function for the randomNumber to be between 0 and totalSupply of items - Should choose an item"
      },
      "removeListRacksMembers(address[])": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false"
      },
      "removeSingleRacksMember(address)": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as false some address that was already set as false"
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "sellItem(uint256,uint256)": {
        "details": "- Needs to check balanceOf item trying to be sold - Needs to transfer item  - Update marketItems array - Emit event "
      },
      "setAdmin(address)": {
        "details": "Only callable by the Owner"
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setCasePrice(uint256)": {
        "details": "Only callable by the Owner"
      },
      "setListRacksMembers(address[])": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true"
      },
      "setSingleRacksMember(address)": {
        "details": "Only callable by the Owner Require comented because maybe owner or admin are trying to set as true some address that was already set as true"
      },
      "setTokenUri(uint256,string)": {
        "details": "- Only Owner or Admins can call this function - Need to specify:  - tokenId: specific item you want to set its uri  - uri: uri wanted to be set"
      },
      "supplyOfItem(uint256)": {
        "details": "- Getter of s_maxSupply mapping"
      },
      "unListItem(uint256)": {
        "details": "- Needs to check that user is trying to unlist an item he owns - Needs to transfer item from contract to user address - Update item's sold variable - Emit event"
      },
      "uri(uint256)": {
        "details": "- returns information stored in s_uris mapping - Any user can check this information"
      },
      "viewItems(address)": {
        "details": "Copy users inventory in an empty array and returns it"
      },
      "withdrawAllFunds(address)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to"
      },
      "withdrawFunds(address,uint256)": {
        "details": " - Only owner is able to call this function - Should check that there are avaliable funds to withdraw - Should specify the wallet address you want to transfer the funds to - Should specify the amount of funds you want to transfer"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CaseOpened(address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "ADMIN_ROLE()": {
        "notice": "Standard variables"
      },
      "_randomNumber()": {
        "notice": "Used to get an actually Random Number -> to pick an item when openning a case"
      },
      "_rarityOfItem(uint256)": {
        "notice": "Calculate chance of receiving an specific item - As higher is result higher is the rarity of the item"
      },
      "buyItem(uint256)": {
        "notice": "Function used to buy an item on the marketplace"
      },
      "changeItemPrice(uint256,uint256)": {
        "notice": "Function used to change price from item listed "
      },
      "exchangeItem(uint256)": {
        "notice": "Function used to exchange a token item for a real physical clothe."
      },
      "flipContractState()": {
        "notice": "Change contract state from Active to Inactive and viceversa"
      },
      "getCasePrice()": {
        "notice": "View case price"
      },
      "getMarketItem(uint256)": {
        "notice": "Function used to return items that are currently on sale"
      },
      "i_vrfCoordinator()": {
        "notice": "VRF Variables"
      },
      "isVip(address)": {
        "notice": "Check if user is RacksMembers and owns at least 1 MrCrypto"
      },
      "listItem(uint256)": {
        "notice": "List a new item to the avaliable collection"
      },
      "openCase()": {
        "notice": "Function used to 'open a case' and get an item"
      },
      "removeListRacksMembers(address[])": {
        "notice": "Set RacksMember attribute as false for a list of users that are Members (array)"
      },
      "removeSingleRacksMember(address)": {
        "notice": "Set RacksMember attribute as false for a user that was Racks Member before but it is not now"
      },
      "sellItem(uint256,uint256)": {
        "notice": "Function used to sell an item on the marketplace"
      },
      "setAdmin(address)": {
        "notice": "Set new Admin"
      },
      "setCasePrice(uint256)": {
        "notice": "Change price of the box"
      },
      "setListRacksMembers(address[])": {
        "notice": "Set RacksMember attribute as true for a list of users that are Members (array)"
      },
      "setSingleRacksMember(address)": {
        "notice": "Set RacksMember attribute as true for a user that is Member"
      },
      "setTokenUri(uint256,string)": {
        "notice": "Used to set tokenURI to specific item "
      },
      "supplyOfItem(uint256)": {
        "notice": "Returns maxSupply of specific item (by tokenId)"
      },
      "supportsInterface(bytes4)": {
        "notice": "Need to override supportsInterface function because Contract is ERC1155 and AccessControl"
      },
      "unListItem(uint256)": {
        "notice": "Function used to unlist an item from marketplace"
      },
      "uri(uint256)": {
        "notice": "Used to return token URI by inserting tokenID"
      },
      "viewItems(address)": {
        "notice": "Returns all the items inside the user's inventory (Could be used by the user to check his inventory or to check someone else inventory by address)"
      },
      "withdrawAllFunds(address)": {
        "notice": "Used to withdraw ALL funds"
      },
      "withdrawFunds(address,uint256)": {
        "notice": "Used to withdraw specific amount of funds"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 670,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 676,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 678,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)166_storage)"
      },
      {
        "astId": 3526,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "MR_CRYPTO",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC721)2935"
      },
      {
        "astId": 3532,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "racksToken",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)2794"
      },
      {
        "astId": 3538,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3540,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_maxTotalSupply",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3542,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_tokenCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3544,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_marketCount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3546,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "casePrice",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3549,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "contractActive",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3552,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_contractState",
        "offset": 1,
        "slot": "11",
        "type": "t_enum(ContractState)3511"
      },
      {
        "astId": 3556,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "_marketItems",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(itemOnSale)3522_storage)dyn_storage"
      },
      {
        "astId": 3574,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_randomWord",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3579,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_gotRacksMembers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3583,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_maxSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3587,
        "contract": "contracts/RacksItems.sol:RacksItems",
        "label": "s_uris",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(itemOnSale)3522_storage)dyn_storage": {
        "base": "t_struct(itemOnSale)3522_storage",
        "encoding": "dynamic_array",
        "label": "struct RacksItems.itemOnSale[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2794": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2935": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_enum(ContractState)3511": {
        "encoding": "inplace",
        "label": "enum RacksItems.ContractState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)166_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)166_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)166_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 163,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 165,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(itemOnSale)3522_storage": {
        "encoding": "inplace",
        "label": "struct RacksItems.itemOnSale",
        "members": [
          {
            "astId": 3513,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3515,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "marketItemId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3517,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "price",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3519,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "seller",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3521,
            "contract": "contracts/RacksItems.sol:RacksItems",
            "label": "sold",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}